
project_apr06a.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4b8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  0800d668  0800d668  0001d668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d71c  0800d71c  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d71c  0800d71c  0001d71c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d724  0800d724  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d724  0800d724  0001d724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d728  0800d728  0001d728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0800d72c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008fcc  200000a8  0800d7d4  000200a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20009074  0800d7d4  00029074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e716  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000059bd  00000000  00000000  0004e7ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002268  00000000  00000000  000541b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002000  00000000  00000000  00056418  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002c332  00000000  00000000  00058418  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001f03c  00000000  00000000  0008474a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f2ecf  00000000  00000000  000a3786  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00196655  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000092dc  00000000  00000000  001966d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000a8 	.word	0x200000a8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800d650 	.word	0x0800d650

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000ac 	.word	0x200000ac
 80001ec:	0800d650 	.word	0x0800d650

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b972 	b.w	80004fc <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9e08      	ldr	r6, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	4688      	mov	r8, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	d14b      	bne.n	80002d6 <__udivmoddi4+0xa6>
 800023e:	428a      	cmp	r2, r1
 8000240:	4615      	mov	r5, r2
 8000242:	d967      	bls.n	8000314 <__udivmoddi4+0xe4>
 8000244:	fab2 f282 	clz	r2, r2
 8000248:	b14a      	cbz	r2, 800025e <__udivmoddi4+0x2e>
 800024a:	f1c2 0720 	rsb	r7, r2, #32
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	fa20 f707 	lsr.w	r7, r0, r7
 8000256:	4095      	lsls	r5, r2
 8000258:	ea47 0803 	orr.w	r8, r7, r3
 800025c:	4094      	lsls	r4, r2
 800025e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000262:	0c23      	lsrs	r3, r4, #16
 8000264:	fbb8 f7fe 	udiv	r7, r8, lr
 8000268:	fa1f fc85 	uxth.w	ip, r5
 800026c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000270:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000274:	fb07 f10c 	mul.w	r1, r7, ip
 8000278:	4299      	cmp	r1, r3
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x60>
 800027c:	18eb      	adds	r3, r5, r3
 800027e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000282:	f080 811b 	bcs.w	80004bc <__udivmoddi4+0x28c>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 8118 	bls.w	80004bc <__udivmoddi4+0x28c>
 800028c:	3f02      	subs	r7, #2
 800028e:	442b      	add	r3, r5
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0fe 	udiv	r0, r3, lr
 8000298:	fb0e 3310 	mls	r3, lr, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a4:	45a4      	cmp	ip, r4
 80002a6:	d909      	bls.n	80002bc <__udivmoddi4+0x8c>
 80002a8:	192c      	adds	r4, r5, r4
 80002aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x290>
 80002b2:	45a4      	cmp	ip, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x290>
 80002b8:	3802      	subs	r0, #2
 80002ba:	442c      	add	r4, r5
 80002bc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c0:	eba4 040c 	sub.w	r4, r4, ip
 80002c4:	2700      	movs	r7, #0
 80002c6:	b11e      	cbz	r6, 80002d0 <__udivmoddi4+0xa0>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c6 4300 	strd	r4, r3, [r6]
 80002d0:	4639      	mov	r1, r7
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xbe>
 80002da:	2e00      	cmp	r6, #0
 80002dc:	f000 80eb 	beq.w	80004b6 <__udivmoddi4+0x286>
 80002e0:	2700      	movs	r7, #0
 80002e2:	e9c6 0100 	strd	r0, r1, [r6]
 80002e6:	4638      	mov	r0, r7
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f783 	clz	r7, r3
 80002f2:	2f00      	cmp	r7, #0
 80002f4:	d147      	bne.n	8000386 <__udivmoddi4+0x156>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd0>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80fa 	bhi.w	80004f4 <__udivmoddi4+0x2c4>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	4698      	mov	r8, r3
 800030a:	2e00      	cmp	r6, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa0>
 800030e:	e9c6 4800 	strd	r4, r8, [r6]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa0>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xe8>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 808f 	bne.w	8000440 <__udivmoddi4+0x210>
 8000322:	1b49      	subs	r1, r1, r5
 8000324:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000328:	fa1f f885 	uxth.w	r8, r5
 800032c:	2701      	movs	r7, #1
 800032e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000332:	0c23      	lsrs	r3, r4, #16
 8000334:	fb0e 111c 	mls	r1, lr, ip, r1
 8000338:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800033c:	fb08 f10c 	mul.w	r1, r8, ip
 8000340:	4299      	cmp	r1, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x124>
 8000344:	18eb      	adds	r3, r5, r3
 8000346:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x122>
 800034c:	4299      	cmp	r1, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2bc>
 8000352:	4684      	mov	ip, r0
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	b2a3      	uxth	r3, r4
 8000358:	fbb1 f0fe 	udiv	r0, r1, lr
 800035c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000360:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000364:	fb08 f800 	mul.w	r8, r8, r0
 8000368:	45a0      	cmp	r8, r4
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x14c>
 800036c:	192c      	adds	r4, r5, r4
 800036e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x14a>
 8000374:	45a0      	cmp	r8, r4
 8000376:	f200 80b6 	bhi.w	80004e6 <__udivmoddi4+0x2b6>
 800037a:	4618      	mov	r0, r3
 800037c:	eba4 0408 	sub.w	r4, r4, r8
 8000380:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000384:	e79f      	b.n	80002c6 <__udivmoddi4+0x96>
 8000386:	f1c7 0c20 	rsb	ip, r7, #32
 800038a:	40bb      	lsls	r3, r7
 800038c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000390:	ea4e 0e03 	orr.w	lr, lr, r3
 8000394:	fa01 f407 	lsl.w	r4, r1, r7
 8000398:	fa20 f50c 	lsr.w	r5, r0, ip
 800039c:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a4:	4325      	orrs	r5, r4
 80003a6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003aa:	0c2c      	lsrs	r4, r5, #16
 80003ac:	fb08 3319 	mls	r3, r8, r9, r3
 80003b0:	fa1f fa8e 	uxth.w	sl, lr
 80003b4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003b8:	fb09 f40a 	mul.w	r4, r9, sl
 80003bc:	429c      	cmp	r4, r3
 80003be:	fa02 f207 	lsl.w	r2, r2, r7
 80003c2:	fa00 f107 	lsl.w	r1, r0, r7
 80003c6:	d90b      	bls.n	80003e0 <__udivmoddi4+0x1b0>
 80003c8:	eb1e 0303 	adds.w	r3, lr, r3
 80003cc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d0:	f080 8087 	bcs.w	80004e2 <__udivmoddi4+0x2b2>
 80003d4:	429c      	cmp	r4, r3
 80003d6:	f240 8084 	bls.w	80004e2 <__udivmoddi4+0x2b2>
 80003da:	f1a9 0902 	sub.w	r9, r9, #2
 80003de:	4473      	add	r3, lr
 80003e0:	1b1b      	subs	r3, r3, r4
 80003e2:	b2ad      	uxth	r5, r5
 80003e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ec:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f4:	45a2      	cmp	sl, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x1da>
 80003f8:	eb1e 0404 	adds.w	r4, lr, r4
 80003fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000400:	d26b      	bcs.n	80004da <__udivmoddi4+0x2aa>
 8000402:	45a2      	cmp	sl, r4
 8000404:	d969      	bls.n	80004da <__udivmoddi4+0x2aa>
 8000406:	3802      	subs	r0, #2
 8000408:	4474      	add	r4, lr
 800040a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040e:	fba0 8902 	umull	r8, r9, r0, r2
 8000412:	eba4 040a 	sub.w	r4, r4, sl
 8000416:	454c      	cmp	r4, r9
 8000418:	46c2      	mov	sl, r8
 800041a:	464b      	mov	r3, r9
 800041c:	d354      	bcc.n	80004c8 <__udivmoddi4+0x298>
 800041e:	d051      	beq.n	80004c4 <__udivmoddi4+0x294>
 8000420:	2e00      	cmp	r6, #0
 8000422:	d069      	beq.n	80004f8 <__udivmoddi4+0x2c8>
 8000424:	ebb1 050a 	subs.w	r5, r1, sl
 8000428:	eb64 0403 	sbc.w	r4, r4, r3
 800042c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000430:	40fd      	lsrs	r5, r7
 8000432:	40fc      	lsrs	r4, r7
 8000434:	ea4c 0505 	orr.w	r5, ip, r5
 8000438:	e9c6 5400 	strd	r5, r4, [r6]
 800043c:	2700      	movs	r7, #0
 800043e:	e747      	b.n	80002d0 <__udivmoddi4+0xa0>
 8000440:	f1c2 0320 	rsb	r3, r2, #32
 8000444:	fa20 f703 	lsr.w	r7, r0, r3
 8000448:	4095      	lsls	r5, r2
 800044a:	fa01 f002 	lsl.w	r0, r1, r2
 800044e:	fa21 f303 	lsr.w	r3, r1, r3
 8000452:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000456:	4338      	orrs	r0, r7
 8000458:	0c01      	lsrs	r1, r0, #16
 800045a:	fbb3 f7fe 	udiv	r7, r3, lr
 800045e:	fa1f f885 	uxth.w	r8, r5
 8000462:	fb0e 3317 	mls	r3, lr, r7, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb07 f308 	mul.w	r3, r7, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	fa04 f402 	lsl.w	r4, r4, r2
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x256>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f107 3cff 	add.w	ip, r7, #4294967295
 800047c:	d22f      	bcs.n	80004de <__udivmoddi4+0x2ae>
 800047e:	428b      	cmp	r3, r1
 8000480:	d92d      	bls.n	80004de <__udivmoddi4+0x2ae>
 8000482:	3f02      	subs	r7, #2
 8000484:	4429      	add	r1, r5
 8000486:	1acb      	subs	r3, r1, r3
 8000488:	b281      	uxth	r1, r0
 800048a:	fbb3 f0fe 	udiv	r0, r3, lr
 800048e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000492:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000496:	fb00 f308 	mul.w	r3, r0, r8
 800049a:	428b      	cmp	r3, r1
 800049c:	d907      	bls.n	80004ae <__udivmoddi4+0x27e>
 800049e:	1869      	adds	r1, r5, r1
 80004a0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a4:	d217      	bcs.n	80004d6 <__udivmoddi4+0x2a6>
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d915      	bls.n	80004d6 <__udivmoddi4+0x2a6>
 80004aa:	3802      	subs	r0, #2
 80004ac:	4429      	add	r1, r5
 80004ae:	1ac9      	subs	r1, r1, r3
 80004b0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b4:	e73b      	b.n	800032e <__udivmoddi4+0xfe>
 80004b6:	4637      	mov	r7, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e709      	b.n	80002d0 <__udivmoddi4+0xa0>
 80004bc:	4607      	mov	r7, r0
 80004be:	e6e7      	b.n	8000290 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x8c>
 80004c4:	4541      	cmp	r1, r8
 80004c6:	d2ab      	bcs.n	8000420 <__udivmoddi4+0x1f0>
 80004c8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004cc:	eb69 020e 	sbc.w	r2, r9, lr
 80004d0:	3801      	subs	r0, #1
 80004d2:	4613      	mov	r3, r2
 80004d4:	e7a4      	b.n	8000420 <__udivmoddi4+0x1f0>
 80004d6:	4660      	mov	r0, ip
 80004d8:	e7e9      	b.n	80004ae <__udivmoddi4+0x27e>
 80004da:	4618      	mov	r0, r3
 80004dc:	e795      	b.n	800040a <__udivmoddi4+0x1da>
 80004de:	4667      	mov	r7, ip
 80004e0:	e7d1      	b.n	8000486 <__udivmoddi4+0x256>
 80004e2:	4681      	mov	r9, r0
 80004e4:	e77c      	b.n	80003e0 <__udivmoddi4+0x1b0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	442c      	add	r4, r5
 80004ea:	e747      	b.n	800037c <__udivmoddi4+0x14c>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	442b      	add	r3, r5
 80004f2:	e72f      	b.n	8000354 <__udivmoddi4+0x124>
 80004f4:	4638      	mov	r0, r7
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xda>
 80004f8:	4637      	mov	r7, r6
 80004fa:	e6e9      	b.n	80002d0 <__udivmoddi4+0xa0>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000504:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <HAL_Init+0x40>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a0d      	ldr	r2, [pc, #52]	; (8000540 <HAL_Init+0x40>)
 800050a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800050e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000510:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <HAL_Init+0x40>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a0a      	ldr	r2, [pc, #40]	; (8000540 <HAL_Init+0x40>)
 8000516:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800051a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800051c:	4b08      	ldr	r3, [pc, #32]	; (8000540 <HAL_Init+0x40>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a07      	ldr	r2, [pc, #28]	; (8000540 <HAL_Init+0x40>)
 8000522:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000526:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000528:	2003      	movs	r0, #3
 800052a:	f000 f8fa 	bl	8000722 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800052e:	2000      	movs	r0, #0
 8000530:	f00c fb28 	bl	800cb84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000534:	f00b ffbe 	bl	800c4b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000538:	2300      	movs	r3, #0
}
 800053a:	4618      	mov	r0, r3
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	40023c00 	.word	0x40023c00

08000544 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000548:	4b06      	ldr	r3, [pc, #24]	; (8000564 <HAL_IncTick+0x20>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	461a      	mov	r2, r3
 800054e:	4b06      	ldr	r3, [pc, #24]	; (8000568 <HAL_IncTick+0x24>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4413      	add	r3, r2
 8000554:	4a04      	ldr	r2, [pc, #16]	; (8000568 <HAL_IncTick+0x24>)
 8000556:	6013      	str	r3, [r2, #0]
}
 8000558:	bf00      	nop
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	20000004 	.word	0x20000004
 8000568:	200086cc 	.word	0x200086cc

0800056c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  return uwTick;
 8000570:	4b03      	ldr	r3, [pc, #12]	; (8000580 <HAL_GetTick+0x14>)
 8000572:	681b      	ldr	r3, [r3, #0]
}
 8000574:	4618      	mov	r0, r3
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	200086cc 	.word	0x200086cc

08000584 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800058c:	f7ff ffee 	bl	800056c <HAL_GetTick>
 8000590:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800059c:	d005      	beq.n	80005aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800059e:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <HAL_Delay+0x40>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	461a      	mov	r2, r3
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	4413      	add	r3, r2
 80005a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005aa:	bf00      	nop
 80005ac:	f7ff ffde 	bl	800056c <HAL_GetTick>
 80005b0:	4602      	mov	r2, r0
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	1ad3      	subs	r3, r2, r3
 80005b6:	68fa      	ldr	r2, [r7, #12]
 80005b8:	429a      	cmp	r2, r3
 80005ba:	d8f7      	bhi.n	80005ac <HAL_Delay+0x28>
  {
  }
}
 80005bc:	bf00      	nop
 80005be:	3710      	adds	r7, #16
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20000004 	.word	0x20000004

080005c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	f003 0307 	and.w	r3, r3, #7
 80005d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <__NVIC_SetPriorityGrouping+0x44>)
 80005da:	68db      	ldr	r3, [r3, #12]
 80005dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005de:	68ba      	ldr	r2, [r7, #8]
 80005e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005e4:	4013      	ands	r3, r2
 80005e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005fa:	4a04      	ldr	r2, [pc, #16]	; (800060c <__NVIC_SetPriorityGrouping+0x44>)
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	60d3      	str	r3, [r2, #12]
}
 8000600:	bf00      	nop
 8000602:	3714      	adds	r7, #20
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000614:	4b04      	ldr	r3, [pc, #16]	; (8000628 <__NVIC_GetPriorityGrouping+0x18>)
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	0a1b      	lsrs	r3, r3, #8
 800061a:	f003 0307 	and.w	r3, r3, #7
}
 800061e:	4618      	mov	r0, r3
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr
 8000628:	e000ed00 	.word	0xe000ed00

0800062c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063a:	2b00      	cmp	r3, #0
 800063c:	db0b      	blt.n	8000656 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	f003 021f 	and.w	r2, r3, #31
 8000644:	4907      	ldr	r1, [pc, #28]	; (8000664 <__NVIC_EnableIRQ+0x38>)
 8000646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800064a:	095b      	lsrs	r3, r3, #5
 800064c:	2001      	movs	r0, #1
 800064e:	fa00 f202 	lsl.w	r2, r0, r2
 8000652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000656:	bf00      	nop
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	e000e100 	.word	0xe000e100

08000668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	6039      	str	r1, [r7, #0]
 8000672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000678:	2b00      	cmp	r3, #0
 800067a:	db0a      	blt.n	8000692 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	b2da      	uxtb	r2, r3
 8000680:	490c      	ldr	r1, [pc, #48]	; (80006b4 <__NVIC_SetPriority+0x4c>)
 8000682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000686:	0112      	lsls	r2, r2, #4
 8000688:	b2d2      	uxtb	r2, r2
 800068a:	440b      	add	r3, r1
 800068c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000690:	e00a      	b.n	80006a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	b2da      	uxtb	r2, r3
 8000696:	4908      	ldr	r1, [pc, #32]	; (80006b8 <__NVIC_SetPriority+0x50>)
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	f003 030f 	and.w	r3, r3, #15
 800069e:	3b04      	subs	r3, #4
 80006a0:	0112      	lsls	r2, r2, #4
 80006a2:	b2d2      	uxtb	r2, r2
 80006a4:	440b      	add	r3, r1
 80006a6:	761a      	strb	r2, [r3, #24]
}
 80006a8:	bf00      	nop
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	e000e100 	.word	0xe000e100
 80006b8:	e000ed00 	.word	0xe000ed00

080006bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006bc:	b480      	push	{r7}
 80006be:	b089      	sub	sp, #36	; 0x24
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	f003 0307 	and.w	r3, r3, #7
 80006ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006d0:	69fb      	ldr	r3, [r7, #28]
 80006d2:	f1c3 0307 	rsb	r3, r3, #7
 80006d6:	2b04      	cmp	r3, #4
 80006d8:	bf28      	it	cs
 80006da:	2304      	movcs	r3, #4
 80006dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006de:	69fb      	ldr	r3, [r7, #28]
 80006e0:	3304      	adds	r3, #4
 80006e2:	2b06      	cmp	r3, #6
 80006e4:	d902      	bls.n	80006ec <NVIC_EncodePriority+0x30>
 80006e6:	69fb      	ldr	r3, [r7, #28]
 80006e8:	3b03      	subs	r3, #3
 80006ea:	e000      	b.n	80006ee <NVIC_EncodePriority+0x32>
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f0:	f04f 32ff 	mov.w	r2, #4294967295
 80006f4:	69bb      	ldr	r3, [r7, #24]
 80006f6:	fa02 f303 	lsl.w	r3, r2, r3
 80006fa:	43da      	mvns	r2, r3
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	401a      	ands	r2, r3
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000704:	f04f 31ff 	mov.w	r1, #4294967295
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	fa01 f303 	lsl.w	r3, r1, r3
 800070e:	43d9      	mvns	r1, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000714:	4313      	orrs	r3, r2
         );
}
 8000716:	4618      	mov	r0, r3
 8000718:	3724      	adds	r7, #36	; 0x24
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr

08000722 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000722:	b580      	push	{r7, lr}
 8000724:	b082      	sub	sp, #8
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800072a:	6878      	ldr	r0, [r7, #4]
 800072c:	f7ff ff4c 	bl	80005c8 <__NVIC_SetPriorityGrouping>
}
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000738:	b580      	push	{r7, lr}
 800073a:	b086      	sub	sp, #24
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	60b9      	str	r1, [r7, #8]
 8000742:	607a      	str	r2, [r7, #4]
 8000744:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000746:	2300      	movs	r3, #0
 8000748:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800074a:	f7ff ff61 	bl	8000610 <__NVIC_GetPriorityGrouping>
 800074e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000750:	687a      	ldr	r2, [r7, #4]
 8000752:	68b9      	ldr	r1, [r7, #8]
 8000754:	6978      	ldr	r0, [r7, #20]
 8000756:	f7ff ffb1 	bl	80006bc <NVIC_EncodePriority>
 800075a:	4602      	mov	r2, r0
 800075c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000760:	4611      	mov	r1, r2
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff ff80 	bl	8000668 <__NVIC_SetPriority>
}
 8000768:	bf00      	nop
 800076a:	3718      	adds	r7, #24
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}

08000770 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800077a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff ff54 	bl	800062c <__NVIC_EnableIRQ>
}
 8000784:	bf00      	nop
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d101      	bne.n	800079e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800079a:	2301      	movs	r3, #1
 800079c:	e00e      	b.n	80007bc <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	795b      	ldrb	r3, [r3, #5]
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d105      	bne.n	80007b4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2200      	movs	r2, #0
 80007ac:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f00b feac 	bl	800c50c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2201      	movs	r2, #1
 80007b8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80007ba:	2300      	movs	r3, #0
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d101      	bne.n	80007d6 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80007d2:	2301      	movs	r3, #1
 80007d4:	e03b      	b.n	800084e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d106      	bne.n	80007f0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2200      	movs	r2, #0
 80007e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80007ea:	6878      	ldr	r0, [r7, #4]
 80007ec:	f00b feb0 	bl	800c550 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2202      	movs	r2, #2
 80007f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	685a      	ldr	r2, [r3, #4]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	430a      	orrs	r2, r1
 800080c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000814:	f023 0107 	bic.w	r1, r3, #7
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	689a      	ldr	r2, [r3, #8]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	430a      	orrs	r2, r1
 8000822:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800082e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000832:	687a      	ldr	r2, [r7, #4]
 8000834:	68d1      	ldr	r1, [r2, #12]
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	6812      	ldr	r2, [r2, #0]
 800083a:	430b      	orrs	r3, r1
 800083c:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	2200      	movs	r2, #0
 8000842:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2201      	movs	r2, #1
 8000848:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800084c:	2300      	movs	r3, #0
}
 800084e:	4618      	mov	r0, r3
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	b084      	sub	sp, #16
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	f003 0301 	and.w	r3, r3, #1
 8000874:	2b00      	cmp	r3, #0
 8000876:	d026      	beq.n	80008c6 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800087e:	2b00      	cmp	r3, #0
 8000880:	d021      	beq.n	80008c6 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000890:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000896:	f043 0201 	orr.w	r2, r3, #1
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	2201      	movs	r2, #1
 80008a4:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2204      	movs	r2, #4
 80008aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	2200      	movs	r2, #0
 80008b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	695b      	ldr	r3, [r3, #20]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d003      	beq.n	80008c6 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	695b      	ldr	r3, [r3, #20]
 80008c2:	6878      	ldr	r0, [r7, #4]
 80008c4:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	f003 0320 	and.w	r3, r3, #32
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d026      	beq.n	800091e <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d021      	beq.n	800091e <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80008e8:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	2220      	movs	r2, #32
 80008f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008f6:	f043 0202 	orr.w	r2, r3, #2
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2204      	movs	r2, #4
 8000902:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2200      	movs	r2, #0
 800090a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	695b      	ldr	r3, [r3, #20]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d003      	beq.n	800091e <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	695b      	ldr	r3, [r3, #20]
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	f003 0308 	and.w	r3, r3, #8
 8000924:	2b00      	cmp	r3, #0
 8000926:	d026      	beq.n	8000976 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800092e:	2b00      	cmp	r3, #0
 8000930:	d021      	beq.n	8000976 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000940:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	2208      	movs	r2, #8
 8000948:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800094e:	f043 0204 	orr.w	r2, r3, #4
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	2204      	movs	r2, #4
 800095a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2200      	movs	r2, #0
 8000962:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	695b      	ldr	r3, [r3, #20]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d003      	beq.n	8000976 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	695b      	ldr	r3, [r3, #20]
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	f003 0304 	and.w	r3, r3, #4
 800097c:	2b00      	cmp	r3, #0
 800097e:	d013      	beq.n	80009a8 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000986:	2b00      	cmp	r3, #0
 8000988:	d00e      	beq.n	80009a8 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000998:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	2204      	movs	r2, #4
 80009a0:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f000 f853 	bl	8000a4e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	f003 0302 	and.w	r3, r3, #2
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d024      	beq.n	80009fc <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d01f      	beq.n	80009fc <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80009ca:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2202      	movs	r2, #2
 80009d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2201      	movs	r2, #1
 80009e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2200      	movs	r2, #0
 80009e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	691b      	ldr	r3, [r3, #16]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d003      	beq.n	80009fc <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	691b      	ldr	r3, [r3, #16]
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	f003 0310 	and.w	r3, r3, #16
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d01f      	beq.n	8000a46 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d01a      	beq.n	8000a46 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000a1e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2210      	movs	r2, #16
 8000a26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2201      	movs	r2, #1
 8000a34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f000 f80e 	bl	8000a62 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8000a46:	bf00      	nop
 8000a48:	3710      	adds	r7, #16
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	b083      	sub	sp, #12
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8000a62:	b480      	push	{r7}
 8000a64:	b083      	sub	sp, #12
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8000a6a:	bf00      	nop
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
	...

08000a78 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b087      	sub	sp, #28
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d101      	bne.n	8000a98 <HAL_DMA2D_ConfigLayer+0x20>
 8000a94:	2302      	movs	r3, #2
 8000a96:	e079      	b.n	8000b8c <HAL_DMA2D_ConfigLayer+0x114>
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2202      	movs	r2, #2
 8000aa4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	011b      	lsls	r3, r3, #4
 8000aac:	3318      	adds	r3, #24
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	685a      	ldr	r2, [r3, #4]
 8000ab8:	693b      	ldr	r3, [r7, #16]
 8000aba:	689b      	ldr	r3, [r3, #8]
 8000abc:	041b      	lsls	r3, r3, #16
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8000ac2:	4b35      	ldr	r3, [pc, #212]	; (8000b98 <HAL_DMA2D_ConfigLayer+0x120>)
 8000ac4:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	2b0a      	cmp	r3, #10
 8000acc:	d003      	beq.n	8000ad6 <HAL_DMA2D_ConfigLayer+0x5e>
 8000ace:	693b      	ldr	r3, [r7, #16]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	2b09      	cmp	r3, #9
 8000ad4:	d107      	bne.n	8000ae6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	68db      	ldr	r3, [r3, #12]
 8000ada:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8000ade:	697a      	ldr	r2, [r7, #20]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	617b      	str	r3, [r7, #20]
 8000ae4:	e005      	b.n	8000af2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	68db      	ldr	r3, [r3, #12]
 8000aea:	061b      	lsls	r3, r3, #24
 8000aec:	697a      	ldr	r2, [r7, #20]
 8000aee:	4313      	orrs	r3, r2
 8000af0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d120      	bne.n	8000b3a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	43db      	mvns	r3, r3
 8000b02:	ea02 0103 	and.w	r1, r2, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	697a      	ldr	r2, [r7, #20]
 8000b0c:	430a      	orrs	r2, r1
 8000b0e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	693a      	ldr	r2, [r7, #16]
 8000b16:	6812      	ldr	r2, [r2, #0]
 8000b18:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	2b0a      	cmp	r3, #10
 8000b20:	d003      	beq.n	8000b2a <HAL_DMA2D_ConfigLayer+0xb2>
 8000b22:	693b      	ldr	r3, [r7, #16]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	2b09      	cmp	r3, #9
 8000b28:	d127      	bne.n	8000b7a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	68da      	ldr	r2, [r3, #12]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8000b36:	629a      	str	r2, [r3, #40]	; 0x28
 8000b38:	e01f      	b.n	8000b7a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	69da      	ldr	r2, [r3, #28]
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	43db      	mvns	r3, r3
 8000b44:	ea02 0103 	and.w	r1, r2, r3
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	697a      	ldr	r2, [r7, #20]
 8000b4e:	430a      	orrs	r2, r1
 8000b50:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	6812      	ldr	r2, [r2, #0]
 8000b5a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	2b0a      	cmp	r3, #10
 8000b62:	d003      	beq.n	8000b6c <HAL_DMA2D_ConfigLayer+0xf4>
 8000b64:	693b      	ldr	r3, [r7, #16]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	2b09      	cmp	r3, #9
 8000b6a:	d106      	bne.n	8000b7a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	68da      	ldr	r2, [r3, #12]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8000b78:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2200      	movs	r2, #0
 8000b86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8000b8a:	2300      	movs	r3, #0
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	371c      	adds	r7, #28
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	ff03000f 	.word	0xff03000f

08000b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b089      	sub	sp, #36	; 0x24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000baa:	2300      	movs	r3, #0
 8000bac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
 8000bb6:	e177      	b.n	8000ea8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bb8:	2201      	movs	r2, #1
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	697a      	ldr	r2, [r7, #20]
 8000bc8:	4013      	ands	r3, r2
 8000bca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	f040 8166 	bne.w	8000ea2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d00b      	beq.n	8000bf6 <HAL_GPIO_Init+0x5a>
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	2b02      	cmp	r3, #2
 8000be4:	d007      	beq.n	8000bf6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bea:	2b11      	cmp	r3, #17
 8000bec:	d003      	beq.n	8000bf6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	2b12      	cmp	r3, #18
 8000bf4:	d130      	bne.n	8000c58 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	689b      	ldr	r3, [r3, #8]
 8000bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	2203      	movs	r2, #3
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	43db      	mvns	r3, r3
 8000c08:	69ba      	ldr	r2, [r7, #24]
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	68da      	ldr	r2, [r3, #12]
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	69ba      	ldr	r2, [r7, #24]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	69ba      	ldr	r2, [r7, #24]
 8000c24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	fa02 f303 	lsl.w	r3, r2, r3
 8000c34:	43db      	mvns	r3, r3
 8000c36:	69ba      	ldr	r2, [r7, #24]
 8000c38:	4013      	ands	r3, r2
 8000c3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	091b      	lsrs	r3, r3, #4
 8000c42:	f003 0201 	and.w	r2, r3, #1
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	69ba      	ldr	r2, [r7, #24]
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	69ba      	ldr	r2, [r7, #24]
 8000c56:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	2203      	movs	r2, #3
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	69ba      	ldr	r2, [r7, #24]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	689a      	ldr	r2, [r3, #8]
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	69ba      	ldr	r2, [r7, #24]
 8000c86:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	2b02      	cmp	r3, #2
 8000c8e:	d003      	beq.n	8000c98 <HAL_GPIO_Init+0xfc>
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	2b12      	cmp	r3, #18
 8000c96:	d123      	bne.n	8000ce0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	08da      	lsrs	r2, r3, #3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	3208      	adds	r2, #8
 8000ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	f003 0307 	and.w	r3, r3, #7
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	220f      	movs	r2, #15
 8000cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	69ba      	ldr	r2, [r7, #24]
 8000cb8:	4013      	ands	r3, r2
 8000cba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	691a      	ldr	r2, [r3, #16]
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	f003 0307 	and.w	r3, r3, #7
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	69ba      	ldr	r2, [r7, #24]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	08da      	lsrs	r2, r3, #3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	3208      	adds	r2, #8
 8000cda:	69b9      	ldr	r1, [r7, #24]
 8000cdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	2203      	movs	r2, #3
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	69ba      	ldr	r2, [r7, #24]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f003 0203 	and.w	r2, r3, #3
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	f000 80c0 	beq.w	8000ea2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	4b65      	ldr	r3, [pc, #404]	; (8000ebc <HAL_GPIO_Init+0x320>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2a:	4a64      	ldr	r2, [pc, #400]	; (8000ebc <HAL_GPIO_Init+0x320>)
 8000d2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d30:	6453      	str	r3, [r2, #68]	; 0x44
 8000d32:	4b62      	ldr	r3, [pc, #392]	; (8000ebc <HAL_GPIO_Init+0x320>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d3e:	4a60      	ldr	r2, [pc, #384]	; (8000ec0 <HAL_GPIO_Init+0x324>)
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	089b      	lsrs	r3, r3, #2
 8000d44:	3302      	adds	r3, #2
 8000d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	f003 0303 	and.w	r3, r3, #3
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	220f      	movs	r2, #15
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a57      	ldr	r2, [pc, #348]	; (8000ec4 <HAL_GPIO_Init+0x328>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d037      	beq.n	8000dda <HAL_GPIO_Init+0x23e>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a56      	ldr	r2, [pc, #344]	; (8000ec8 <HAL_GPIO_Init+0x32c>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d031      	beq.n	8000dd6 <HAL_GPIO_Init+0x23a>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a55      	ldr	r2, [pc, #340]	; (8000ecc <HAL_GPIO_Init+0x330>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d02b      	beq.n	8000dd2 <HAL_GPIO_Init+0x236>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a54      	ldr	r2, [pc, #336]	; (8000ed0 <HAL_GPIO_Init+0x334>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d025      	beq.n	8000dce <HAL_GPIO_Init+0x232>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a53      	ldr	r2, [pc, #332]	; (8000ed4 <HAL_GPIO_Init+0x338>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d01f      	beq.n	8000dca <HAL_GPIO_Init+0x22e>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a52      	ldr	r2, [pc, #328]	; (8000ed8 <HAL_GPIO_Init+0x33c>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d019      	beq.n	8000dc6 <HAL_GPIO_Init+0x22a>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a51      	ldr	r2, [pc, #324]	; (8000edc <HAL_GPIO_Init+0x340>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d013      	beq.n	8000dc2 <HAL_GPIO_Init+0x226>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a50      	ldr	r2, [pc, #320]	; (8000ee0 <HAL_GPIO_Init+0x344>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d00d      	beq.n	8000dbe <HAL_GPIO_Init+0x222>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a4f      	ldr	r2, [pc, #316]	; (8000ee4 <HAL_GPIO_Init+0x348>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d007      	beq.n	8000dba <HAL_GPIO_Init+0x21e>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a4e      	ldr	r2, [pc, #312]	; (8000ee8 <HAL_GPIO_Init+0x34c>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d101      	bne.n	8000db6 <HAL_GPIO_Init+0x21a>
 8000db2:	2309      	movs	r3, #9
 8000db4:	e012      	b.n	8000ddc <HAL_GPIO_Init+0x240>
 8000db6:	230a      	movs	r3, #10
 8000db8:	e010      	b.n	8000ddc <HAL_GPIO_Init+0x240>
 8000dba:	2308      	movs	r3, #8
 8000dbc:	e00e      	b.n	8000ddc <HAL_GPIO_Init+0x240>
 8000dbe:	2307      	movs	r3, #7
 8000dc0:	e00c      	b.n	8000ddc <HAL_GPIO_Init+0x240>
 8000dc2:	2306      	movs	r3, #6
 8000dc4:	e00a      	b.n	8000ddc <HAL_GPIO_Init+0x240>
 8000dc6:	2305      	movs	r3, #5
 8000dc8:	e008      	b.n	8000ddc <HAL_GPIO_Init+0x240>
 8000dca:	2304      	movs	r3, #4
 8000dcc:	e006      	b.n	8000ddc <HAL_GPIO_Init+0x240>
 8000dce:	2303      	movs	r3, #3
 8000dd0:	e004      	b.n	8000ddc <HAL_GPIO_Init+0x240>
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	e002      	b.n	8000ddc <HAL_GPIO_Init+0x240>
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e000      	b.n	8000ddc <HAL_GPIO_Init+0x240>
 8000dda:	2300      	movs	r3, #0
 8000ddc:	69fa      	ldr	r2, [r7, #28]
 8000dde:	f002 0203 	and.w	r2, r2, #3
 8000de2:	0092      	lsls	r2, r2, #2
 8000de4:	4093      	lsls	r3, r2
 8000de6:	69ba      	ldr	r2, [r7, #24]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000dec:	4934      	ldr	r1, [pc, #208]	; (8000ec0 <HAL_GPIO_Init+0x324>)
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	089b      	lsrs	r3, r3, #2
 8000df2:	3302      	adds	r3, #2
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dfa:	4b3c      	ldr	r3, [pc, #240]	; (8000eec <HAL_GPIO_Init+0x350>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	43db      	mvns	r3, r3
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	4013      	ands	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d003      	beq.n	8000e1e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e1e:	4a33      	ldr	r2, [pc, #204]	; (8000eec <HAL_GPIO_Init+0x350>)
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e24:	4b31      	ldr	r3, [pc, #196]	; (8000eec <HAL_GPIO_Init+0x350>)
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	4013      	ands	r3, r2
 8000e32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d003      	beq.n	8000e48 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e48:	4a28      	ldr	r2, [pc, #160]	; (8000eec <HAL_GPIO_Init+0x350>)
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e4e:	4b27      	ldr	r3, [pc, #156]	; (8000eec <HAL_GPIO_Init+0x350>)
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	43db      	mvns	r3, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d003      	beq.n	8000e72 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e72:	4a1e      	ldr	r2, [pc, #120]	; (8000eec <HAL_GPIO_Init+0x350>)
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e78:	4b1c      	ldr	r3, [pc, #112]	; (8000eec <HAL_GPIO_Init+0x350>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	43db      	mvns	r3, r3
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	4013      	ands	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d003      	beq.n	8000e9c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e9c:	4a13      	ldr	r2, [pc, #76]	; (8000eec <HAL_GPIO_Init+0x350>)
 8000e9e:	69bb      	ldr	r3, [r7, #24]
 8000ea0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	61fb      	str	r3, [r7, #28]
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	2b0f      	cmp	r3, #15
 8000eac:	f67f ae84 	bls.w	8000bb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000eb0:	bf00      	nop
 8000eb2:	3724      	adds	r7, #36	; 0x24
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40013800 	.word	0x40013800
 8000ec4:	40020000 	.word	0x40020000
 8000ec8:	40020400 	.word	0x40020400
 8000ecc:	40020800 	.word	0x40020800
 8000ed0:	40020c00 	.word	0x40020c00
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	40021400 	.word	0x40021400
 8000edc:	40021800 	.word	0x40021800
 8000ee0:	40021c00 	.word	0x40021c00
 8000ee4:	40022000 	.word	0x40022000
 8000ee8:	40022400 	.word	0x40022400
 8000eec:	40013c00 	.word	0x40013c00

08000ef0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	460b      	mov	r3, r1
 8000efa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	691a      	ldr	r2, [r3, #16]
 8000f00:	887b      	ldrh	r3, [r7, #2]
 8000f02:	4013      	ands	r3, r2
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d002      	beq.n	8000f0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	73fb      	strb	r3, [r7, #15]
 8000f0c:	e001      	b.n	8000f12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3714      	adds	r7, #20
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	460b      	mov	r3, r1
 8000f2a:	807b      	strh	r3, [r7, #2]
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f30:	787b      	ldrb	r3, [r7, #1]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d003      	beq.n	8000f3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f36:	887a      	ldrh	r2, [r7, #2]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f3c:	e003      	b.n	8000f46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f3e:	887b      	ldrh	r3, [r7, #2]
 8000f40:	041a      	lsls	r2, r3, #16
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	619a      	str	r2, [r3, #24]
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
	...

08000f54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000f5e:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f60:	695a      	ldr	r2, [r3, #20]
 8000f62:	88fb      	ldrh	r3, [r7, #6]
 8000f64:	4013      	ands	r3, r2
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d006      	beq.n	8000f78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f6a:	4a05      	ldr	r2, [pc, #20]	; (8000f80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f6c:	88fb      	ldrh	r3, [r7, #6]
 8000f6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f70:	88fb      	ldrh	r3, [r7, #6]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 f806 	bl	8000f84 <HAL_GPIO_EXTI_Callback>
  }
}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40013c00 	.word	0x40013c00

08000f84 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8000f9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f9c:	b08f      	sub	sp, #60	; 0x3c
 8000f9e:	af0a      	add	r7, sp, #40	; 0x28
 8000fa0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d101      	bne.n	8000fac <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e054      	b.n	8001056 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d106      	bne.n	8000fcc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f00b ff5c 	bl	800ce84 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2203      	movs	r2, #3
 8000fd0:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d102      	bne.n	8000fe6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f004 fe2e 	bl	8005c4c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	603b      	str	r3, [r7, #0]
 8000ff6:	687e      	ldr	r6, [r7, #4]
 8000ff8:	466d      	mov	r5, sp
 8000ffa:	f106 0410 	add.w	r4, r6, #16
 8000ffe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001000:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001002:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001004:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001006:	e894 0003 	ldmia.w	r4, {r0, r1}
 800100a:	e885 0003 	stmia.w	r5, {r0, r1}
 800100e:	1d33      	adds	r3, r6, #4
 8001010:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001012:	6838      	ldr	r0, [r7, #0]
 8001014:	f004 fda8 	bl	8005b68 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2101      	movs	r1, #1
 800101e:	4618      	mov	r0, r3
 8001020:	f004 fe25 	bl	8005c6e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	603b      	str	r3, [r7, #0]
 800102a:	687e      	ldr	r6, [r7, #4]
 800102c:	466d      	mov	r5, sp
 800102e:	f106 0410 	add.w	r4, r6, #16
 8001032:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001034:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001036:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001038:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800103a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800103e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001042:	1d33      	adds	r3, r6, #4
 8001044:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001046:	6838      	ldr	r0, [r7, #0]
 8001048:	f004 ff38 	bl	8005ebc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2201      	movs	r2, #1
 8001050:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3714      	adds	r7, #20
 800105a:	46bd      	mov	sp, r7
 800105c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800105e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800105e:	b590      	push	{r4, r7, lr}
 8001060:	b089      	sub	sp, #36	; 0x24
 8001062:	af04      	add	r7, sp, #16
 8001064:	6078      	str	r0, [r7, #4]
 8001066:	4608      	mov	r0, r1
 8001068:	4611      	mov	r1, r2
 800106a:	461a      	mov	r2, r3
 800106c:	4603      	mov	r3, r0
 800106e:	70fb      	strb	r3, [r7, #3]
 8001070:	460b      	mov	r3, r1
 8001072:	70bb      	strb	r3, [r7, #2]
 8001074:	4613      	mov	r3, r2
 8001076:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800107e:	2b01      	cmp	r3, #1
 8001080:	d101      	bne.n	8001086 <HAL_HCD_HC_Init+0x28>
 8001082:	2302      	movs	r3, #2
 8001084:	e07f      	b.n	8001186 <HAL_HCD_HC_Init+0x128>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2201      	movs	r2, #1
 800108a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800108e:	78fa      	ldrb	r2, [r7, #3]
 8001090:	6879      	ldr	r1, [r7, #4]
 8001092:	4613      	mov	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	00db      	lsls	r3, r3, #3
 800109a:	440b      	add	r3, r1
 800109c:	333d      	adds	r3, #61	; 0x3d
 800109e:	2200      	movs	r2, #0
 80010a0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80010a2:	78fa      	ldrb	r2, [r7, #3]
 80010a4:	6879      	ldr	r1, [r7, #4]
 80010a6:	4613      	mov	r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	4413      	add	r3, r2
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	440b      	add	r3, r1
 80010b0:	3338      	adds	r3, #56	; 0x38
 80010b2:	787a      	ldrb	r2, [r7, #1]
 80010b4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80010b6:	78fa      	ldrb	r2, [r7, #3]
 80010b8:	6879      	ldr	r1, [r7, #4]
 80010ba:	4613      	mov	r3, r2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	4413      	add	r3, r2
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	440b      	add	r3, r1
 80010c4:	3340      	adds	r3, #64	; 0x40
 80010c6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80010c8:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80010ca:	78fa      	ldrb	r2, [r7, #3]
 80010cc:	6879      	ldr	r1, [r7, #4]
 80010ce:	4613      	mov	r3, r2
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	4413      	add	r3, r2
 80010d4:	00db      	lsls	r3, r3, #3
 80010d6:	440b      	add	r3, r1
 80010d8:	3339      	adds	r3, #57	; 0x39
 80010da:	78fa      	ldrb	r2, [r7, #3]
 80010dc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80010de:	78fa      	ldrb	r2, [r7, #3]
 80010e0:	6879      	ldr	r1, [r7, #4]
 80010e2:	4613      	mov	r3, r2
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	4413      	add	r3, r2
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	440b      	add	r3, r1
 80010ec:	333f      	adds	r3, #63	; 0x3f
 80010ee:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80010f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80010f4:	78fa      	ldrb	r2, [r7, #3]
 80010f6:	78bb      	ldrb	r3, [r7, #2]
 80010f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010fc:	b2d8      	uxtb	r0, r3
 80010fe:	6879      	ldr	r1, [r7, #4]
 8001100:	4613      	mov	r3, r2
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	4413      	add	r3, r2
 8001106:	00db      	lsls	r3, r3, #3
 8001108:	440b      	add	r3, r1
 800110a:	333a      	adds	r3, #58	; 0x3a
 800110c:	4602      	mov	r2, r0
 800110e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001110:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001114:	2b00      	cmp	r3, #0
 8001116:	da0a      	bge.n	800112e <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001118:	78fa      	ldrb	r2, [r7, #3]
 800111a:	6879      	ldr	r1, [r7, #4]
 800111c:	4613      	mov	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	4413      	add	r3, r2
 8001122:	00db      	lsls	r3, r3, #3
 8001124:	440b      	add	r3, r1
 8001126:	333b      	adds	r3, #59	; 0x3b
 8001128:	2201      	movs	r2, #1
 800112a:	701a      	strb	r2, [r3, #0]
 800112c:	e009      	b.n	8001142 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800112e:	78fa      	ldrb	r2, [r7, #3]
 8001130:	6879      	ldr	r1, [r7, #4]
 8001132:	4613      	mov	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4413      	add	r3, r2
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	440b      	add	r3, r1
 800113c:	333b      	adds	r3, #59	; 0x3b
 800113e:	2200      	movs	r2, #0
 8001140:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001142:	78fa      	ldrb	r2, [r7, #3]
 8001144:	6879      	ldr	r1, [r7, #4]
 8001146:	4613      	mov	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	4413      	add	r3, r2
 800114c:	00db      	lsls	r3, r3, #3
 800114e:	440b      	add	r3, r1
 8001150:	333c      	adds	r3, #60	; 0x3c
 8001152:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001156:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6818      	ldr	r0, [r3, #0]
 800115c:	787c      	ldrb	r4, [r7, #1]
 800115e:	78ba      	ldrb	r2, [r7, #2]
 8001160:	78f9      	ldrb	r1, [r7, #3]
 8001162:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001164:	9302      	str	r3, [sp, #8]
 8001166:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800116a:	9301      	str	r3, [sp, #4]
 800116c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	4623      	mov	r3, r4
 8001174:	f005 f824 	bl	80061c0 <USB_HC_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001184:	7bfb      	ldrb	r3, [r7, #15]
}
 8001186:	4618      	mov	r0, r3
 8001188:	3714      	adds	r7, #20
 800118a:	46bd      	mov	sp, r7
 800118c:	bd90      	pop	{r4, r7, pc}

0800118e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b084      	sub	sp, #16
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
 8001196:	460b      	mov	r3, r1
 8001198:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800119a:	2300      	movs	r3, #0
 800119c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d101      	bne.n	80011ac <HAL_HCD_HC_Halt+0x1e>
 80011a8:	2302      	movs	r3, #2
 80011aa:	e00f      	b.n	80011cc <HAL_HCD_HC_Halt+0x3e>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2201      	movs	r2, #1
 80011b0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	78fa      	ldrb	r2, [r7, #3]
 80011ba:	4611      	mov	r1, r2
 80011bc:	4618      	mov	r0, r3
 80011be:	f005 fa5e 	bl	800667e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	4608      	mov	r0, r1
 80011de:	4611      	mov	r1, r2
 80011e0:	461a      	mov	r2, r3
 80011e2:	4603      	mov	r3, r0
 80011e4:	70fb      	strb	r3, [r7, #3]
 80011e6:	460b      	mov	r3, r1
 80011e8:	70bb      	strb	r3, [r7, #2]
 80011ea:	4613      	mov	r3, r2
 80011ec:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80011ee:	78fa      	ldrb	r2, [r7, #3]
 80011f0:	6879      	ldr	r1, [r7, #4]
 80011f2:	4613      	mov	r3, r2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	4413      	add	r3, r2
 80011f8:	00db      	lsls	r3, r3, #3
 80011fa:	440b      	add	r3, r1
 80011fc:	333b      	adds	r3, #59	; 0x3b
 80011fe:	78ba      	ldrb	r2, [r7, #2]
 8001200:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001202:	78fa      	ldrb	r2, [r7, #3]
 8001204:	6879      	ldr	r1, [r7, #4]
 8001206:	4613      	mov	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4413      	add	r3, r2
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	440b      	add	r3, r1
 8001210:	333f      	adds	r3, #63	; 0x3f
 8001212:	787a      	ldrb	r2, [r7, #1]
 8001214:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001216:	7c3b      	ldrb	r3, [r7, #16]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d114      	bne.n	8001246 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800121c:	78fa      	ldrb	r2, [r7, #3]
 800121e:	6879      	ldr	r1, [r7, #4]
 8001220:	4613      	mov	r3, r2
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	4413      	add	r3, r2
 8001226:	00db      	lsls	r3, r3, #3
 8001228:	440b      	add	r3, r1
 800122a:	3342      	adds	r3, #66	; 0x42
 800122c:	2203      	movs	r2, #3
 800122e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001230:	78fa      	ldrb	r2, [r7, #3]
 8001232:	6879      	ldr	r1, [r7, #4]
 8001234:	4613      	mov	r3, r2
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	4413      	add	r3, r2
 800123a:	00db      	lsls	r3, r3, #3
 800123c:	440b      	add	r3, r1
 800123e:	333d      	adds	r3, #61	; 0x3d
 8001240:	7f3a      	ldrb	r2, [r7, #28]
 8001242:	701a      	strb	r2, [r3, #0]
 8001244:	e009      	b.n	800125a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001246:	78fa      	ldrb	r2, [r7, #3]
 8001248:	6879      	ldr	r1, [r7, #4]
 800124a:	4613      	mov	r3, r2
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	4413      	add	r3, r2
 8001250:	00db      	lsls	r3, r3, #3
 8001252:	440b      	add	r3, r1
 8001254:	3342      	adds	r3, #66	; 0x42
 8001256:	2202      	movs	r2, #2
 8001258:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800125a:	787b      	ldrb	r3, [r7, #1]
 800125c:	2b03      	cmp	r3, #3
 800125e:	f200 80d6 	bhi.w	800140e <HAL_HCD_HC_SubmitRequest+0x23a>
 8001262:	a201      	add	r2, pc, #4	; (adr r2, 8001268 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001268:	08001279 	.word	0x08001279
 800126c:	080013f9 	.word	0x080013f9
 8001270:	080012e5 	.word	0x080012e5
 8001274:	0800136f 	.word	0x0800136f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001278:	7c3b      	ldrb	r3, [r7, #16]
 800127a:	2b01      	cmp	r3, #1
 800127c:	f040 80c9 	bne.w	8001412 <HAL_HCD_HC_SubmitRequest+0x23e>
 8001280:	78bb      	ldrb	r3, [r7, #2]
 8001282:	2b00      	cmp	r3, #0
 8001284:	f040 80c5 	bne.w	8001412 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8001288:	8b3b      	ldrh	r3, [r7, #24]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d109      	bne.n	80012a2 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800128e:	78fa      	ldrb	r2, [r7, #3]
 8001290:	6879      	ldr	r1, [r7, #4]
 8001292:	4613      	mov	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4413      	add	r3, r2
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	440b      	add	r3, r1
 800129c:	3351      	adds	r3, #81	; 0x51
 800129e:	2201      	movs	r2, #1
 80012a0:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80012a2:	78fa      	ldrb	r2, [r7, #3]
 80012a4:	6879      	ldr	r1, [r7, #4]
 80012a6:	4613      	mov	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4413      	add	r3, r2
 80012ac:	00db      	lsls	r3, r3, #3
 80012ae:	440b      	add	r3, r1
 80012b0:	3351      	adds	r3, #81	; 0x51
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d10a      	bne.n	80012ce <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80012b8:	78fa      	ldrb	r2, [r7, #3]
 80012ba:	6879      	ldr	r1, [r7, #4]
 80012bc:	4613      	mov	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	4413      	add	r3, r2
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	440b      	add	r3, r1
 80012c6:	3342      	adds	r3, #66	; 0x42
 80012c8:	2200      	movs	r2, #0
 80012ca:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80012cc:	e0a1      	b.n	8001412 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80012ce:	78fa      	ldrb	r2, [r7, #3]
 80012d0:	6879      	ldr	r1, [r7, #4]
 80012d2:	4613      	mov	r3, r2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	4413      	add	r3, r2
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	440b      	add	r3, r1
 80012dc:	3342      	adds	r3, #66	; 0x42
 80012de:	2202      	movs	r2, #2
 80012e0:	701a      	strb	r2, [r3, #0]
      break;
 80012e2:	e096      	b.n	8001412 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80012e4:	78bb      	ldrb	r3, [r7, #2]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d120      	bne.n	800132c <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80012ea:	78fa      	ldrb	r2, [r7, #3]
 80012ec:	6879      	ldr	r1, [r7, #4]
 80012ee:	4613      	mov	r3, r2
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	4413      	add	r3, r2
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	440b      	add	r3, r1
 80012f8:	3351      	adds	r3, #81	; 0x51
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d10a      	bne.n	8001316 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001300:	78fa      	ldrb	r2, [r7, #3]
 8001302:	6879      	ldr	r1, [r7, #4]
 8001304:	4613      	mov	r3, r2
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4413      	add	r3, r2
 800130a:	00db      	lsls	r3, r3, #3
 800130c:	440b      	add	r3, r1
 800130e:	3342      	adds	r3, #66	; 0x42
 8001310:	2200      	movs	r2, #0
 8001312:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001314:	e07e      	b.n	8001414 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001316:	78fa      	ldrb	r2, [r7, #3]
 8001318:	6879      	ldr	r1, [r7, #4]
 800131a:	4613      	mov	r3, r2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	4413      	add	r3, r2
 8001320:	00db      	lsls	r3, r3, #3
 8001322:	440b      	add	r3, r1
 8001324:	3342      	adds	r3, #66	; 0x42
 8001326:	2202      	movs	r2, #2
 8001328:	701a      	strb	r2, [r3, #0]
      break;
 800132a:	e073      	b.n	8001414 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800132c:	78fa      	ldrb	r2, [r7, #3]
 800132e:	6879      	ldr	r1, [r7, #4]
 8001330:	4613      	mov	r3, r2
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	4413      	add	r3, r2
 8001336:	00db      	lsls	r3, r3, #3
 8001338:	440b      	add	r3, r1
 800133a:	3350      	adds	r3, #80	; 0x50
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d10a      	bne.n	8001358 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001342:	78fa      	ldrb	r2, [r7, #3]
 8001344:	6879      	ldr	r1, [r7, #4]
 8001346:	4613      	mov	r3, r2
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	4413      	add	r3, r2
 800134c:	00db      	lsls	r3, r3, #3
 800134e:	440b      	add	r3, r1
 8001350:	3342      	adds	r3, #66	; 0x42
 8001352:	2200      	movs	r2, #0
 8001354:	701a      	strb	r2, [r3, #0]
      break;
 8001356:	e05d      	b.n	8001414 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001358:	78fa      	ldrb	r2, [r7, #3]
 800135a:	6879      	ldr	r1, [r7, #4]
 800135c:	4613      	mov	r3, r2
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	4413      	add	r3, r2
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	440b      	add	r3, r1
 8001366:	3342      	adds	r3, #66	; 0x42
 8001368:	2202      	movs	r2, #2
 800136a:	701a      	strb	r2, [r3, #0]
      break;
 800136c:	e052      	b.n	8001414 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800136e:	78bb      	ldrb	r3, [r7, #2]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d120      	bne.n	80013b6 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001374:	78fa      	ldrb	r2, [r7, #3]
 8001376:	6879      	ldr	r1, [r7, #4]
 8001378:	4613      	mov	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4413      	add	r3, r2
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	440b      	add	r3, r1
 8001382:	3351      	adds	r3, #81	; 0x51
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d10a      	bne.n	80013a0 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800138a:	78fa      	ldrb	r2, [r7, #3]
 800138c:	6879      	ldr	r1, [r7, #4]
 800138e:	4613      	mov	r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	4413      	add	r3, r2
 8001394:	00db      	lsls	r3, r3, #3
 8001396:	440b      	add	r3, r1
 8001398:	3342      	adds	r3, #66	; 0x42
 800139a:	2200      	movs	r2, #0
 800139c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800139e:	e039      	b.n	8001414 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80013a0:	78fa      	ldrb	r2, [r7, #3]
 80013a2:	6879      	ldr	r1, [r7, #4]
 80013a4:	4613      	mov	r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	4413      	add	r3, r2
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	440b      	add	r3, r1
 80013ae:	3342      	adds	r3, #66	; 0x42
 80013b0:	2202      	movs	r2, #2
 80013b2:	701a      	strb	r2, [r3, #0]
      break;
 80013b4:	e02e      	b.n	8001414 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80013b6:	78fa      	ldrb	r2, [r7, #3]
 80013b8:	6879      	ldr	r1, [r7, #4]
 80013ba:	4613      	mov	r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	4413      	add	r3, r2
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	440b      	add	r3, r1
 80013c4:	3350      	adds	r3, #80	; 0x50
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d10a      	bne.n	80013e2 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80013cc:	78fa      	ldrb	r2, [r7, #3]
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	4613      	mov	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	4413      	add	r3, r2
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	440b      	add	r3, r1
 80013da:	3342      	adds	r3, #66	; 0x42
 80013dc:	2200      	movs	r2, #0
 80013de:	701a      	strb	r2, [r3, #0]
      break;
 80013e0:	e018      	b.n	8001414 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80013e2:	78fa      	ldrb	r2, [r7, #3]
 80013e4:	6879      	ldr	r1, [r7, #4]
 80013e6:	4613      	mov	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	4413      	add	r3, r2
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	440b      	add	r3, r1
 80013f0:	3342      	adds	r3, #66	; 0x42
 80013f2:	2202      	movs	r2, #2
 80013f4:	701a      	strb	r2, [r3, #0]
      break;
 80013f6:	e00d      	b.n	8001414 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80013f8:	78fa      	ldrb	r2, [r7, #3]
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	4613      	mov	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	440b      	add	r3, r1
 8001406:	3342      	adds	r3, #66	; 0x42
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]
      break;
 800140c:	e002      	b.n	8001414 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 800140e:	bf00      	nop
 8001410:	e000      	b.n	8001414 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8001412:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001414:	78fa      	ldrb	r2, [r7, #3]
 8001416:	6879      	ldr	r1, [r7, #4]
 8001418:	4613      	mov	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	4413      	add	r3, r2
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	440b      	add	r3, r1
 8001422:	3344      	adds	r3, #68	; 0x44
 8001424:	697a      	ldr	r2, [r7, #20]
 8001426:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001428:	78fa      	ldrb	r2, [r7, #3]
 800142a:	8b39      	ldrh	r1, [r7, #24]
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	4613      	mov	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4413      	add	r3, r2
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	4403      	add	r3, r0
 8001438:	3348      	adds	r3, #72	; 0x48
 800143a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800143c:	78fa      	ldrb	r2, [r7, #3]
 800143e:	6879      	ldr	r1, [r7, #4]
 8001440:	4613      	mov	r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	4413      	add	r3, r2
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	440b      	add	r3, r1
 800144a:	335c      	adds	r3, #92	; 0x5c
 800144c:	2200      	movs	r2, #0
 800144e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001450:	78fa      	ldrb	r2, [r7, #3]
 8001452:	6879      	ldr	r1, [r7, #4]
 8001454:	4613      	mov	r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	4413      	add	r3, r2
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	440b      	add	r3, r1
 800145e:	334c      	adds	r3, #76	; 0x4c
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001464:	78fa      	ldrb	r2, [r7, #3]
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	4613      	mov	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	440b      	add	r3, r1
 8001472:	3339      	adds	r3, #57	; 0x39
 8001474:	78fa      	ldrb	r2, [r7, #3]
 8001476:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001478:	78fa      	ldrb	r2, [r7, #3]
 800147a:	6879      	ldr	r1, [r7, #4]
 800147c:	4613      	mov	r3, r2
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	4413      	add	r3, r2
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	440b      	add	r3, r1
 8001486:	335d      	adds	r3, #93	; 0x5d
 8001488:	2200      	movs	r2, #0
 800148a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6818      	ldr	r0, [r3, #0]
 8001490:	78fa      	ldrb	r2, [r7, #3]
 8001492:	4613      	mov	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4413      	add	r3, r2
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	3338      	adds	r3, #56	; 0x38
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	18d1      	adds	r1, r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	461a      	mov	r2, r3
 80014a8:	f004 ff94 	bl	80063d4 <USB_HC_StartXfer>
 80014ac:	4603      	mov	r3, r0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop

080014b8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f004 fcb1 	bl	8005e36 <USB_GetMode>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	f040 80ef 	bne.w	80016ba <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f004 fc95 	bl	8005e10 <USB_ReadInterrupts>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 80e5 	beq.w	80016b8 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f004 fc8c 	bl	8005e10 <USB_ReadInterrupts>
 80014f8:	4603      	mov	r3, r0
 80014fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001502:	d104      	bne.n	800150e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800150c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4618      	mov	r0, r3
 8001514:	f004 fc7c 	bl	8005e10 <USB_ReadInterrupts>
 8001518:	4603      	mov	r3, r0
 800151a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800151e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001522:	d104      	bne.n	800152e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800152c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4618      	mov	r0, r3
 8001534:	f004 fc6c 	bl	8005e10 <USB_ReadInterrupts>
 8001538:	4603      	mov	r3, r0
 800153a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800153e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001542:	d104      	bne.n	800154e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800154c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f004 fc5c 	bl	8005e10 <USB_ReadInterrupts>
 8001558:	4603      	mov	r3, r0
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b02      	cmp	r3, #2
 8001560:	d103      	bne.n	800156a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2202      	movs	r2, #2
 8001568:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f004 fc4e 	bl	8005e10 <USB_ReadInterrupts>
 8001574:	4603      	mov	r3, r0
 8001576:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800157a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800157e:	d115      	bne.n	80015ac <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001588:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	2b00      	cmp	r3, #0
 8001598:	d108      	bne.n	80015ac <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f00b fcec 	bl	800cf78 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2101      	movs	r1, #1
 80015a6:	4618      	mov	r0, r3
 80015a8:	f004 fd44 	bl	8006034 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f004 fc2d 	bl	8005e10 <USB_ReadInterrupts>
 80015b6:	4603      	mov	r3, r0
 80015b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015c0:	d102      	bne.n	80015c8 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f001 f966 	bl	8002894 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f004 fc1f 	bl	8005e10 <USB_ReadInterrupts>
 80015d2:	4603      	mov	r3, r0
 80015d4:	f003 0308 	and.w	r3, r3, #8
 80015d8:	2b08      	cmp	r3, #8
 80015da:	d106      	bne.n	80015ea <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f00b fcaf 	bl	800cf40 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2208      	movs	r2, #8
 80015e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f004 fc0e 	bl	8005e10 <USB_ReadInterrupts>
 80015f4:	4603      	mov	r3, r0
 80015f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80015fe:	d138      	bne.n	8001672 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	f005 f829 	bl	800665c <USB_HC_ReadInterrupt>
 800160a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]
 8001610:	e025      	b.n	800165e <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	f003 030f 	and.w	r3, r3, #15
 8001618:	68ba      	ldr	r2, [r7, #8]
 800161a:	fa22 f303 	lsr.w	r3, r2, r3
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	2b00      	cmp	r3, #0
 8001624:	d018      	beq.n	8001658 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	015a      	lsls	r2, r3, #5
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	4413      	add	r3, r2
 800162e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001638:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800163c:	d106      	bne.n	800164c <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	b2db      	uxtb	r3, r3
 8001642:	4619      	mov	r1, r3
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f000 f8cf 	bl	80017e8 <HCD_HC_IN_IRQHandler>
 800164a:	e005      	b.n	8001658 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	b2db      	uxtb	r3, r3
 8001650:	4619      	mov	r1, r3
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f000 fcfd 	bl	8002052 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	3301      	adds	r3, #1
 800165c:	617b      	str	r3, [r7, #20]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	697a      	ldr	r2, [r7, #20]
 8001664:	429a      	cmp	r2, r3
 8001666:	d3d4      	bcc.n	8001612 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001670:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f004 fbca 	bl	8005e10 <USB_ReadInterrupts>
 800167c:	4603      	mov	r3, r0
 800167e:	f003 0310 	and.w	r3, r3, #16
 8001682:	2b10      	cmp	r3, #16
 8001684:	d101      	bne.n	800168a <HAL_HCD_IRQHandler+0x1d2>
 8001686:	2301      	movs	r3, #1
 8001688:	e000      	b.n	800168c <HAL_HCD_IRQHandler+0x1d4>
 800168a:	2300      	movs	r3, #0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d014      	beq.n	80016ba <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	699a      	ldr	r2, [r3, #24]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f022 0210 	bic.w	r2, r2, #16
 800169e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f001 f84b 	bl	800273c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	699a      	ldr	r2, [r3, #24]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f042 0210 	orr.w	r2, r2, #16
 80016b4:	619a      	str	r2, [r3, #24]
 80016b6:	e000      	b.n	80016ba <HAL_HCD_IRQHandler+0x202>
      return;
 80016b8:	bf00      	nop
    }
  }
}
 80016ba:	3718      	adds	r7, #24
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d101      	bne.n	80016d6 <HAL_HCD_Start+0x16>
 80016d2:	2302      	movs	r3, #2
 80016d4:	e013      	b.n	80016fe <HAL_HCD_Start+0x3e>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2201      	movs	r2, #1
 80016da:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f004 faa1 	bl	8005c2a <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2101      	movs	r1, #1
 80016ee:	4618      	mov	r0, r3
 80016f0:	f004 fd04 	bl	80060fc <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b082      	sub	sp, #8
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001714:	2b01      	cmp	r3, #1
 8001716:	d101      	bne.n	800171c <HAL_HCD_Stop+0x16>
 8001718:	2302      	movs	r3, #2
 800171a:	e00d      	b.n	8001738 <HAL_HCD_Stop+0x32>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2201      	movs	r2, #1
 8001720:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f005 f8e3 	bl	80068f4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001736:	2300      	movs	r3, #0
}
 8001738:	4618      	mov	r0, r3
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4618      	mov	r0, r3
 800174e:	f004 fcab 	bl	80060a8 <USB_ResetPort>
 8001752:	4603      	mov	r3, r0
}
 8001754:	4618      	mov	r0, r3
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	460b      	mov	r3, r1
 8001766:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001768:	78fa      	ldrb	r2, [r7, #3]
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	4613      	mov	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4413      	add	r3, r2
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	440b      	add	r3, r1
 8001776:	335c      	adds	r3, #92	; 0x5c
 8001778:	781b      	ldrb	r3, [r3, #0]
}
 800177a:	4618      	mov	r0, r3
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001786:	b480      	push	{r7}
 8001788:	b083      	sub	sp, #12
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
 800178e:	460b      	mov	r3, r1
 8001790:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001792:	78fa      	ldrb	r2, [r7, #3]
 8001794:	6879      	ldr	r1, [r7, #4]
 8001796:	4613      	mov	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4413      	add	r3, r2
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	440b      	add	r3, r1
 80017a0:	334c      	adds	r3, #76	; 0x4c
 80017a2:	681b      	ldr	r3, [r3, #0]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f004 fced 	bl	800619c <USB_GetCurrentFrame>
 80017c2:	4603      	mov	r3, r0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f004 fcc8 	bl	800616e <USB_GetHostSpeed>
 80017de:	4603      	mov	r3, r0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	460b      	mov	r3, r1
 80017f2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80017fe:	78fb      	ldrb	r3, [r7, #3]
 8001800:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	015a      	lsls	r2, r3, #5
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	4413      	add	r3, r2
 800180a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f003 0304 	and.w	r3, r3, #4
 8001814:	2b04      	cmp	r3, #4
 8001816:	d119      	bne.n	800184c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	015a      	lsls	r2, r3, #5
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	4413      	add	r3, r2
 8001820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001824:	461a      	mov	r2, r3
 8001826:	2304      	movs	r3, #4
 8001828:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	015a      	lsls	r2, r3, #5
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	4413      	add	r3, r2
 8001832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	68fa      	ldr	r2, [r7, #12]
 800183a:	0151      	lsls	r1, r2, #5
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	440a      	add	r2, r1
 8001840:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001844:	f043 0302 	orr.w	r3, r3, #2
 8001848:	60d3      	str	r3, [r2, #12]
 800184a:	e0ce      	b.n	80019ea <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	015a      	lsls	r2, r3, #5
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	4413      	add	r3, r2
 8001854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001862:	d12c      	bne.n	80018be <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	015a      	lsls	r2, r3, #5
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	4413      	add	r3, r2
 800186c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001870:	461a      	mov	r2, r3
 8001872:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001876:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001878:	6879      	ldr	r1, [r7, #4]
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	4613      	mov	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4413      	add	r3, r2
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	440b      	add	r3, r1
 8001886:	335d      	adds	r3, #93	; 0x5d
 8001888:	2207      	movs	r2, #7
 800188a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	015a      	lsls	r2, r3, #5
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	4413      	add	r3, r2
 8001894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	68fa      	ldr	r2, [r7, #12]
 800189c:	0151      	lsls	r1, r2, #5
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	440a      	add	r2, r1
 80018a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80018a6:	f043 0302 	orr.w	r3, r3, #2
 80018aa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	68fa      	ldr	r2, [r7, #12]
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	4611      	mov	r1, r2
 80018b6:	4618      	mov	r0, r3
 80018b8:	f004 fee1 	bl	800667e <USB_HC_Halt>
 80018bc:	e095      	b.n	80019ea <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	015a      	lsls	r2, r3, #5
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	4413      	add	r3, r2
 80018c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f003 0320 	and.w	r3, r3, #32
 80018d0:	2b20      	cmp	r3, #32
 80018d2:	d109      	bne.n	80018e8 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	015a      	lsls	r2, r3, #5
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	4413      	add	r3, r2
 80018dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018e0:	461a      	mov	r2, r3
 80018e2:	2320      	movs	r3, #32
 80018e4:	6093      	str	r3, [r2, #8]
 80018e6:	e080      	b.n	80019ea <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	015a      	lsls	r2, r3, #5
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	4413      	add	r3, r2
 80018f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f003 0308 	and.w	r3, r3, #8
 80018fa:	2b08      	cmp	r3, #8
 80018fc:	d134      	bne.n	8001968 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	015a      	lsls	r2, r3, #5
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	4413      	add	r3, r2
 8001906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	68fa      	ldr	r2, [r7, #12]
 800190e:	0151      	lsls	r1, r2, #5
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	440a      	add	r2, r1
 8001914:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001918:	f043 0302 	orr.w	r3, r3, #2
 800191c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	68fa      	ldr	r2, [r7, #12]
 8001922:	4613      	mov	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	440b      	add	r3, r1
 800192c:	335d      	adds	r3, #93	; 0x5d
 800192e:	2205      	movs	r2, #5
 8001930:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	015a      	lsls	r2, r3, #5
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	4413      	add	r3, r2
 800193a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800193e:	461a      	mov	r2, r3
 8001940:	2310      	movs	r3, #16
 8001942:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	015a      	lsls	r2, r3, #5
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	4413      	add	r3, r2
 800194c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001950:	461a      	mov	r2, r3
 8001952:	2308      	movs	r3, #8
 8001954:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	b2d2      	uxtb	r2, r2
 800195e:	4611      	mov	r1, r2
 8001960:	4618      	mov	r0, r3
 8001962:	f004 fe8c 	bl	800667e <USB_HC_Halt>
 8001966:	e040      	b.n	80019ea <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	015a      	lsls	r2, r3, #5
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	4413      	add	r3, r2
 8001970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800197a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800197e:	d134      	bne.n	80019ea <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	015a      	lsls	r2, r3, #5
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	4413      	add	r3, r2
 8001988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	68fa      	ldr	r2, [r7, #12]
 8001990:	0151      	lsls	r1, r2, #5
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	440a      	add	r2, r1
 8001996:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800199a:	f043 0302 	orr.w	r3, r3, #2
 800199e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	68fa      	ldr	r2, [r7, #12]
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	4611      	mov	r1, r2
 80019aa:	4618      	mov	r0, r3
 80019ac:	f004 fe67 	bl	800667e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	015a      	lsls	r2, r3, #5
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	4413      	add	r3, r2
 80019b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019bc:	461a      	mov	r2, r3
 80019be:	2310      	movs	r3, #16
 80019c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	68fa      	ldr	r2, [r7, #12]
 80019c6:	4613      	mov	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	440b      	add	r3, r1
 80019d0:	335d      	adds	r3, #93	; 0x5d
 80019d2:	2208      	movs	r2, #8
 80019d4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	015a      	lsls	r2, r3, #5
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	4413      	add	r3, r2
 80019de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019e2:	461a      	mov	r2, r3
 80019e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019e8:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	015a      	lsls	r2, r3, #5
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	4413      	add	r3, r2
 80019f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a00:	d122      	bne.n	8001a48 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	015a      	lsls	r2, r3, #5
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	4413      	add	r3, r2
 8001a0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	68fa      	ldr	r2, [r7, #12]
 8001a12:	0151      	lsls	r1, r2, #5
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	440a      	add	r2, r1
 8001a18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a1c:	f043 0302 	orr.w	r3, r3, #2
 8001a20:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	b2d2      	uxtb	r2, r2
 8001a2a:	4611      	mov	r1, r2
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f004 fe26 	bl	800667e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	015a      	lsls	r2, r3, #5
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	4413      	add	r3, r2
 8001a3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a3e:	461a      	mov	r2, r3
 8001a40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a44:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001a46:	e300      	b.n	800204a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	015a      	lsls	r2, r3, #5
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	4413      	add	r3, r2
 8001a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	f040 80fd 	bne.w	8001c5a <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d01b      	beq.n	8001aa0 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001a68:	6879      	ldr	r1, [r7, #4]
 8001a6a:	68fa      	ldr	r2, [r7, #12]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	4413      	add	r3, r2
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	440b      	add	r3, r1
 8001a76:	3348      	adds	r3, #72	; 0x48
 8001a78:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	0159      	lsls	r1, r3, #5
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	440b      	add	r3, r1
 8001a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001a8c:	1ad1      	subs	r1, r2, r3
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	68fa      	ldr	r2, [r7, #12]
 8001a92:	4613      	mov	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	4403      	add	r3, r0
 8001a9c:	334c      	adds	r3, #76	; 0x4c
 8001a9e:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001aa0:	6879      	ldr	r1, [r7, #4]
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4413      	add	r3, r2
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	440b      	add	r3, r1
 8001aae:	335d      	adds	r3, #93	; 0x5d
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001ab4:	6879      	ldr	r1, [r7, #4]
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	440b      	add	r3, r1
 8001ac2:	3358      	adds	r3, #88	; 0x58
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	015a      	lsls	r2, r3, #5
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	4413      	add	r3, r2
 8001ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ada:	6879      	ldr	r1, [r7, #4]
 8001adc:	68fa      	ldr	r2, [r7, #12]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	4413      	add	r3, r2
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	440b      	add	r3, r1
 8001ae8:	333f      	adds	r3, #63	; 0x3f
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d00a      	beq.n	8001b06 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001af0:	6879      	ldr	r1, [r7, #4]
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	4613      	mov	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	4413      	add	r3, r2
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	440b      	add	r3, r1
 8001afe:	333f      	adds	r3, #63	; 0x3f
 8001b00:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d121      	bne.n	8001b4a <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	015a      	lsls	r2, r3, #5
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	0151      	lsls	r1, r2, #5
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	440a      	add	r2, r1
 8001b1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b20:	f043 0302 	orr.w	r3, r3, #2
 8001b24:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	b2d2      	uxtb	r2, r2
 8001b2e:	4611      	mov	r1, r2
 8001b30:	4618      	mov	r0, r3
 8001b32:	f004 fda4 	bl	800667e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	015a      	lsls	r2, r3, #5
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b42:	461a      	mov	r2, r3
 8001b44:	2310      	movs	r3, #16
 8001b46:	6093      	str	r3, [r2, #8]
 8001b48:	e070      	b.n	8001c2c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001b4a:	6879      	ldr	r1, [r7, #4]
 8001b4c:	68fa      	ldr	r2, [r7, #12]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	4413      	add	r3, r2
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	440b      	add	r3, r1
 8001b58:	333f      	adds	r3, #63	; 0x3f
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b03      	cmp	r3, #3
 8001b5e:	d12a      	bne.n	8001bb6 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	015a      	lsls	r2, r3, #5
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	4413      	add	r3, r2
 8001b68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	0151      	lsls	r1, r2, #5
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	440a      	add	r2, r1
 8001b76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b7a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001b7e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001b80:	6879      	ldr	r1, [r7, #4]
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	4613      	mov	r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	440b      	add	r3, r1
 8001b8e:	335c      	adds	r3, #92	; 0x5c
 8001b90:	2201      	movs	r2, #1
 8001b92:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	b2d8      	uxtb	r0, r3
 8001b98:	6879      	ldr	r1, [r7, #4]
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	4413      	add	r3, r2
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	440b      	add	r3, r1
 8001ba6:	335c      	adds	r3, #92	; 0x5c
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	461a      	mov	r2, r3
 8001bac:	4601      	mov	r1, r0
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f00b f9f0 	bl	800cf94 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001bb4:	e03a      	b.n	8001c2c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	4413      	add	r3, r2
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	440b      	add	r3, r1
 8001bc4:	333f      	adds	r3, #63	; 0x3f
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d12f      	bne.n	8001c2c <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001bcc:	6879      	ldr	r1, [r7, #4]
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4413      	add	r3, r2
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	440b      	add	r3, r1
 8001bda:	335c      	adds	r3, #92	; 0x5c
 8001bdc:	2201      	movs	r2, #1
 8001bde:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001be0:	6879      	ldr	r1, [r7, #4]
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	4613      	mov	r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	4413      	add	r3, r2
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	440b      	add	r3, r1
 8001bee:	3350      	adds	r3, #80	; 0x50
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	f083 0301 	eor.w	r3, r3, #1
 8001bf6:	b2d8      	uxtb	r0, r3
 8001bf8:	6879      	ldr	r1, [r7, #4]
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	440b      	add	r3, r1
 8001c06:	3350      	adds	r3, #80	; 0x50
 8001c08:	4602      	mov	r2, r0
 8001c0a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	b2d8      	uxtb	r0, r3
 8001c10:	6879      	ldr	r1, [r7, #4]
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	4613      	mov	r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4413      	add	r3, r2
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	440b      	add	r3, r1
 8001c1e:	335c      	adds	r3, #92	; 0x5c
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	461a      	mov	r2, r3
 8001c24:	4601      	mov	r1, r0
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f00b f9b4 	bl	800cf94 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001c2c:	6879      	ldr	r1, [r7, #4]
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	4613      	mov	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	4413      	add	r3, r2
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	440b      	add	r3, r1
 8001c3a:	3350      	adds	r3, #80	; 0x50
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	f083 0301 	eor.w	r3, r3, #1
 8001c42:	b2d8      	uxtb	r0, r3
 8001c44:	6879      	ldr	r1, [r7, #4]
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	4413      	add	r3, r2
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	440b      	add	r3, r1
 8001c52:	3350      	adds	r3, #80	; 0x50
 8001c54:	4602      	mov	r2, r0
 8001c56:	701a      	strb	r2, [r3, #0]
}
 8001c58:	e1f7      	b.n	800204a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	015a      	lsls	r2, r3, #5
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	4413      	add	r3, r2
 8001c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	f040 811a 	bne.w	8001ea6 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	015a      	lsls	r2, r3, #5
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	4413      	add	r3, r2
 8001c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	0151      	lsls	r1, r2, #5
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	440a      	add	r2, r1
 8001c88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c8c:	f023 0302 	bic.w	r3, r3, #2
 8001c90:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001c92:	6879      	ldr	r1, [r7, #4]
 8001c94:	68fa      	ldr	r2, [r7, #12]
 8001c96:	4613      	mov	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	4413      	add	r3, r2
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	440b      	add	r3, r1
 8001ca0:	335d      	adds	r3, #93	; 0x5d
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d10a      	bne.n	8001cbe <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001ca8:	6879      	ldr	r1, [r7, #4]
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	4613      	mov	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	4413      	add	r3, r2
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	440b      	add	r3, r1
 8001cb6:	335c      	adds	r3, #92	; 0x5c
 8001cb8:	2201      	movs	r2, #1
 8001cba:	701a      	strb	r2, [r3, #0]
 8001cbc:	e0d9      	b.n	8001e72 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	68fa      	ldr	r2, [r7, #12]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	440b      	add	r3, r1
 8001ccc:	335d      	adds	r3, #93	; 0x5d
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2b05      	cmp	r3, #5
 8001cd2:	d10a      	bne.n	8001cea <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001cd4:	6879      	ldr	r1, [r7, #4]
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	440b      	add	r3, r1
 8001ce2:	335c      	adds	r3, #92	; 0x5c
 8001ce4:	2205      	movs	r2, #5
 8001ce6:	701a      	strb	r2, [r3, #0]
 8001ce8:	e0c3      	b.n	8001e72 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	68fa      	ldr	r2, [r7, #12]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	4413      	add	r3, r2
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	440b      	add	r3, r1
 8001cf8:	335d      	adds	r3, #93	; 0x5d
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2b06      	cmp	r3, #6
 8001cfe:	d00a      	beq.n	8001d16 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001d00:	6879      	ldr	r1, [r7, #4]
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	4613      	mov	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	4413      	add	r3, r2
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	440b      	add	r3, r1
 8001d0e:	335d      	adds	r3, #93	; 0x5d
 8001d10:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001d12:	2b08      	cmp	r3, #8
 8001d14:	d156      	bne.n	8001dc4 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8001d16:	6879      	ldr	r1, [r7, #4]
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	440b      	add	r3, r1
 8001d24:	3358      	adds	r3, #88	; 0x58
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	1c59      	adds	r1, r3, #1
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	4403      	add	r3, r0
 8001d38:	3358      	adds	r3, #88	; 0x58
 8001d3a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001d3c:	6879      	ldr	r1, [r7, #4]
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	4613      	mov	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	440b      	add	r3, r1
 8001d4a:	3358      	adds	r3, #88	; 0x58
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2b03      	cmp	r3, #3
 8001d50:	d914      	bls.n	8001d7c <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001d52:	6879      	ldr	r1, [r7, #4]
 8001d54:	68fa      	ldr	r2, [r7, #12]
 8001d56:	4613      	mov	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4413      	add	r3, r2
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	440b      	add	r3, r1
 8001d60:	3358      	adds	r3, #88	; 0x58
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001d66:	6879      	ldr	r1, [r7, #4]
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	440b      	add	r3, r1
 8001d74:	335c      	adds	r3, #92	; 0x5c
 8001d76:	2204      	movs	r2, #4
 8001d78:	701a      	strb	r2, [r3, #0]
 8001d7a:	e009      	b.n	8001d90 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001d7c:	6879      	ldr	r1, [r7, #4]
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	4613      	mov	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	4413      	add	r3, r2
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	440b      	add	r3, r1
 8001d8a:	335c      	adds	r3, #92	; 0x5c
 8001d8c:	2202      	movs	r2, #2
 8001d8e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	015a      	lsls	r2, r3, #5
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	4413      	add	r3, r2
 8001d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001da6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001dae:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	015a      	lsls	r2, r3, #5
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	4413      	add	r3, r2
 8001db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	6013      	str	r3, [r2, #0]
 8001dc2:	e056      	b.n	8001e72 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001dc4:	6879      	ldr	r1, [r7, #4]
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4413      	add	r3, r2
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	440b      	add	r3, r1
 8001dd2:	335d      	adds	r3, #93	; 0x5d
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b03      	cmp	r3, #3
 8001dd8:	d123      	bne.n	8001e22 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	4613      	mov	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4413      	add	r3, r2
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	440b      	add	r3, r1
 8001de8:	335c      	adds	r3, #92	; 0x5c
 8001dea:	2202      	movs	r2, #2
 8001dec:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	015a      	lsls	r2, r3, #5
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	4413      	add	r3, r2
 8001df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001e04:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e0c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	015a      	lsls	r2, r3, #5
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	4413      	add	r3, r2
 8001e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	6013      	str	r3, [r2, #0]
 8001e20:	e027      	b.n	8001e72 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	4613      	mov	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	440b      	add	r3, r1
 8001e30:	335d      	adds	r3, #93	; 0x5d
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b07      	cmp	r3, #7
 8001e36:	d11c      	bne.n	8001e72 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8001e38:	6879      	ldr	r1, [r7, #4]
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	440b      	add	r3, r1
 8001e46:	3358      	adds	r3, #88	; 0x58
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	1c59      	adds	r1, r3, #1
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	4613      	mov	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	4403      	add	r3, r0
 8001e5a:	3358      	adds	r3, #88	; 0x58
 8001e5c:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	4613      	mov	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	4413      	add	r3, r2
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	440b      	add	r3, r1
 8001e6c:	335c      	adds	r3, #92	; 0x5c
 8001e6e:	2204      	movs	r2, #4
 8001e70:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	015a      	lsls	r2, r3, #5
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	4413      	add	r3, r2
 8001e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e7e:	461a      	mov	r2, r3
 8001e80:	2302      	movs	r3, #2
 8001e82:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	b2d8      	uxtb	r0, r3
 8001e88:	6879      	ldr	r1, [r7, #4]
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4413      	add	r3, r2
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	440b      	add	r3, r1
 8001e96:	335c      	adds	r3, #92	; 0x5c
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	4601      	mov	r1, r0
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f00b f878 	bl	800cf94 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001ea4:	e0d1      	b.n	800204a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	015a      	lsls	r2, r3, #5
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	4413      	add	r3, r2
 8001eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb8:	2b80      	cmp	r3, #128	; 0x80
 8001eba:	d13e      	bne.n	8001f3a <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	015a      	lsls	r2, r3, #5
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	0151      	lsls	r1, r2, #5
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	440a      	add	r2, r1
 8001ed2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ed6:	f043 0302 	orr.w	r3, r3, #2
 8001eda:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8001edc:	6879      	ldr	r1, [r7, #4]
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4413      	add	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	440b      	add	r3, r1
 8001eea:	3358      	adds	r3, #88	; 0x58
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	1c59      	adds	r1, r3, #1
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	4413      	add	r3, r2
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	4403      	add	r3, r0
 8001efe:	3358      	adds	r3, #88	; 0x58
 8001f00:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	4613      	mov	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	440b      	add	r3, r1
 8001f10:	335d      	adds	r3, #93	; 0x5d
 8001f12:	2206      	movs	r2, #6
 8001f14:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	b2d2      	uxtb	r2, r2
 8001f1e:	4611      	mov	r1, r2
 8001f20:	4618      	mov	r0, r3
 8001f22:	f004 fbac 	bl	800667e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	015a      	lsls	r2, r3, #5
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f32:	461a      	mov	r2, r3
 8001f34:	2380      	movs	r3, #128	; 0x80
 8001f36:	6093      	str	r3, [r2, #8]
}
 8001f38:	e087      	b.n	800204a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	015a      	lsls	r2, r3, #5
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	4413      	add	r3, r2
 8001f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f003 0310 	and.w	r3, r3, #16
 8001f4c:	2b10      	cmp	r3, #16
 8001f4e:	d17c      	bne.n	800204a <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001f50:	6879      	ldr	r1, [r7, #4]
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	4613      	mov	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	440b      	add	r3, r1
 8001f5e:	333f      	adds	r3, #63	; 0x3f
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	2b03      	cmp	r3, #3
 8001f64:	d122      	bne.n	8001fac <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4413      	add	r3, r2
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	440b      	add	r3, r1
 8001f74:	3358      	adds	r3, #88	; 0x58
 8001f76:	2200      	movs	r2, #0
 8001f78:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	015a      	lsls	r2, r3, #5
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	4413      	add	r3, r2
 8001f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	0151      	lsls	r1, r2, #5
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	440a      	add	r2, r1
 8001f90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f94:	f043 0302 	orr.w	r3, r3, #2
 8001f98:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	b2d2      	uxtb	r2, r2
 8001fa2:	4611      	mov	r1, r2
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f004 fb6a 	bl	800667e <USB_HC_Halt>
 8001faa:	e045      	b.n	8002038 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001fac:	6879      	ldr	r1, [r7, #4]
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4413      	add	r3, r2
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	440b      	add	r3, r1
 8001fba:	333f      	adds	r3, #63	; 0x3f
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00a      	beq.n	8001fd8 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001fc2:	6879      	ldr	r1, [r7, #4]
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4413      	add	r3, r2
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	440b      	add	r3, r1
 8001fd0:	333f      	adds	r3, #63	; 0x3f
 8001fd2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d12f      	bne.n	8002038 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001fd8:	6879      	ldr	r1, [r7, #4]
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4413      	add	r3, r2
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	440b      	add	r3, r1
 8001fe6:	3358      	adds	r3, #88	; 0x58
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d121      	bne.n	8002038 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	440b      	add	r3, r1
 8002002:	335d      	adds	r3, #93	; 0x5d
 8002004:	2203      	movs	r2, #3
 8002006:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	015a      	lsls	r2, r3, #5
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	4413      	add	r3, r2
 8002010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	0151      	lsls	r1, r2, #5
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	440a      	add	r2, r1
 800201e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002022:	f043 0302 	orr.w	r3, r3, #2
 8002026:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	4611      	mov	r1, r2
 8002032:	4618      	mov	r0, r3
 8002034:	f004 fb23 	bl	800667e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	015a      	lsls	r2, r3, #5
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	4413      	add	r3, r2
 8002040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002044:	461a      	mov	r2, r3
 8002046:	2310      	movs	r3, #16
 8002048:	6093      	str	r3, [r2, #8]
}
 800204a:	bf00      	nop
 800204c:	3718      	adds	r7, #24
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b086      	sub	sp, #24
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
 800205a:	460b      	mov	r3, r1
 800205c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002068:	78fb      	ldrb	r3, [r7, #3]
 800206a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	015a      	lsls	r2, r3, #5
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	4413      	add	r3, r2
 8002074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 0304 	and.w	r3, r3, #4
 800207e:	2b04      	cmp	r3, #4
 8002080:	d119      	bne.n	80020b6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	015a      	lsls	r2, r3, #5
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	4413      	add	r3, r2
 800208a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800208e:	461a      	mov	r2, r3
 8002090:	2304      	movs	r3, #4
 8002092:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	015a      	lsls	r2, r3, #5
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	4413      	add	r3, r2
 800209c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	0151      	lsls	r1, r2, #5
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	440a      	add	r2, r1
 80020aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020ae:	f043 0302 	orr.w	r3, r3, #2
 80020b2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80020b4:	e33e      	b.n	8002734 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	015a      	lsls	r2, r3, #5
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	4413      	add	r3, r2
 80020be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 0320 	and.w	r3, r3, #32
 80020c8:	2b20      	cmp	r3, #32
 80020ca:	d141      	bne.n	8002150 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	015a      	lsls	r2, r3, #5
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	4413      	add	r3, r2
 80020d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020d8:	461a      	mov	r2, r3
 80020da:	2320      	movs	r3, #32
 80020dc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80020de:	6879      	ldr	r1, [r7, #4]
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	4613      	mov	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	440b      	add	r3, r1
 80020ec:	333d      	adds	r3, #61	; 0x3d
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	f040 831f 	bne.w	8002734 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	4613      	mov	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4413      	add	r3, r2
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	440b      	add	r3, r1
 8002104:	333d      	adds	r3, #61	; 0x3d
 8002106:	2200      	movs	r2, #0
 8002108:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	4613      	mov	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4413      	add	r3, r2
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	440b      	add	r3, r1
 8002118:	335c      	adds	r3, #92	; 0x5c
 800211a:	2202      	movs	r2, #2
 800211c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	015a      	lsls	r2, r3, #5
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	4413      	add	r3, r2
 8002126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	0151      	lsls	r1, r2, #5
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	440a      	add	r2, r1
 8002134:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002138:	f043 0302 	orr.w	r3, r3, #2
 800213c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	b2d2      	uxtb	r2, r2
 8002146:	4611      	mov	r1, r2
 8002148:	4618      	mov	r0, r3
 800214a:	f004 fa98 	bl	800667e <USB_HC_Halt>
}
 800214e:	e2f1      	b.n	8002734 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	015a      	lsls	r2, r3, #5
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	4413      	add	r3, r2
 8002158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002162:	2b40      	cmp	r3, #64	; 0x40
 8002164:	d13f      	bne.n	80021e6 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	4613      	mov	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	440b      	add	r3, r1
 8002174:	335d      	adds	r3, #93	; 0x5d
 8002176:	2204      	movs	r2, #4
 8002178:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	4613      	mov	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	440b      	add	r3, r1
 8002188:	333d      	adds	r3, #61	; 0x3d
 800218a:	2201      	movs	r2, #1
 800218c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	4613      	mov	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4413      	add	r3, r2
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	440b      	add	r3, r1
 800219c:	3358      	adds	r3, #88	; 0x58
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	015a      	lsls	r2, r3, #5
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	4413      	add	r3, r2
 80021aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	0151      	lsls	r1, r2, #5
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	440a      	add	r2, r1
 80021b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021bc:	f043 0302 	orr.w	r3, r3, #2
 80021c0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	b2d2      	uxtb	r2, r2
 80021ca:	4611      	mov	r1, r2
 80021cc:	4618      	mov	r0, r3
 80021ce:	f004 fa56 	bl	800667e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	015a      	lsls	r2, r3, #5
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	4413      	add	r3, r2
 80021da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021de:	461a      	mov	r2, r3
 80021e0:	2340      	movs	r3, #64	; 0x40
 80021e2:	6093      	str	r3, [r2, #8]
}
 80021e4:	e2a6      	b.n	8002734 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	015a      	lsls	r2, r3, #5
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	4413      	add	r3, r2
 80021ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021fc:	d122      	bne.n	8002244 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	015a      	lsls	r2, r3, #5
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	4413      	add	r3, r2
 8002206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	0151      	lsls	r1, r2, #5
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	440a      	add	r2, r1
 8002214:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002218:	f043 0302 	orr.w	r3, r3, #2
 800221c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	4611      	mov	r1, r2
 8002228:	4618      	mov	r0, r3
 800222a:	f004 fa28 	bl	800667e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	015a      	lsls	r2, r3, #5
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	4413      	add	r3, r2
 8002236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800223a:	461a      	mov	r2, r3
 800223c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002240:	6093      	str	r3, [r2, #8]
}
 8002242:	e277      	b.n	8002734 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	015a      	lsls	r2, r3, #5
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	4413      	add	r3, r2
 800224c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b01      	cmp	r3, #1
 8002258:	d135      	bne.n	80022c6 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800225a:	6879      	ldr	r1, [r7, #4]
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	4613      	mov	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	4413      	add	r3, r2
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	440b      	add	r3, r1
 8002268:	3358      	adds	r3, #88	; 0x58
 800226a:	2200      	movs	r2, #0
 800226c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	015a      	lsls	r2, r3, #5
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	4413      	add	r3, r2
 8002276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	0151      	lsls	r1, r2, #5
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	440a      	add	r2, r1
 8002284:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002288:	f043 0302 	orr.w	r3, r3, #2
 800228c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	4611      	mov	r1, r2
 8002298:	4618      	mov	r0, r3
 800229a:	f004 f9f0 	bl	800667e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	015a      	lsls	r2, r3, #5
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	4413      	add	r3, r2
 80022a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022aa:	461a      	mov	r2, r3
 80022ac:	2301      	movs	r3, #1
 80022ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	4613      	mov	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4413      	add	r3, r2
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	440b      	add	r3, r1
 80022be:	335d      	adds	r3, #93	; 0x5d
 80022c0:	2201      	movs	r2, #1
 80022c2:	701a      	strb	r2, [r3, #0]
}
 80022c4:	e236      	b.n	8002734 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	015a      	lsls	r2, r3, #5
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	4413      	add	r3, r2
 80022ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f003 0308 	and.w	r3, r3, #8
 80022d8:	2b08      	cmp	r3, #8
 80022da:	d12b      	bne.n	8002334 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	015a      	lsls	r2, r3, #5
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	4413      	add	r3, r2
 80022e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e8:	461a      	mov	r2, r3
 80022ea:	2308      	movs	r3, #8
 80022ec:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	015a      	lsls	r2, r3, #5
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	4413      	add	r3, r2
 80022f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	68fa      	ldr	r2, [r7, #12]
 80022fe:	0151      	lsls	r1, r2, #5
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	440a      	add	r2, r1
 8002304:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002308:	f043 0302 	orr.w	r3, r3, #2
 800230c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	b2d2      	uxtb	r2, r2
 8002316:	4611      	mov	r1, r2
 8002318:	4618      	mov	r0, r3
 800231a:	f004 f9b0 	bl	800667e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	4613      	mov	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	440b      	add	r3, r1
 800232c:	335d      	adds	r3, #93	; 0x5d
 800232e:	2205      	movs	r2, #5
 8002330:	701a      	strb	r2, [r3, #0]
}
 8002332:	e1ff      	b.n	8002734 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	015a      	lsls	r2, r3, #5
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	4413      	add	r3, r2
 800233c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f003 0310 	and.w	r3, r3, #16
 8002346:	2b10      	cmp	r3, #16
 8002348:	d155      	bne.n	80023f6 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	4613      	mov	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	440b      	add	r3, r1
 8002358:	3358      	adds	r3, #88	; 0x58
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	4613      	mov	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	4413      	add	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	440b      	add	r3, r1
 800236c:	335d      	adds	r3, #93	; 0x5d
 800236e:	2203      	movs	r2, #3
 8002370:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002372:	6879      	ldr	r1, [r7, #4]
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	4613      	mov	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4413      	add	r3, r2
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	440b      	add	r3, r1
 8002380:	333d      	adds	r3, #61	; 0x3d
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d114      	bne.n	80023b2 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002388:	6879      	ldr	r1, [r7, #4]
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	4613      	mov	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4413      	add	r3, r2
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	440b      	add	r3, r1
 8002396:	333c      	adds	r3, #60	; 0x3c
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d109      	bne.n	80023b2 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	4613      	mov	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	4413      	add	r3, r2
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	440b      	add	r3, r1
 80023ac:	333d      	adds	r3, #61	; 0x3d
 80023ae:	2201      	movs	r2, #1
 80023b0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	015a      	lsls	r2, r3, #5
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	4413      	add	r3, r2
 80023ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	0151      	lsls	r1, r2, #5
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	440a      	add	r2, r1
 80023c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023cc:	f043 0302 	orr.w	r3, r3, #2
 80023d0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	4611      	mov	r1, r2
 80023dc:	4618      	mov	r0, r3
 80023de:	f004 f94e 	bl	800667e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	015a      	lsls	r2, r3, #5
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	4413      	add	r3, r2
 80023ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ee:	461a      	mov	r2, r3
 80023f0:	2310      	movs	r3, #16
 80023f2:	6093      	str	r3, [r2, #8]
}
 80023f4:	e19e      	b.n	8002734 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	015a      	lsls	r2, r3, #5
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	4413      	add	r3, r2
 80023fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002408:	2b80      	cmp	r3, #128	; 0x80
 800240a:	d12b      	bne.n	8002464 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	015a      	lsls	r2, r3, #5
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	4413      	add	r3, r2
 8002414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	0151      	lsls	r1, r2, #5
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	440a      	add	r2, r1
 8002422:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002426:	f043 0302 	orr.w	r3, r3, #2
 800242a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	4611      	mov	r1, r2
 8002436:	4618      	mov	r0, r3
 8002438:	f004 f921 	bl	800667e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800243c:	6879      	ldr	r1, [r7, #4]
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	4613      	mov	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	440b      	add	r3, r1
 800244a:	335d      	adds	r3, #93	; 0x5d
 800244c:	2206      	movs	r2, #6
 800244e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	015a      	lsls	r2, r3, #5
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	4413      	add	r3, r2
 8002458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800245c:	461a      	mov	r2, r3
 800245e:	2380      	movs	r3, #128	; 0x80
 8002460:	6093      	str	r3, [r2, #8]
}
 8002462:	e167      	b.n	8002734 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	015a      	lsls	r2, r3, #5
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	4413      	add	r3, r2
 800246c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002476:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800247a:	d135      	bne.n	80024e8 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	015a      	lsls	r2, r3, #5
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	4413      	add	r3, r2
 8002484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	0151      	lsls	r1, r2, #5
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	440a      	add	r2, r1
 8002492:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002496:	f043 0302 	orr.w	r3, r3, #2
 800249a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	4611      	mov	r1, r2
 80024a6:	4618      	mov	r0, r3
 80024a8:	f004 f8e9 	bl	800667e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	015a      	lsls	r2, r3, #5
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	4413      	add	r3, r2
 80024b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b8:	461a      	mov	r2, r3
 80024ba:	2310      	movs	r3, #16
 80024bc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	015a      	lsls	r2, r3, #5
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	4413      	add	r3, r2
 80024c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ca:	461a      	mov	r2, r3
 80024cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024d0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	4613      	mov	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4413      	add	r3, r2
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	440b      	add	r3, r1
 80024e0:	335d      	adds	r3, #93	; 0x5d
 80024e2:	2208      	movs	r2, #8
 80024e4:	701a      	strb	r2, [r3, #0]
}
 80024e6:	e125      	b.n	8002734 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	015a      	lsls	r2, r3, #5
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	4413      	add	r3, r2
 80024f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	f040 811a 	bne.w	8002734 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	015a      	lsls	r2, r3, #5
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	4413      	add	r3, r2
 8002508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	0151      	lsls	r1, r2, #5
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	440a      	add	r2, r1
 8002516:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800251a:	f023 0302 	bic.w	r3, r3, #2
 800251e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002520:	6879      	ldr	r1, [r7, #4]
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	4613      	mov	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4413      	add	r3, r2
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	440b      	add	r3, r1
 800252e:	335d      	adds	r3, #93	; 0x5d
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d137      	bne.n	80025a6 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002536:	6879      	ldr	r1, [r7, #4]
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	4613      	mov	r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4413      	add	r3, r2
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	440b      	add	r3, r1
 8002544:	335c      	adds	r3, #92	; 0x5c
 8002546:	2201      	movs	r2, #1
 8002548:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	4613      	mov	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	4413      	add	r3, r2
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	440b      	add	r3, r1
 8002558:	333f      	adds	r3, #63	; 0x3f
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	2b02      	cmp	r3, #2
 800255e:	d00b      	beq.n	8002578 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	4613      	mov	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4413      	add	r3, r2
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	440b      	add	r3, r1
 800256e:	333f      	adds	r3, #63	; 0x3f
 8002570:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002572:	2b03      	cmp	r3, #3
 8002574:	f040 80c5 	bne.w	8002702 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	4613      	mov	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	440b      	add	r3, r1
 8002586:	3351      	adds	r3, #81	; 0x51
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	f083 0301 	eor.w	r3, r3, #1
 800258e:	b2d8      	uxtb	r0, r3
 8002590:	6879      	ldr	r1, [r7, #4]
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	4613      	mov	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	440b      	add	r3, r1
 800259e:	3351      	adds	r3, #81	; 0x51
 80025a0:	4602      	mov	r2, r0
 80025a2:	701a      	strb	r2, [r3, #0]
 80025a4:	e0ad      	b.n	8002702 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	4613      	mov	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	4413      	add	r3, r2
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	440b      	add	r3, r1
 80025b4:	335d      	adds	r3, #93	; 0x5d
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b03      	cmp	r3, #3
 80025ba:	d10a      	bne.n	80025d2 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80025bc:	6879      	ldr	r1, [r7, #4]
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	4613      	mov	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	4413      	add	r3, r2
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	440b      	add	r3, r1
 80025ca:	335c      	adds	r3, #92	; 0x5c
 80025cc:	2202      	movs	r2, #2
 80025ce:	701a      	strb	r2, [r3, #0]
 80025d0:	e097      	b.n	8002702 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80025d2:	6879      	ldr	r1, [r7, #4]
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	4613      	mov	r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	4413      	add	r3, r2
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	440b      	add	r3, r1
 80025e0:	335d      	adds	r3, #93	; 0x5d
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	2b04      	cmp	r3, #4
 80025e6:	d10a      	bne.n	80025fe <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80025e8:	6879      	ldr	r1, [r7, #4]
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	4613      	mov	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	440b      	add	r3, r1
 80025f6:	335c      	adds	r3, #92	; 0x5c
 80025f8:	2202      	movs	r2, #2
 80025fa:	701a      	strb	r2, [r3, #0]
 80025fc:	e081      	b.n	8002702 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	4613      	mov	r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	4413      	add	r3, r2
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	440b      	add	r3, r1
 800260c:	335d      	adds	r3, #93	; 0x5d
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	2b05      	cmp	r3, #5
 8002612:	d10a      	bne.n	800262a <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002614:	6879      	ldr	r1, [r7, #4]
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	4613      	mov	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	4413      	add	r3, r2
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	440b      	add	r3, r1
 8002622:	335c      	adds	r3, #92	; 0x5c
 8002624:	2205      	movs	r2, #5
 8002626:	701a      	strb	r2, [r3, #0]
 8002628:	e06b      	b.n	8002702 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	4613      	mov	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4413      	add	r3, r2
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	440b      	add	r3, r1
 8002638:	335d      	adds	r3, #93	; 0x5d
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	2b06      	cmp	r3, #6
 800263e:	d00a      	beq.n	8002656 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002640:	6879      	ldr	r1, [r7, #4]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	4613      	mov	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4413      	add	r3, r2
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	440b      	add	r3, r1
 800264e:	335d      	adds	r3, #93	; 0x5d
 8002650:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002652:	2b08      	cmp	r3, #8
 8002654:	d155      	bne.n	8002702 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	4613      	mov	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4413      	add	r3, r2
 8002660:	00db      	lsls	r3, r3, #3
 8002662:	440b      	add	r3, r1
 8002664:	3358      	adds	r3, #88	; 0x58
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	1c59      	adds	r1, r3, #1
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	4613      	mov	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	4413      	add	r3, r2
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	4403      	add	r3, r0
 8002678:	3358      	adds	r3, #88	; 0x58
 800267a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800267c:	6879      	ldr	r1, [r7, #4]
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	4613      	mov	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4413      	add	r3, r2
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	440b      	add	r3, r1
 800268a:	3358      	adds	r3, #88	; 0x58
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2b03      	cmp	r3, #3
 8002690:	d914      	bls.n	80026bc <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002692:	6879      	ldr	r1, [r7, #4]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	4613      	mov	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4413      	add	r3, r2
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	440b      	add	r3, r1
 80026a0:	3358      	adds	r3, #88	; 0x58
 80026a2:	2200      	movs	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	4613      	mov	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4413      	add	r3, r2
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	440b      	add	r3, r1
 80026b4:	335c      	adds	r3, #92	; 0x5c
 80026b6:	2204      	movs	r2, #4
 80026b8:	701a      	strb	r2, [r3, #0]
 80026ba:	e009      	b.n	80026d0 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80026bc:	6879      	ldr	r1, [r7, #4]
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	4613      	mov	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4413      	add	r3, r2
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	440b      	add	r3, r1
 80026ca:	335c      	adds	r3, #92	; 0x5c
 80026cc:	2202      	movs	r2, #2
 80026ce:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	015a      	lsls	r2, r3, #5
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	4413      	add	r3, r2
 80026d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80026e6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026ee:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	015a      	lsls	r2, r3, #5
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	4413      	add	r3, r2
 80026f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026fc:	461a      	mov	r2, r3
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	015a      	lsls	r2, r3, #5
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	4413      	add	r3, r2
 800270a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800270e:	461a      	mov	r2, r3
 8002710:	2302      	movs	r3, #2
 8002712:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	b2d8      	uxtb	r0, r3
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	4613      	mov	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4413      	add	r3, r2
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	440b      	add	r3, r1
 8002726:	335c      	adds	r3, #92	; 0x5c
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	461a      	mov	r2, r3
 800272c:	4601      	mov	r1, r0
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f00a fc30 	bl	800cf94 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002734:	bf00      	nop
 8002736:	3718      	adds	r7, #24
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b08a      	sub	sp, #40	; 0x28
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	f003 030f 	and.w	r3, r3, #15
 800275c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	0c5b      	lsrs	r3, r3, #17
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	091b      	lsrs	r3, r3, #4
 800276c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002770:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	2b02      	cmp	r3, #2
 8002776:	d003      	beq.n	8002780 <HCD_RXQLVL_IRQHandler+0x44>
 8002778:	2b05      	cmp	r3, #5
 800277a:	f000 8082 	beq.w	8002882 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800277e:	e083      	b.n	8002888 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d07f      	beq.n	8002886 <HCD_RXQLVL_IRQHandler+0x14a>
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4613      	mov	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	440b      	add	r3, r1
 8002794:	3344      	adds	r3, #68	; 0x44
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d074      	beq.n	8002886 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6818      	ldr	r0, [r3, #0]
 80027a0:	6879      	ldr	r1, [r7, #4]
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	4613      	mov	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	440b      	add	r3, r1
 80027ae:	3344      	adds	r3, #68	; 0x44
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	b292      	uxth	r2, r2
 80027b6:	4619      	mov	r1, r3
 80027b8:	f003 fb01 	bl	8005dbe <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	4613      	mov	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	4413      	add	r3, r2
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	440b      	add	r3, r1
 80027ca:	3344      	adds	r3, #68	; 0x44
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	18d1      	adds	r1, r2, r3
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	4613      	mov	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4413      	add	r3, r2
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	4403      	add	r3, r0
 80027e0:	3344      	adds	r3, #68	; 0x44
 80027e2:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80027e4:	6879      	ldr	r1, [r7, #4]
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4613      	mov	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4413      	add	r3, r2
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	440b      	add	r3, r1
 80027f2:	334c      	adds	r3, #76	; 0x4c
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	18d1      	adds	r1, r2, r3
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4613      	mov	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	4403      	add	r3, r0
 8002808:	334c      	adds	r3, #76	; 0x4c
 800280a:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	015a      	lsls	r2, r3, #5
 8002810:	6a3b      	ldr	r3, [r7, #32]
 8002812:	4413      	add	r3, r2
 8002814:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002818:	691a      	ldr	r2, [r3, #16]
 800281a:	4b1d      	ldr	r3, [pc, #116]	; (8002890 <HCD_RXQLVL_IRQHandler+0x154>)
 800281c:	4013      	ands	r3, r2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d031      	beq.n	8002886 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	015a      	lsls	r2, r3, #5
 8002826:	6a3b      	ldr	r3, [r7, #32]
 8002828:	4413      	add	r3, r2
 800282a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002838:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002840:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	015a      	lsls	r2, r3, #5
 8002846:	6a3b      	ldr	r3, [r7, #32]
 8002848:	4413      	add	r3, r2
 800284a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800284e:	461a      	mov	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002854:	6879      	ldr	r1, [r7, #4]
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	4613      	mov	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4413      	add	r3, r2
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	440b      	add	r3, r1
 8002862:	3350      	adds	r3, #80	; 0x50
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	f083 0301 	eor.w	r3, r3, #1
 800286a:	b2d8      	uxtb	r0, r3
 800286c:	6879      	ldr	r1, [r7, #4]
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	4613      	mov	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	440b      	add	r3, r1
 800287a:	3350      	adds	r3, #80	; 0x50
 800287c:	4602      	mov	r2, r0
 800287e:	701a      	strb	r2, [r3, #0]
      break;
 8002880:	e001      	b.n	8002886 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002882:	bf00      	nop
 8002884:	e000      	b.n	8002888 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002886:	bf00      	nop
  }
}
 8002888:	bf00      	nop
 800288a:	3728      	adds	r7, #40	; 0x28
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	1ff80000 	.word	0x1ff80000

08002894 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80028c0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d10b      	bne.n	80028e4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d102      	bne.n	80028dc <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f00a fb40 	bl	800cf5c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	f043 0302 	orr.w	r3, r3, #2
 80028e2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f003 0308 	and.w	r3, r3, #8
 80028ea:	2b08      	cmp	r3, #8
 80028ec:	d132      	bne.n	8002954 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	f043 0308 	orr.w	r3, r3, #8
 80028f4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f003 0304 	and.w	r3, r3, #4
 80028fc:	2b04      	cmp	r3, #4
 80028fe:	d126      	bne.n	800294e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	2b02      	cmp	r3, #2
 8002906:	d113      	bne.n	8002930 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800290e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002912:	d106      	bne.n	8002922 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2102      	movs	r1, #2
 800291a:	4618      	mov	r0, r3
 800291c:	f003 fb8a 	bl	8006034 <USB_InitFSLSPClkSel>
 8002920:	e011      	b.n	8002946 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2101      	movs	r1, #1
 8002928:	4618      	mov	r0, r3
 800292a:	f003 fb83 	bl	8006034 <USB_InitFSLSPClkSel>
 800292e:	e00a      	b.n	8002946 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d106      	bne.n	8002946 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800293e:	461a      	mov	r2, r3
 8002940:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002944:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f00a fb36 	bl	800cfb8 <HAL_HCD_PortEnabled_Callback>
 800294c:	e002      	b.n	8002954 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f00a fb40 	bl	800cfd4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f003 0320 	and.w	r3, r3, #32
 800295a:	2b20      	cmp	r3, #32
 800295c:	d103      	bne.n	8002966 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	f043 0320 	orr.w	r3, r3, #32
 8002964:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800296c:	461a      	mov	r2, r3
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	6013      	str	r3, [r2, #0]
}
 8002972:	bf00      	nop
 8002974:	3718      	adds	r7, #24
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
	...

0800297c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e11f      	b.n	8002bce <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d106      	bne.n	80029a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f009 fdfc 	bl	800c5a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2224      	movs	r2, #36	; 0x24
 80029ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 0201 	bic.w	r2, r2, #1
 80029be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029e0:	f001 fd56 	bl	8004490 <HAL_RCC_GetPCLK1Freq>
 80029e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	4a7b      	ldr	r2, [pc, #492]	; (8002bd8 <HAL_I2C_Init+0x25c>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d807      	bhi.n	8002a00 <HAL_I2C_Init+0x84>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4a7a      	ldr	r2, [pc, #488]	; (8002bdc <HAL_I2C_Init+0x260>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	bf94      	ite	ls
 80029f8:	2301      	movls	r3, #1
 80029fa:	2300      	movhi	r3, #0
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	e006      	b.n	8002a0e <HAL_I2C_Init+0x92>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	4a77      	ldr	r2, [pc, #476]	; (8002be0 <HAL_I2C_Init+0x264>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	bf94      	ite	ls
 8002a08:	2301      	movls	r3, #1
 8002a0a:	2300      	movhi	r3, #0
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e0db      	b.n	8002bce <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	4a72      	ldr	r2, [pc, #456]	; (8002be4 <HAL_I2C_Init+0x268>)
 8002a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1e:	0c9b      	lsrs	r3, r3, #18
 8002a20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68ba      	ldr	r2, [r7, #8]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6a1b      	ldr	r3, [r3, #32]
 8002a3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	4a64      	ldr	r2, [pc, #400]	; (8002bd8 <HAL_I2C_Init+0x25c>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d802      	bhi.n	8002a50 <HAL_I2C_Init+0xd4>
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	e009      	b.n	8002a64 <HAL_I2C_Init+0xe8>
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a56:	fb02 f303 	mul.w	r3, r2, r3
 8002a5a:	4a63      	ldr	r2, [pc, #396]	; (8002be8 <HAL_I2C_Init+0x26c>)
 8002a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a60:	099b      	lsrs	r3, r3, #6
 8002a62:	3301      	adds	r3, #1
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	6812      	ldr	r2, [r2, #0]
 8002a68:	430b      	orrs	r3, r1
 8002a6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	4956      	ldr	r1, [pc, #344]	; (8002bd8 <HAL_I2C_Init+0x25c>)
 8002a80:	428b      	cmp	r3, r1
 8002a82:	d80d      	bhi.n	8002aa0 <HAL_I2C_Init+0x124>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	1e59      	subs	r1, r3, #1
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a92:	3301      	adds	r3, #1
 8002a94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a98:	2b04      	cmp	r3, #4
 8002a9a:	bf38      	it	cc
 8002a9c:	2304      	movcc	r3, #4
 8002a9e:	e04f      	b.n	8002b40 <HAL_I2C_Init+0x1c4>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d111      	bne.n	8002acc <HAL_I2C_Init+0x150>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	1e58      	subs	r0, r3, #1
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6859      	ldr	r1, [r3, #4]
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	440b      	add	r3, r1
 8002ab6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aba:	3301      	adds	r3, #1
 8002abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	bf0c      	ite	eq
 8002ac4:	2301      	moveq	r3, #1
 8002ac6:	2300      	movne	r3, #0
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	e012      	b.n	8002af2 <HAL_I2C_Init+0x176>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	1e58      	subs	r0, r3, #1
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6859      	ldr	r1, [r3, #4]
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	0099      	lsls	r1, r3, #2
 8002adc:	440b      	add	r3, r1
 8002ade:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	bf0c      	ite	eq
 8002aec:	2301      	moveq	r3, #1
 8002aee:	2300      	movne	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <HAL_I2C_Init+0x17e>
 8002af6:	2301      	movs	r3, #1
 8002af8:	e022      	b.n	8002b40 <HAL_I2C_Init+0x1c4>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10e      	bne.n	8002b20 <HAL_I2C_Init+0x1a4>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	1e58      	subs	r0, r3, #1
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6859      	ldr	r1, [r3, #4]
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	440b      	add	r3, r1
 8002b10:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b14:	3301      	adds	r3, #1
 8002b16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b1e:	e00f      	b.n	8002b40 <HAL_I2C_Init+0x1c4>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	1e58      	subs	r0, r3, #1
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6859      	ldr	r1, [r3, #4]
 8002b28:	460b      	mov	r3, r1
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	440b      	add	r3, r1
 8002b2e:	0099      	lsls	r1, r3, #2
 8002b30:	440b      	add	r3, r1
 8002b32:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b36:	3301      	adds	r3, #1
 8002b38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b40:	6879      	ldr	r1, [r7, #4]
 8002b42:	6809      	ldr	r1, [r1, #0]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	69da      	ldr	r2, [r3, #28]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	430a      	orrs	r2, r1
 8002b62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	6911      	ldr	r1, [r2, #16]
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	68d2      	ldr	r2, [r2, #12]
 8002b7a:	4311      	orrs	r1, r2
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	6812      	ldr	r2, [r2, #0]
 8002b80:	430b      	orrs	r3, r1
 8002b82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	695a      	ldr	r2, [r3, #20]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	431a      	orrs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 0201 	orr.w	r2, r2, #1
 8002bae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2220      	movs	r2, #32
 8002bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	000186a0 	.word	0x000186a0
 8002bdc:	001e847f 	.word	0x001e847f
 8002be0:	003d08ff 	.word	0x003d08ff
 8002be4:	431bde83 	.word	0x431bde83
 8002be8:	10624dd3 	.word	0x10624dd3

08002bec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b088      	sub	sp, #32
 8002bf0:	af02      	add	r7, sp, #8
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	607a      	str	r2, [r7, #4]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	817b      	strh	r3, [r7, #10]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c00:	f7fd fcb4 	bl	800056c <HAL_GetTick>
 8002c04:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b20      	cmp	r3, #32
 8002c10:	f040 80e0 	bne.w	8002dd4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	9300      	str	r3, [sp, #0]
 8002c18:	2319      	movs	r3, #25
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	4970      	ldr	r1, [pc, #448]	; (8002de0 <HAL_I2C_Master_Transmit+0x1f4>)
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 fa92 	bl	8003148 <I2C_WaitOnFlagUntilTimeout>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	e0d3      	b.n	8002dd6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d101      	bne.n	8002c3c <HAL_I2C_Master_Transmit+0x50>
 8002c38:	2302      	movs	r3, #2
 8002c3a:	e0cc      	b.n	8002dd6 <HAL_I2C_Master_Transmit+0x1ea>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d007      	beq.n	8002c62 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f042 0201 	orr.w	r2, r2, #1
 8002c60:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c70:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2221      	movs	r2, #33	; 0x21
 8002c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2210      	movs	r2, #16
 8002c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	893a      	ldrh	r2, [r7, #8]
 8002c92:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	4a50      	ldr	r2, [pc, #320]	; (8002de4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002ca2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ca4:	8979      	ldrh	r1, [r7, #10]
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	6a3a      	ldr	r2, [r7, #32]
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f000 f9ca 	bl	8003044 <I2C_MasterRequestWrite>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e08d      	b.n	8002dd6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cba:	2300      	movs	r3, #0
 8002cbc:	613b      	str	r3, [r7, #16]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	695b      	ldr	r3, [r3, #20]
 8002cc4:	613b      	str	r3, [r7, #16]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	613b      	str	r3, [r7, #16]
 8002cce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002cd0:	e066      	b.n	8002da0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	6a39      	ldr	r1, [r7, #32]
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f000 fb0c 	bl	80032f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00d      	beq.n	8002cfe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d107      	bne.n	8002cfa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cf8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e06b      	b.n	8002dd6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d02:	781a      	ldrb	r2, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0e:	1c5a      	adds	r2, r3, #1
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d26:	3b01      	subs	r3, #1
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b04      	cmp	r3, #4
 8002d3a:	d11b      	bne.n	8002d74 <HAL_I2C_Master_Transmit+0x188>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d017      	beq.n	8002d74 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d48:	781a      	ldrb	r2, [r3, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d54:	1c5a      	adds	r2, r3, #1
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	3b01      	subs	r3, #1
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	6a39      	ldr	r1, [r7, #32]
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f000 fafc 	bl	8003376 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00d      	beq.n	8002da0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d88:	2b04      	cmp	r3, #4
 8002d8a:	d107      	bne.n	8002d9c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d9a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e01a      	b.n	8002dd6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d194      	bne.n	8002cd2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002db6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2220      	movs	r2, #32
 8002dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	e000      	b.n	8002dd6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002dd4:	2302      	movs	r3, #2
  }
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3718      	adds	r7, #24
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	00100002 	.word	0x00100002
 8002de4:	ffff0000 	.word	0xffff0000

08002de8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b08a      	sub	sp, #40	; 0x28
 8002dec:	af02      	add	r7, sp, #8
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	607a      	str	r2, [r7, #4]
 8002df2:	603b      	str	r3, [r7, #0]
 8002df4:	460b      	mov	r3, r1
 8002df6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002df8:	f7fd fbb8 	bl	800056c <HAL_GetTick>
 8002dfc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b20      	cmp	r3, #32
 8002e0c:	f040 8110 	bne.w	8003030 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	2319      	movs	r3, #25
 8002e16:	2201      	movs	r2, #1
 8002e18:	4988      	ldr	r1, [pc, #544]	; (800303c <HAL_I2C_IsDeviceReady+0x254>)
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f000 f994 	bl	8003148 <I2C_WaitOnFlagUntilTimeout>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002e26:	2302      	movs	r3, #2
 8002e28:	e103      	b.n	8003032 <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d101      	bne.n	8002e38 <HAL_I2C_IsDeviceReady+0x50>
 8002e34:	2302      	movs	r3, #2
 8002e36:	e0fc      	b.n	8003032 <HAL_I2C_IsDeviceReady+0x24a>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d007      	beq.n	8002e5e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f042 0201 	orr.w	r2, r2, #1
 8002e5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e6c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2224      	movs	r2, #36	; 0x24
 8002e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	4a70      	ldr	r2, [pc, #448]	; (8003040 <HAL_I2C_IsDeviceReady+0x258>)
 8002e80:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e90:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	9300      	str	r3, [sp, #0]
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 f952 	bl	8003148 <I2C_WaitOnFlagUntilTimeout>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00c      	beq.n	8002ec4 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d003      	beq.n	8002ec0 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ebe:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e0b6      	b.n	8003032 <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ec4:	897b      	ldrh	r3, [r7, #10]
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	461a      	mov	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ed2:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002ed4:	f7fd fb4a 	bl	800056c <HAL_GetTick>
 8002ed8:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	695b      	ldr	r3, [r3, #20]
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	bf0c      	ite	eq
 8002ee8:	2301      	moveq	r3, #1
 8002eea:	2300      	movne	r3, #0
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002efa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002efe:	bf0c      	ite	eq
 8002f00:	2301      	moveq	r3, #1
 8002f02:	2300      	movne	r3, #0
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002f08:	e025      	b.n	8002f56 <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f0a:	f7fd fb2f 	bl	800056c <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d302      	bcc.n	8002f20 <HAL_I2C_IsDeviceReady+0x138>
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d103      	bne.n	8002f28 <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	22a0      	movs	r2, #160	; 0xa0
 8002f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	bf0c      	ite	eq
 8002f36:	2301      	moveq	r3, #1
 8002f38:	2300      	movne	r3, #0
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	695b      	ldr	r3, [r3, #20]
 8002f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f4c:	bf0c      	ite	eq
 8002f4e:	2301      	moveq	r3, #1
 8002f50:	2300      	movne	r3, #0
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2ba0      	cmp	r3, #160	; 0xa0
 8002f60:	d005      	beq.n	8002f6e <HAL_I2C_IsDeviceReady+0x186>
 8002f62:	7dfb      	ldrb	r3, [r7, #23]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d102      	bne.n	8002f6e <HAL_I2C_IsDeviceReady+0x186>
 8002f68:	7dbb      	ldrb	r3, [r7, #22]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0cd      	beq.n	8002f0a <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2220      	movs	r2, #32
 8002f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d129      	bne.n	8002fd8 <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f92:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f94:	2300      	movs	r3, #0
 8002f96:	613b      	str	r3, [r7, #16]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	613b      	str	r3, [r7, #16]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	613b      	str	r3, [r7, #16]
 8002fa8:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	9300      	str	r3, [sp, #0]
 8002fae:	2319      	movs	r3, #25
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	4922      	ldr	r1, [pc, #136]	; (800303c <HAL_I2C_IsDeviceReady+0x254>)
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 f8c7 	bl	8003148 <I2C_WaitOnFlagUntilTimeout>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e036      	b.n	8003032 <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	e02c      	b.n	8003032 <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fe6:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ff0:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	2319      	movs	r3, #25
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	4910      	ldr	r1, [pc, #64]	; (800303c <HAL_I2C_IsDeviceReady+0x254>)
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f000 f8a3 	bl	8003148 <I2C_WaitOnFlagUntilTimeout>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e012      	b.n	8003032 <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	3301      	adds	r3, #1
 8003010:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	429a      	cmp	r2, r3
 8003018:	f4ff af33 	bcc.w	8002e82 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2220      	movs	r2, #32
 8003020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e000      	b.n	8003032 <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 8003030:	2302      	movs	r3, #2
  }
}
 8003032:	4618      	mov	r0, r3
 8003034:	3720      	adds	r7, #32
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	00100002 	.word	0x00100002
 8003040:	ffff0000 	.word	0xffff0000

08003044 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b088      	sub	sp, #32
 8003048:	af02      	add	r7, sp, #8
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	607a      	str	r2, [r7, #4]
 800304e:	603b      	str	r3, [r7, #0]
 8003050:	460b      	mov	r3, r1
 8003052:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003058:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	2b08      	cmp	r3, #8
 800305e:	d006      	beq.n	800306e <I2C_MasterRequestWrite+0x2a>
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d003      	beq.n	800306e <I2C_MasterRequestWrite+0x2a>
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800306c:	d108      	bne.n	8003080 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	e00b      	b.n	8003098 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003084:	2b12      	cmp	r3, #18
 8003086:	d107      	bne.n	8003098 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003096:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f000 f84f 	bl	8003148 <I2C_WaitOnFlagUntilTimeout>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00c      	beq.n	80030ca <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e035      	b.n	8003136 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030d2:	d108      	bne.n	80030e6 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030d4:	897b      	ldrh	r3, [r7, #10]
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	461a      	mov	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030e2:	611a      	str	r2, [r3, #16]
 80030e4:	e01b      	b.n	800311e <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80030e6:	897b      	ldrh	r3, [r7, #10]
 80030e8:	11db      	asrs	r3, r3, #7
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	f003 0306 	and.w	r3, r3, #6
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	f063 030f 	orn	r3, r3, #15
 80030f6:	b2da      	uxtb	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	490f      	ldr	r1, [pc, #60]	; (8003140 <I2C_MasterRequestWrite+0xfc>)
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f000 f876 	bl	80031f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e010      	b.n	8003136 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003114:	897b      	ldrh	r3, [r7, #10]
 8003116:	b2da      	uxtb	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	4908      	ldr	r1, [pc, #32]	; (8003144 <I2C_MasterRequestWrite+0x100>)
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f000 f866 	bl	80031f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e000      	b.n	8003136 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3718      	adds	r7, #24
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	00010008 	.word	0x00010008
 8003144:	00010002 	.word	0x00010002

08003148 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	603b      	str	r3, [r7, #0]
 8003154:	4613      	mov	r3, r2
 8003156:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003158:	e025      	b.n	80031a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003160:	d021      	beq.n	80031a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003162:	f7fd fa03 	bl	800056c <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d302      	bcc.n	8003178 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d116      	bne.n	80031a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2220      	movs	r2, #32
 8003182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	f043 0220 	orr.w	r2, r3, #32
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e023      	b.n	80031ee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	0c1b      	lsrs	r3, r3, #16
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d10d      	bne.n	80031cc <I2C_WaitOnFlagUntilTimeout+0x84>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	43da      	mvns	r2, r3
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	4013      	ands	r3, r2
 80031bc:	b29b      	uxth	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	bf0c      	ite	eq
 80031c2:	2301      	moveq	r3, #1
 80031c4:	2300      	movne	r3, #0
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	461a      	mov	r2, r3
 80031ca:	e00c      	b.n	80031e6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	43da      	mvns	r2, r3
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	4013      	ands	r3, r2
 80031d8:	b29b      	uxth	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	bf0c      	ite	eq
 80031de:	2301      	moveq	r3, #1
 80031e0:	2300      	movne	r3, #0
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	461a      	mov	r2, r3
 80031e6:	79fb      	ldrb	r3, [r7, #7]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d0b6      	beq.n	800315a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b084      	sub	sp, #16
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	60f8      	str	r0, [r7, #12]
 80031fe:	60b9      	str	r1, [r7, #8]
 8003200:	607a      	str	r2, [r7, #4]
 8003202:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003204:	e051      	b.n	80032aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003210:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003214:	d123      	bne.n	800325e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003224:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800322e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2220      	movs	r2, #32
 800323a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	f043 0204 	orr.w	r2, r3, #4
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e046      	b.n	80032ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003264:	d021      	beq.n	80032aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003266:	f7fd f981 	bl	800056c <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	429a      	cmp	r2, r3
 8003274:	d302      	bcc.n	800327c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d116      	bne.n	80032aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2220      	movs	r2, #32
 8003286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	f043 0220 	orr.w	r2, r3, #32
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e020      	b.n	80032ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	0c1b      	lsrs	r3, r3, #16
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d10c      	bne.n	80032ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	43da      	mvns	r2, r3
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	4013      	ands	r3, r2
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	bf14      	ite	ne
 80032c6:	2301      	movne	r3, #1
 80032c8:	2300      	moveq	r3, #0
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	e00b      	b.n	80032e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	43da      	mvns	r2, r3
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	4013      	ands	r3, r2
 80032da:	b29b      	uxth	r3, r3
 80032dc:	2b00      	cmp	r3, #0
 80032de:	bf14      	ite	ne
 80032e0:	2301      	movne	r3, #1
 80032e2:	2300      	moveq	r3, #0
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d18d      	bne.n	8003206 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003300:	e02d      	b.n	800335e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f000 f878 	bl	80033f8 <I2C_IsAcknowledgeFailed>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e02d      	b.n	800336e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003318:	d021      	beq.n	800335e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800331a:	f7fd f927 	bl	800056c <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	68ba      	ldr	r2, [r7, #8]
 8003326:	429a      	cmp	r2, r3
 8003328:	d302      	bcc.n	8003330 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d116      	bne.n	800335e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2220      	movs	r2, #32
 800333a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	f043 0220 	orr.w	r2, r3, #32
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e007      	b.n	800336e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003368:	2b80      	cmp	r3, #128	; 0x80
 800336a:	d1ca      	bne.n	8003302 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b084      	sub	sp, #16
 800337a:	af00      	add	r7, sp, #0
 800337c:	60f8      	str	r0, [r7, #12]
 800337e:	60b9      	str	r1, [r7, #8]
 8003380:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003382:	e02d      	b.n	80033e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f000 f837 	bl	80033f8 <I2C_IsAcknowledgeFailed>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e02d      	b.n	80033f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800339a:	d021      	beq.n	80033e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800339c:	f7fd f8e6 	bl	800056c <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	68ba      	ldr	r2, [r7, #8]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d302      	bcc.n	80033b2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d116      	bne.n	80033e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2220      	movs	r2, #32
 80033bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033cc:	f043 0220 	orr.w	r2, r3, #32
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e007      	b.n	80033f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	f003 0304 	and.w	r3, r3, #4
 80033ea:	2b04      	cmp	r3, #4
 80033ec:	d1ca      	bne.n	8003384 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800340a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800340e:	d11b      	bne.n	8003448 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003418:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2220      	movs	r2, #32
 8003424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003434:	f043 0204 	orr.w	r2, r3, #4
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e000      	b.n	800344a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003456:	b480      	push	{r7}
 8003458:	b083      	sub	sp, #12
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
 800345e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b20      	cmp	r3, #32
 800346a:	d129      	bne.n	80034c0 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2224      	movs	r2, #36	; 0x24
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 0201 	bic.w	r2, r2, #1
 8003482:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0210 	bic.w	r2, r2, #16
 8003492:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	430a      	orrs	r2, r1
 80034a2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f042 0201 	orr.w	r2, r2, #1
 80034b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2220      	movs	r2, #32
 80034b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80034bc:	2300      	movs	r3, #0
 80034be:	e000      	b.n	80034c2 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80034c0:	2302      	movs	r3, #2
  }
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr

080034ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80034ce:	b480      	push	{r7}
 80034d0:	b085      	sub	sp, #20
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
 80034d6:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80034d8:	2300      	movs	r3, #0
 80034da:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b20      	cmp	r3, #32
 80034e6:	d12a      	bne.n	800353e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2224      	movs	r2, #36	; 0x24
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 0201 	bic.w	r2, r2, #1
 80034fe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003506:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003508:	89fb      	ldrh	r3, [r7, #14]
 800350a:	f023 030f 	bic.w	r3, r3, #15
 800350e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	b29a      	uxth	r2, r3
 8003514:	89fb      	ldrh	r3, [r7, #14]
 8003516:	4313      	orrs	r3, r2
 8003518:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	89fa      	ldrh	r2, [r7, #14]
 8003520:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f042 0201 	orr.w	r2, r2, #1
 8003530:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2220      	movs	r2, #32
 8003536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800353a:	2300      	movs	r3, #0
 800353c:	e000      	b.n	8003540 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800353e:	2302      	movs	r3, #2
  }
}
 8003540:	4618      	mov	r0, r3
 8003542:	3714      	adds	r7, #20
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e0bf      	b.n	80036de <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d106      	bne.n	8003578 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f009 f87e 	bl	800c674 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2202      	movs	r2, #2
 800357c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	699a      	ldr	r2, [r3, #24]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800358e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	6999      	ldr	r1, [r3, #24]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685a      	ldr	r2, [r3, #4]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80035a4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	430a      	orrs	r2, r1
 80035b2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6899      	ldr	r1, [r3, #8]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	4b4a      	ldr	r3, [pc, #296]	; (80036e8 <HAL_LTDC_Init+0x19c>)
 80035c0:	400b      	ands	r3, r1
 80035c2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	695b      	ldr	r3, [r3, #20]
 80035c8:	041b      	lsls	r3, r3, #16
 80035ca:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6899      	ldr	r1, [r3, #8]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	699a      	ldr	r2, [r3, #24]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	431a      	orrs	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68d9      	ldr	r1, [r3, #12]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	4b3e      	ldr	r3, [pc, #248]	; (80036e8 <HAL_LTDC_Init+0x19c>)
 80035ee:	400b      	ands	r3, r1
 80035f0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	041b      	lsls	r3, r3, #16
 80035f8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68d9      	ldr	r1, [r3, #12]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a1a      	ldr	r2, [r3, #32]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	431a      	orrs	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	430a      	orrs	r2, r1
 800360e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6919      	ldr	r1, [r3, #16]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	4b33      	ldr	r3, [pc, #204]	; (80036e8 <HAL_LTDC_Init+0x19c>)
 800361c:	400b      	ands	r3, r1
 800361e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003624:	041b      	lsls	r3, r3, #16
 8003626:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6919      	ldr	r1, [r3, #16]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	431a      	orrs	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	430a      	orrs	r2, r1
 800363c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6959      	ldr	r1, [r3, #20]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	4b27      	ldr	r3, [pc, #156]	; (80036e8 <HAL_LTDC_Init+0x19c>)
 800364a:	400b      	ands	r3, r1
 800364c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003652:	041b      	lsls	r3, r3, #16
 8003654:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	6959      	ldr	r1, [r3, #20]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	431a      	orrs	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	430a      	orrs	r2, r1
 800366a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003672:	021b      	lsls	r3, r3, #8
 8003674:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800367c:	041b      	lsls	r3, r3, #16
 800367e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800368e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003696:	68ba      	ldr	r2, [r7, #8]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	4313      	orrs	r3, r2
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80036a2:	431a      	orrs	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	430a      	orrs	r2, r1
 80036aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f042 0206 	orr.w	r2, r2, #6
 80036ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	699a      	ldr	r2, [r3, #24]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f042 0201 	orr.w	r2, r2, #1
 80036ca:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	f000f800 	.word	0xf000f800

080036ec <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003702:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f003 0304 	and.w	r3, r3, #4
 800370a:	2b00      	cmp	r3, #0
 800370c:	d023      	beq.n	8003756 <HAL_LTDC_IRQHandler+0x6a>
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	f003 0304 	and.w	r3, r3, #4
 8003714:	2b00      	cmp	r3, #0
 8003716:	d01e      	beq.n	8003756 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f022 0204 	bic.w	r2, r2, #4
 8003726:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2204      	movs	r2, #4
 800372e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003736:	f043 0201 	orr.w	r2, r3, #1
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2204      	movs	r2, #4
 8003744:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 f86f 	bl	8003834 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d023      	beq.n	80037a8 <HAL_LTDC_IRQHandler+0xbc>
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d01e      	beq.n	80037a8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f022 0202 	bic.w	r2, r2, #2
 8003778:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2202      	movs	r2, #2
 8003780:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003788:	f043 0202 	orr.w	r2, r3, #2
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2204      	movs	r2, #4
 8003796:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f846 	bl	8003834 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d01b      	beq.n	80037ea <HAL_LTDC_IRQHandler+0xfe>
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d016      	beq.n	80037ea <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f022 0201 	bic.w	r2, r2, #1
 80037ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2201      	movs	r2, #1
 80037d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 f82f 	bl	8003848 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f003 0308 	and.w	r3, r3, #8
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d01b      	beq.n	800382c <HAL_LTDC_IRQHandler+0x140>
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	f003 0308 	and.w	r3, r3, #8
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d016      	beq.n	800382c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0208 	bic.w	r2, r2, #8
 800380c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2208      	movs	r2, #8
 8003814:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2201      	movs	r2, #1
 800381a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f818 	bl	800385c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800382c:	bf00      	nop
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003870:	b5b0      	push	{r4, r5, r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003882:	2b01      	cmp	r3, #1
 8003884:	d101      	bne.n	800388a <HAL_LTDC_ConfigLayer+0x1a>
 8003886:	2302      	movs	r3, #2
 8003888:	e02c      	b.n	80038e4 <HAL_LTDC_ConfigLayer+0x74>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2202      	movs	r2, #2
 8003896:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2134      	movs	r1, #52	; 0x34
 80038a0:	fb01 f303 	mul.w	r3, r1, r3
 80038a4:	4413      	add	r3, r2
 80038a6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	4614      	mov	r4, r2
 80038ae:	461d      	mov	r5, r3
 80038b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038bc:	682b      	ldr	r3, [r5, #0]
 80038be:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	68b9      	ldr	r1, [r7, #8]
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	f000 f811 	bl	80038ec <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2201      	movs	r2, #1
 80038d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3710      	adds	r7, #16
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bdb0      	pop	{r4, r5, r7, pc}

080038ec <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b089      	sub	sp, #36	; 0x24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	0c1b      	lsrs	r3, r3, #16
 8003904:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003908:	4413      	add	r3, r2
 800390a:	041b      	lsls	r3, r3, #16
 800390c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	461a      	mov	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	01db      	lsls	r3, r3, #7
 8003918:	4413      	add	r3, r2
 800391a:	3384      	adds	r3, #132	; 0x84
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	6812      	ldr	r2, [r2, #0]
 8003922:	4611      	mov	r1, r2
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	01d2      	lsls	r2, r2, #7
 8003928:	440a      	add	r2, r1
 800392a:	3284      	adds	r2, #132	; 0x84
 800392c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003930:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	0c1b      	lsrs	r3, r3, #16
 800393e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003942:	4413      	add	r3, r2
 8003944:	1c5a      	adds	r2, r3, #1
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4619      	mov	r1, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	01db      	lsls	r3, r3, #7
 8003950:	440b      	add	r3, r1
 8003952:	3384      	adds	r3, #132	; 0x84
 8003954:	4619      	mov	r1, r3
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	4313      	orrs	r3, r2
 800395a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	68da      	ldr	r2, [r3, #12]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800396a:	4413      	add	r3, r2
 800396c:	041b      	lsls	r3, r3, #16
 800396e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	461a      	mov	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	01db      	lsls	r3, r3, #7
 800397a:	4413      	add	r3, r2
 800397c:	3384      	adds	r3, #132	; 0x84
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	6812      	ldr	r2, [r2, #0]
 8003984:	4611      	mov	r1, r2
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	01d2      	lsls	r2, r2, #7
 800398a:	440a      	add	r2, r1
 800398c:	3284      	adds	r2, #132	; 0x84
 800398e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003992:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	689a      	ldr	r2, [r3, #8]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039a2:	4413      	add	r3, r2
 80039a4:	1c5a      	adds	r2, r3, #1
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4619      	mov	r1, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	01db      	lsls	r3, r3, #7
 80039b0:	440b      	add	r3, r1
 80039b2:	3384      	adds	r3, #132	; 0x84
 80039b4:	4619      	mov	r1, r3
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	461a      	mov	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	01db      	lsls	r3, r3, #7
 80039c6:	4413      	add	r3, r2
 80039c8:	3384      	adds	r3, #132	; 0x84
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	6812      	ldr	r2, [r2, #0]
 80039d0:	4611      	mov	r1, r2
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	01d2      	lsls	r2, r2, #7
 80039d6:	440a      	add	r2, r1
 80039d8:	3284      	adds	r2, #132	; 0x84
 80039da:	f023 0307 	bic.w	r3, r3, #7
 80039de:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	461a      	mov	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	01db      	lsls	r3, r3, #7
 80039ea:	4413      	add	r3, r2
 80039ec:	3384      	adds	r3, #132	; 0x84
 80039ee:	461a      	mov	r2, r3
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80039fc:	021b      	lsls	r3, r3, #8
 80039fe:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003a06:	041b      	lsls	r3, r3, #16
 8003a08:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	061b      	lsls	r3, r3, #24
 8003a10:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	461a      	mov	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	01db      	lsls	r3, r3, #7
 8003a1c:	4413      	add	r3, r2
 8003a1e:	3384      	adds	r3, #132	; 0x84
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	461a      	mov	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	01db      	lsls	r3, r3, #7
 8003a2c:	4413      	add	r3, r2
 8003a2e:	3384      	adds	r3, #132	; 0x84
 8003a30:	461a      	mov	r2, r3
 8003a32:	2300      	movs	r3, #0
 8003a34:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	431a      	orrs	r2, r3
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	431a      	orrs	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	01db      	lsls	r3, r3, #7
 8003a50:	440b      	add	r3, r1
 8003a52:	3384      	adds	r3, #132	; 0x84
 8003a54:	4619      	mov	r1, r3
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	461a      	mov	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	01db      	lsls	r3, r3, #7
 8003a66:	4413      	add	r3, r2
 8003a68:	3384      	adds	r3, #132	; 0x84
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	6812      	ldr	r2, [r2, #0]
 8003a70:	4611      	mov	r1, r2
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	01d2      	lsls	r2, r2, #7
 8003a76:	440a      	add	r2, r1
 8003a78:	3284      	adds	r2, #132	; 0x84
 8003a7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a7e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	461a      	mov	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	01db      	lsls	r3, r3, #7
 8003a8a:	4413      	add	r3, r2
 8003a8c:	3384      	adds	r3, #132	; 0x84
 8003a8e:	461a      	mov	r2, r3
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	01db      	lsls	r3, r3, #7
 8003aa0:	4413      	add	r3, r2
 8003aa2:	3384      	adds	r3, #132	; 0x84
 8003aa4:	69db      	ldr	r3, [r3, #28]
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	6812      	ldr	r2, [r2, #0]
 8003aaa:	4611      	mov	r1, r2
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	01d2      	lsls	r2, r2, #7
 8003ab0:	440a      	add	r2, r1
 8003ab2:	3284      	adds	r2, #132	; 0x84
 8003ab4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003ab8:	f023 0307 	bic.w	r3, r3, #7
 8003abc:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	69da      	ldr	r2, [r3, #28]
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
 8003ac6:	68f9      	ldr	r1, [r7, #12]
 8003ac8:	6809      	ldr	r1, [r1, #0]
 8003aca:	4608      	mov	r0, r1
 8003acc:	6879      	ldr	r1, [r7, #4]
 8003ace:	01c9      	lsls	r1, r1, #7
 8003ad0:	4401      	add	r1, r0
 8003ad2:	3184      	adds	r1, #132	; 0x84
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	461a      	mov	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	01db      	lsls	r3, r3, #7
 8003ae2:	4413      	add	r3, r2
 8003ae4:	3384      	adds	r3, #132	; 0x84
 8003ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	461a      	mov	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	01db      	lsls	r3, r3, #7
 8003af2:	4413      	add	r3, r2
 8003af4:	3384      	adds	r3, #132	; 0x84
 8003af6:	461a      	mov	r2, r3
 8003af8:	2300      	movs	r3, #0
 8003afa:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	461a      	mov	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	01db      	lsls	r3, r3, #7
 8003b06:	4413      	add	r3, r2
 8003b08:	3384      	adds	r3, #132	; 0x84
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b10:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d102      	bne.n	8003b20 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8003b1a:	2304      	movs	r3, #4
 8003b1c:	61fb      	str	r3, [r7, #28]
 8003b1e:	e01b      	b.n	8003b58 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d102      	bne.n	8003b2e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	61fb      	str	r3, [r7, #28]
 8003b2c:	e014      	b.n	8003b58 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	2b04      	cmp	r3, #4
 8003b34:	d00b      	beq.n	8003b4e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d007      	beq.n	8003b4e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003b42:	2b03      	cmp	r3, #3
 8003b44:	d003      	beq.n	8003b4e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003b4a:	2b07      	cmp	r3, #7
 8003b4c:	d102      	bne.n	8003b54 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8003b4e:	2302      	movs	r3, #2
 8003b50:	61fb      	str	r3, [r7, #28]
 8003b52:	e001      	b.n	8003b58 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8003b54:	2301      	movs	r3, #1
 8003b56:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	01db      	lsls	r3, r3, #7
 8003b62:	4413      	add	r3, r2
 8003b64:	3384      	adds	r3, #132	; 0x84
 8003b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	6812      	ldr	r2, [r2, #0]
 8003b6c:	4611      	mov	r1, r2
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	01d2      	lsls	r2, r2, #7
 8003b72:	440a      	add	r2, r1
 8003b74:	3284      	adds	r2, #132	; 0x84
 8003b76:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003b7a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b80:	69fa      	ldr	r2, [r7, #28]
 8003b82:	fb02 f303 	mul.w	r3, r2, r3
 8003b86:	041a      	lsls	r2, r3, #16
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	6859      	ldr	r1, [r3, #4]
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	1acb      	subs	r3, r1, r3
 8003b92:	69f9      	ldr	r1, [r7, #28]
 8003b94:	fb01 f303 	mul.w	r3, r1, r3
 8003b98:	3303      	adds	r3, #3
 8003b9a:	68f9      	ldr	r1, [r7, #12]
 8003b9c:	6809      	ldr	r1, [r1, #0]
 8003b9e:	4608      	mov	r0, r1
 8003ba0:	6879      	ldr	r1, [r7, #4]
 8003ba2:	01c9      	lsls	r1, r1, #7
 8003ba4:	4401      	add	r1, r0
 8003ba6:	3184      	adds	r1, #132	; 0x84
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	01db      	lsls	r3, r3, #7
 8003bb6:	4413      	add	r3, r2
 8003bb8:	3384      	adds	r3, #132	; 0x84
 8003bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	6812      	ldr	r2, [r2, #0]
 8003bc0:	4611      	mov	r1, r2
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	01d2      	lsls	r2, r2, #7
 8003bc6:	440a      	add	r2, r1
 8003bc8:	3284      	adds	r2, #132	; 0x84
 8003bca:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003bce:	f023 0307 	bic.w	r3, r3, #7
 8003bd2:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	461a      	mov	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	01db      	lsls	r3, r3, #7
 8003bde:	4413      	add	r3, r2
 8003be0:	3384      	adds	r3, #132	; 0x84
 8003be2:	461a      	mov	r2, r3
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	01db      	lsls	r3, r3, #7
 8003bf4:	4413      	add	r3, r2
 8003bf6:	3384      	adds	r3, #132	; 0x84
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	6812      	ldr	r2, [r2, #0]
 8003bfe:	4611      	mov	r1, r2
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	01d2      	lsls	r2, r2, #7
 8003c04:	440a      	add	r2, r1
 8003c06:	3284      	adds	r2, #132	; 0x84
 8003c08:	f043 0301 	orr.w	r3, r3, #1
 8003c0c:	6013      	str	r3, [r2, #0]
}
 8003c0e:	bf00      	nop
 8003c10:	3724      	adds	r7, #36	; 0x24
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
	...

08003c1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e25b      	b.n	80040e6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d075      	beq.n	8003d26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c3a:	4ba3      	ldr	r3, [pc, #652]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f003 030c 	and.w	r3, r3, #12
 8003c42:	2b04      	cmp	r3, #4
 8003c44:	d00c      	beq.n	8003c60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c46:	4ba0      	ldr	r3, [pc, #640]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c4e:	2b08      	cmp	r3, #8
 8003c50:	d112      	bne.n	8003c78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c52:	4b9d      	ldr	r3, [pc, #628]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c5e:	d10b      	bne.n	8003c78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c60:	4b99      	ldr	r3, [pc, #612]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d05b      	beq.n	8003d24 <HAL_RCC_OscConfig+0x108>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d157      	bne.n	8003d24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e236      	b.n	80040e6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c80:	d106      	bne.n	8003c90 <HAL_RCC_OscConfig+0x74>
 8003c82:	4b91      	ldr	r3, [pc, #580]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a90      	ldr	r2, [pc, #576]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c8c:	6013      	str	r3, [r2, #0]
 8003c8e:	e01d      	b.n	8003ccc <HAL_RCC_OscConfig+0xb0>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c98:	d10c      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x98>
 8003c9a:	4b8b      	ldr	r3, [pc, #556]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a8a      	ldr	r2, [pc, #552]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003ca0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ca4:	6013      	str	r3, [r2, #0]
 8003ca6:	4b88      	ldr	r3, [pc, #544]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a87      	ldr	r2, [pc, #540]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003cac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cb0:	6013      	str	r3, [r2, #0]
 8003cb2:	e00b      	b.n	8003ccc <HAL_RCC_OscConfig+0xb0>
 8003cb4:	4b84      	ldr	r3, [pc, #528]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a83      	ldr	r2, [pc, #524]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003cba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cbe:	6013      	str	r3, [r2, #0]
 8003cc0:	4b81      	ldr	r3, [pc, #516]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a80      	ldr	r2, [pc, #512]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003cc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d013      	beq.n	8003cfc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd4:	f7fc fc4a 	bl	800056c <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cdc:	f7fc fc46 	bl	800056c <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b64      	cmp	r3, #100	; 0x64
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e1fb      	b.n	80040e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cee:	4b76      	ldr	r3, [pc, #472]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d0f0      	beq.n	8003cdc <HAL_RCC_OscConfig+0xc0>
 8003cfa:	e014      	b.n	8003d26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cfc:	f7fc fc36 	bl	800056c <HAL_GetTick>
 8003d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d02:	e008      	b.n	8003d16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d04:	f7fc fc32 	bl	800056c <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b64      	cmp	r3, #100	; 0x64
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e1e7      	b.n	80040e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d16:	4b6c      	ldr	r3, [pc, #432]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1f0      	bne.n	8003d04 <HAL_RCC_OscConfig+0xe8>
 8003d22:	e000      	b.n	8003d26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d063      	beq.n	8003dfa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d32:	4b65      	ldr	r3, [pc, #404]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f003 030c 	and.w	r3, r3, #12
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00b      	beq.n	8003d56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d3e:	4b62      	ldr	r3, [pc, #392]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d46:	2b08      	cmp	r3, #8
 8003d48:	d11c      	bne.n	8003d84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d4a:	4b5f      	ldr	r3, [pc, #380]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d116      	bne.n	8003d84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d56:	4b5c      	ldr	r3, [pc, #368]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d005      	beq.n	8003d6e <HAL_RCC_OscConfig+0x152>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d001      	beq.n	8003d6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e1bb      	b.n	80040e6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d6e:	4b56      	ldr	r3, [pc, #344]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	00db      	lsls	r3, r3, #3
 8003d7c:	4952      	ldr	r1, [pc, #328]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d82:	e03a      	b.n	8003dfa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d020      	beq.n	8003dce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d8c:	4b4f      	ldr	r3, [pc, #316]	; (8003ecc <HAL_RCC_OscConfig+0x2b0>)
 8003d8e:	2201      	movs	r2, #1
 8003d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d92:	f7fc fbeb 	bl	800056c <HAL_GetTick>
 8003d96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d98:	e008      	b.n	8003dac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d9a:	f7fc fbe7 	bl	800056c <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d901      	bls.n	8003dac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e19c      	b.n	80040e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dac:	4b46      	ldr	r3, [pc, #280]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d0f0      	beq.n	8003d9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003db8:	4b43      	ldr	r3, [pc, #268]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	00db      	lsls	r3, r3, #3
 8003dc6:	4940      	ldr	r1, [pc, #256]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	600b      	str	r3, [r1, #0]
 8003dcc:	e015      	b.n	8003dfa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dce:	4b3f      	ldr	r3, [pc, #252]	; (8003ecc <HAL_RCC_OscConfig+0x2b0>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd4:	f7fc fbca 	bl	800056c <HAL_GetTick>
 8003dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dda:	e008      	b.n	8003dee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ddc:	f7fc fbc6 	bl	800056c <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e17b      	b.n	80040e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dee:	4b36      	ldr	r3, [pc, #216]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1f0      	bne.n	8003ddc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0308 	and.w	r3, r3, #8
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d030      	beq.n	8003e68 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d016      	beq.n	8003e3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e0e:	4b30      	ldr	r3, [pc, #192]	; (8003ed0 <HAL_RCC_OscConfig+0x2b4>)
 8003e10:	2201      	movs	r2, #1
 8003e12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e14:	f7fc fbaa 	bl	800056c <HAL_GetTick>
 8003e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e1a:	e008      	b.n	8003e2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e1c:	f7fc fba6 	bl	800056c <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e15b      	b.n	80040e6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e2e:	4b26      	ldr	r3, [pc, #152]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003e30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d0f0      	beq.n	8003e1c <HAL_RCC_OscConfig+0x200>
 8003e3a:	e015      	b.n	8003e68 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e3c:	4b24      	ldr	r3, [pc, #144]	; (8003ed0 <HAL_RCC_OscConfig+0x2b4>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e42:	f7fc fb93 	bl	800056c <HAL_GetTick>
 8003e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e48:	e008      	b.n	8003e5c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e4a:	f7fc fb8f 	bl	800056c <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d901      	bls.n	8003e5c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e144      	b.n	80040e6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e5c:	4b1a      	ldr	r3, [pc, #104]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003e5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e60:	f003 0302 	and.w	r3, r3, #2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1f0      	bne.n	8003e4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0304 	and.w	r3, r3, #4
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f000 80a0 	beq.w	8003fb6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e76:	2300      	movs	r3, #0
 8003e78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e7a:	4b13      	ldr	r3, [pc, #76]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10f      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e86:	2300      	movs	r3, #0
 8003e88:	60bb      	str	r3, [r7, #8]
 8003e8a:	4b0f      	ldr	r3, [pc, #60]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	4a0e      	ldr	r2, [pc, #56]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e94:	6413      	str	r3, [r2, #64]	; 0x40
 8003e96:	4b0c      	ldr	r3, [pc, #48]	; (8003ec8 <HAL_RCC_OscConfig+0x2ac>)
 8003e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e9e:	60bb      	str	r3, [r7, #8]
 8003ea0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea6:	4b0b      	ldr	r3, [pc, #44]	; (8003ed4 <HAL_RCC_OscConfig+0x2b8>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d121      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eb2:	4b08      	ldr	r3, [pc, #32]	; (8003ed4 <HAL_RCC_OscConfig+0x2b8>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a07      	ldr	r2, [pc, #28]	; (8003ed4 <HAL_RCC_OscConfig+0x2b8>)
 8003eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ebc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ebe:	f7fc fb55 	bl	800056c <HAL_GetTick>
 8003ec2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ec4:	e011      	b.n	8003eea <HAL_RCC_OscConfig+0x2ce>
 8003ec6:	bf00      	nop
 8003ec8:	40023800 	.word	0x40023800
 8003ecc:	42470000 	.word	0x42470000
 8003ed0:	42470e80 	.word	0x42470e80
 8003ed4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ed8:	f7fc fb48 	bl	800056c <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e0fd      	b.n	80040e6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eea:	4b81      	ldr	r3, [pc, #516]	; (80040f0 <HAL_RCC_OscConfig+0x4d4>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d0f0      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d106      	bne.n	8003f0c <HAL_RCC_OscConfig+0x2f0>
 8003efe:	4b7d      	ldr	r3, [pc, #500]	; (80040f4 <HAL_RCC_OscConfig+0x4d8>)
 8003f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f02:	4a7c      	ldr	r2, [pc, #496]	; (80040f4 <HAL_RCC_OscConfig+0x4d8>)
 8003f04:	f043 0301 	orr.w	r3, r3, #1
 8003f08:	6713      	str	r3, [r2, #112]	; 0x70
 8003f0a:	e01c      	b.n	8003f46 <HAL_RCC_OscConfig+0x32a>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	2b05      	cmp	r3, #5
 8003f12:	d10c      	bne.n	8003f2e <HAL_RCC_OscConfig+0x312>
 8003f14:	4b77      	ldr	r3, [pc, #476]	; (80040f4 <HAL_RCC_OscConfig+0x4d8>)
 8003f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f18:	4a76      	ldr	r2, [pc, #472]	; (80040f4 <HAL_RCC_OscConfig+0x4d8>)
 8003f1a:	f043 0304 	orr.w	r3, r3, #4
 8003f1e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f20:	4b74      	ldr	r3, [pc, #464]	; (80040f4 <HAL_RCC_OscConfig+0x4d8>)
 8003f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f24:	4a73      	ldr	r2, [pc, #460]	; (80040f4 <HAL_RCC_OscConfig+0x4d8>)
 8003f26:	f043 0301 	orr.w	r3, r3, #1
 8003f2a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f2c:	e00b      	b.n	8003f46 <HAL_RCC_OscConfig+0x32a>
 8003f2e:	4b71      	ldr	r3, [pc, #452]	; (80040f4 <HAL_RCC_OscConfig+0x4d8>)
 8003f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f32:	4a70      	ldr	r2, [pc, #448]	; (80040f4 <HAL_RCC_OscConfig+0x4d8>)
 8003f34:	f023 0301 	bic.w	r3, r3, #1
 8003f38:	6713      	str	r3, [r2, #112]	; 0x70
 8003f3a:	4b6e      	ldr	r3, [pc, #440]	; (80040f4 <HAL_RCC_OscConfig+0x4d8>)
 8003f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3e:	4a6d      	ldr	r2, [pc, #436]	; (80040f4 <HAL_RCC_OscConfig+0x4d8>)
 8003f40:	f023 0304 	bic.w	r3, r3, #4
 8003f44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d015      	beq.n	8003f7a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f4e:	f7fc fb0d 	bl	800056c <HAL_GetTick>
 8003f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f54:	e00a      	b.n	8003f6c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f56:	f7fc fb09 	bl	800056c <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e0bc      	b.n	80040e6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f6c:	4b61      	ldr	r3, [pc, #388]	; (80040f4 <HAL_RCC_OscConfig+0x4d8>)
 8003f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d0ee      	beq.n	8003f56 <HAL_RCC_OscConfig+0x33a>
 8003f78:	e014      	b.n	8003fa4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f7a:	f7fc faf7 	bl	800056c <HAL_GetTick>
 8003f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f80:	e00a      	b.n	8003f98 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f82:	f7fc faf3 	bl	800056c <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d901      	bls.n	8003f98 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e0a6      	b.n	80040e6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f98:	4b56      	ldr	r3, [pc, #344]	; (80040f4 <HAL_RCC_OscConfig+0x4d8>)
 8003f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1ee      	bne.n	8003f82 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fa4:	7dfb      	ldrb	r3, [r7, #23]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d105      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003faa:	4b52      	ldr	r3, [pc, #328]	; (80040f4 <HAL_RCC_OscConfig+0x4d8>)
 8003fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fae:	4a51      	ldr	r2, [pc, #324]	; (80040f4 <HAL_RCC_OscConfig+0x4d8>)
 8003fb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fb4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f000 8092 	beq.w	80040e4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fc0:	4b4c      	ldr	r3, [pc, #304]	; (80040f4 <HAL_RCC_OscConfig+0x4d8>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f003 030c 	and.w	r3, r3, #12
 8003fc8:	2b08      	cmp	r3, #8
 8003fca:	d05c      	beq.n	8004086 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d141      	bne.n	8004058 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fd4:	4b48      	ldr	r3, [pc, #288]	; (80040f8 <HAL_RCC_OscConfig+0x4dc>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fda:	f7fc fac7 	bl	800056c <HAL_GetTick>
 8003fde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fe0:	e008      	b.n	8003ff4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fe2:	f7fc fac3 	bl	800056c <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d901      	bls.n	8003ff4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e078      	b.n	80040e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ff4:	4b3f      	ldr	r3, [pc, #252]	; (80040f4 <HAL_RCC_OscConfig+0x4d8>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1f0      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	69da      	ldr	r2, [r3, #28]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a1b      	ldr	r3, [r3, #32]
 8004008:	431a      	orrs	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400e:	019b      	lsls	r3, r3, #6
 8004010:	431a      	orrs	r2, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004016:	085b      	lsrs	r3, r3, #1
 8004018:	3b01      	subs	r3, #1
 800401a:	041b      	lsls	r3, r3, #16
 800401c:	431a      	orrs	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004022:	061b      	lsls	r3, r3, #24
 8004024:	4933      	ldr	r1, [pc, #204]	; (80040f4 <HAL_RCC_OscConfig+0x4d8>)
 8004026:	4313      	orrs	r3, r2
 8004028:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800402a:	4b33      	ldr	r3, [pc, #204]	; (80040f8 <HAL_RCC_OscConfig+0x4dc>)
 800402c:	2201      	movs	r2, #1
 800402e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004030:	f7fc fa9c 	bl	800056c <HAL_GetTick>
 8004034:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004036:	e008      	b.n	800404a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004038:	f7fc fa98 	bl	800056c <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b02      	cmp	r3, #2
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e04d      	b.n	80040e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800404a:	4b2a      	ldr	r3, [pc, #168]	; (80040f4 <HAL_RCC_OscConfig+0x4d8>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d0f0      	beq.n	8004038 <HAL_RCC_OscConfig+0x41c>
 8004056:	e045      	b.n	80040e4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004058:	4b27      	ldr	r3, [pc, #156]	; (80040f8 <HAL_RCC_OscConfig+0x4dc>)
 800405a:	2200      	movs	r2, #0
 800405c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800405e:	f7fc fa85 	bl	800056c <HAL_GetTick>
 8004062:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004064:	e008      	b.n	8004078 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004066:	f7fc fa81 	bl	800056c <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	2b02      	cmp	r3, #2
 8004072:	d901      	bls.n	8004078 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e036      	b.n	80040e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004078:	4b1e      	ldr	r3, [pc, #120]	; (80040f4 <HAL_RCC_OscConfig+0x4d8>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1f0      	bne.n	8004066 <HAL_RCC_OscConfig+0x44a>
 8004084:	e02e      	b.n	80040e4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d101      	bne.n	8004092 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e029      	b.n	80040e6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004092:	4b18      	ldr	r3, [pc, #96]	; (80040f4 <HAL_RCC_OscConfig+0x4d8>)
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	69db      	ldr	r3, [r3, #28]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d11c      	bne.n	80040e0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d115      	bne.n	80040e0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040ba:	4013      	ands	r3, r2
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d10d      	bne.n	80040e0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d106      	bne.n	80040e0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80040dc:	429a      	cmp	r2, r3
 80040de:	d001      	beq.n	80040e4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e000      	b.n	80040e6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3718      	adds	r7, #24
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	40007000 	.word	0x40007000
 80040f4:	40023800 	.word	0x40023800
 80040f8:	42470060 	.word	0x42470060

080040fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d101      	bne.n	8004110 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e0cc      	b.n	80042aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004110:	4b68      	ldr	r3, [pc, #416]	; (80042b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 030f 	and.w	r3, r3, #15
 8004118:	683a      	ldr	r2, [r7, #0]
 800411a:	429a      	cmp	r2, r3
 800411c:	d90c      	bls.n	8004138 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800411e:	4b65      	ldr	r3, [pc, #404]	; (80042b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004120:	683a      	ldr	r2, [r7, #0]
 8004122:	b2d2      	uxtb	r2, r2
 8004124:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004126:	4b63      	ldr	r3, [pc, #396]	; (80042b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 030f 	and.w	r3, r3, #15
 800412e:	683a      	ldr	r2, [r7, #0]
 8004130:	429a      	cmp	r2, r3
 8004132:	d001      	beq.n	8004138 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e0b8      	b.n	80042aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0302 	and.w	r3, r3, #2
 8004140:	2b00      	cmp	r3, #0
 8004142:	d020      	beq.n	8004186 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0304 	and.w	r3, r3, #4
 800414c:	2b00      	cmp	r3, #0
 800414e:	d005      	beq.n	800415c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004150:	4b59      	ldr	r3, [pc, #356]	; (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	4a58      	ldr	r2, [pc, #352]	; (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004156:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800415a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0308 	and.w	r3, r3, #8
 8004164:	2b00      	cmp	r3, #0
 8004166:	d005      	beq.n	8004174 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004168:	4b53      	ldr	r3, [pc, #332]	; (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	4a52      	ldr	r2, [pc, #328]	; (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 800416e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004172:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004174:	4b50      	ldr	r3, [pc, #320]	; (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	494d      	ldr	r1, [pc, #308]	; (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004182:	4313      	orrs	r3, r2
 8004184:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b00      	cmp	r3, #0
 8004190:	d044      	beq.n	800421c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	2b01      	cmp	r3, #1
 8004198:	d107      	bne.n	80041aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800419a:	4b47      	ldr	r3, [pc, #284]	; (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d119      	bne.n	80041da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e07f      	b.n	80042aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d003      	beq.n	80041ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041b6:	2b03      	cmp	r3, #3
 80041b8:	d107      	bne.n	80041ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ba:	4b3f      	ldr	r3, [pc, #252]	; (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d109      	bne.n	80041da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e06f      	b.n	80042aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ca:	4b3b      	ldr	r3, [pc, #236]	; (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e067      	b.n	80042aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041da:	4b37      	ldr	r3, [pc, #220]	; (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f023 0203 	bic.w	r2, r3, #3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	4934      	ldr	r1, [pc, #208]	; (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041ec:	f7fc f9be 	bl	800056c <HAL_GetTick>
 80041f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041f2:	e00a      	b.n	800420a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041f4:	f7fc f9ba 	bl	800056c <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004202:	4293      	cmp	r3, r2
 8004204:	d901      	bls.n	800420a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e04f      	b.n	80042aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800420a:	4b2b      	ldr	r3, [pc, #172]	; (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f003 020c 	and.w	r2, r3, #12
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	429a      	cmp	r2, r3
 800421a:	d1eb      	bne.n	80041f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800421c:	4b25      	ldr	r3, [pc, #148]	; (80042b4 <HAL_RCC_ClockConfig+0x1b8>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 030f 	and.w	r3, r3, #15
 8004224:	683a      	ldr	r2, [r7, #0]
 8004226:	429a      	cmp	r2, r3
 8004228:	d20c      	bcs.n	8004244 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800422a:	4b22      	ldr	r3, [pc, #136]	; (80042b4 <HAL_RCC_ClockConfig+0x1b8>)
 800422c:	683a      	ldr	r2, [r7, #0]
 800422e:	b2d2      	uxtb	r2, r2
 8004230:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004232:	4b20      	ldr	r3, [pc, #128]	; (80042b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 030f 	and.w	r3, r3, #15
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	429a      	cmp	r2, r3
 800423e:	d001      	beq.n	8004244 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e032      	b.n	80042aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	2b00      	cmp	r3, #0
 800424e:	d008      	beq.n	8004262 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004250:	4b19      	ldr	r3, [pc, #100]	; (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	4916      	ldr	r1, [pc, #88]	; (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 800425e:	4313      	orrs	r3, r2
 8004260:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0308 	and.w	r3, r3, #8
 800426a:	2b00      	cmp	r3, #0
 800426c:	d009      	beq.n	8004282 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800426e:	4b12      	ldr	r3, [pc, #72]	; (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	00db      	lsls	r3, r3, #3
 800427c:	490e      	ldr	r1, [pc, #56]	; (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 800427e:	4313      	orrs	r3, r2
 8004280:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004282:	f000 f821 	bl	80042c8 <HAL_RCC_GetSysClockFreq>
 8004286:	4601      	mov	r1, r0
 8004288:	4b0b      	ldr	r3, [pc, #44]	; (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	091b      	lsrs	r3, r3, #4
 800428e:	f003 030f 	and.w	r3, r3, #15
 8004292:	4a0a      	ldr	r2, [pc, #40]	; (80042bc <HAL_RCC_ClockConfig+0x1c0>)
 8004294:	5cd3      	ldrb	r3, [r2, r3]
 8004296:	fa21 f303 	lsr.w	r3, r1, r3
 800429a:	4a09      	ldr	r2, [pc, #36]	; (80042c0 <HAL_RCC_ClockConfig+0x1c4>)
 800429c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800429e:	4b09      	ldr	r3, [pc, #36]	; (80042c4 <HAL_RCC_ClockConfig+0x1c8>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f008 fc6e 	bl	800cb84 <HAL_InitTick>

  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3710      	adds	r7, #16
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	40023c00 	.word	0x40023c00
 80042b8:	40023800 	.word	0x40023800
 80042bc:	0800d704 	.word	0x0800d704
 80042c0:	20000040 	.word	0x20000040
 80042c4:	20000000 	.word	0x20000000

080042c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042ce:	2300      	movs	r3, #0
 80042d0:	607b      	str	r3, [r7, #4]
 80042d2:	2300      	movs	r3, #0
 80042d4:	60fb      	str	r3, [r7, #12]
 80042d6:	2300      	movs	r3, #0
 80042d8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80042da:	2300      	movs	r3, #0
 80042dc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042de:	4b63      	ldr	r3, [pc, #396]	; (800446c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f003 030c 	and.w	r3, r3, #12
 80042e6:	2b04      	cmp	r3, #4
 80042e8:	d007      	beq.n	80042fa <HAL_RCC_GetSysClockFreq+0x32>
 80042ea:	2b08      	cmp	r3, #8
 80042ec:	d008      	beq.n	8004300 <HAL_RCC_GetSysClockFreq+0x38>
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	f040 80b4 	bne.w	800445c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042f4:	4b5e      	ldr	r3, [pc, #376]	; (8004470 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80042f6:	60bb      	str	r3, [r7, #8]
       break;
 80042f8:	e0b3      	b.n	8004462 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042fa:	4b5e      	ldr	r3, [pc, #376]	; (8004474 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80042fc:	60bb      	str	r3, [r7, #8]
      break;
 80042fe:	e0b0      	b.n	8004462 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004300:	4b5a      	ldr	r3, [pc, #360]	; (800446c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004308:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800430a:	4b58      	ldr	r3, [pc, #352]	; (800446c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d04a      	beq.n	80043ac <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004316:	4b55      	ldr	r3, [pc, #340]	; (800446c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	099b      	lsrs	r3, r3, #6
 800431c:	f04f 0400 	mov.w	r4, #0
 8004320:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004324:	f04f 0200 	mov.w	r2, #0
 8004328:	ea03 0501 	and.w	r5, r3, r1
 800432c:	ea04 0602 	and.w	r6, r4, r2
 8004330:	4629      	mov	r1, r5
 8004332:	4632      	mov	r2, r6
 8004334:	f04f 0300 	mov.w	r3, #0
 8004338:	f04f 0400 	mov.w	r4, #0
 800433c:	0154      	lsls	r4, r2, #5
 800433e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004342:	014b      	lsls	r3, r1, #5
 8004344:	4619      	mov	r1, r3
 8004346:	4622      	mov	r2, r4
 8004348:	1b49      	subs	r1, r1, r5
 800434a:	eb62 0206 	sbc.w	r2, r2, r6
 800434e:	f04f 0300 	mov.w	r3, #0
 8004352:	f04f 0400 	mov.w	r4, #0
 8004356:	0194      	lsls	r4, r2, #6
 8004358:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800435c:	018b      	lsls	r3, r1, #6
 800435e:	1a5b      	subs	r3, r3, r1
 8004360:	eb64 0402 	sbc.w	r4, r4, r2
 8004364:	f04f 0100 	mov.w	r1, #0
 8004368:	f04f 0200 	mov.w	r2, #0
 800436c:	00e2      	lsls	r2, r4, #3
 800436e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004372:	00d9      	lsls	r1, r3, #3
 8004374:	460b      	mov	r3, r1
 8004376:	4614      	mov	r4, r2
 8004378:	195b      	adds	r3, r3, r5
 800437a:	eb44 0406 	adc.w	r4, r4, r6
 800437e:	f04f 0100 	mov.w	r1, #0
 8004382:	f04f 0200 	mov.w	r2, #0
 8004386:	0262      	lsls	r2, r4, #9
 8004388:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800438c:	0259      	lsls	r1, r3, #9
 800438e:	460b      	mov	r3, r1
 8004390:	4614      	mov	r4, r2
 8004392:	4618      	mov	r0, r3
 8004394:	4621      	mov	r1, r4
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f04f 0400 	mov.w	r4, #0
 800439c:	461a      	mov	r2, r3
 800439e:	4623      	mov	r3, r4
 80043a0:	f7fb ff2e 	bl	8000200 <__aeabi_uldivmod>
 80043a4:	4603      	mov	r3, r0
 80043a6:	460c      	mov	r4, r1
 80043a8:	60fb      	str	r3, [r7, #12]
 80043aa:	e049      	b.n	8004440 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043ac:	4b2f      	ldr	r3, [pc, #188]	; (800446c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	099b      	lsrs	r3, r3, #6
 80043b2:	f04f 0400 	mov.w	r4, #0
 80043b6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80043ba:	f04f 0200 	mov.w	r2, #0
 80043be:	ea03 0501 	and.w	r5, r3, r1
 80043c2:	ea04 0602 	and.w	r6, r4, r2
 80043c6:	4629      	mov	r1, r5
 80043c8:	4632      	mov	r2, r6
 80043ca:	f04f 0300 	mov.w	r3, #0
 80043ce:	f04f 0400 	mov.w	r4, #0
 80043d2:	0154      	lsls	r4, r2, #5
 80043d4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80043d8:	014b      	lsls	r3, r1, #5
 80043da:	4619      	mov	r1, r3
 80043dc:	4622      	mov	r2, r4
 80043de:	1b49      	subs	r1, r1, r5
 80043e0:	eb62 0206 	sbc.w	r2, r2, r6
 80043e4:	f04f 0300 	mov.w	r3, #0
 80043e8:	f04f 0400 	mov.w	r4, #0
 80043ec:	0194      	lsls	r4, r2, #6
 80043ee:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80043f2:	018b      	lsls	r3, r1, #6
 80043f4:	1a5b      	subs	r3, r3, r1
 80043f6:	eb64 0402 	sbc.w	r4, r4, r2
 80043fa:	f04f 0100 	mov.w	r1, #0
 80043fe:	f04f 0200 	mov.w	r2, #0
 8004402:	00e2      	lsls	r2, r4, #3
 8004404:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004408:	00d9      	lsls	r1, r3, #3
 800440a:	460b      	mov	r3, r1
 800440c:	4614      	mov	r4, r2
 800440e:	195b      	adds	r3, r3, r5
 8004410:	eb44 0406 	adc.w	r4, r4, r6
 8004414:	f04f 0100 	mov.w	r1, #0
 8004418:	f04f 0200 	mov.w	r2, #0
 800441c:	02a2      	lsls	r2, r4, #10
 800441e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004422:	0299      	lsls	r1, r3, #10
 8004424:	460b      	mov	r3, r1
 8004426:	4614      	mov	r4, r2
 8004428:	4618      	mov	r0, r3
 800442a:	4621      	mov	r1, r4
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f04f 0400 	mov.w	r4, #0
 8004432:	461a      	mov	r2, r3
 8004434:	4623      	mov	r3, r4
 8004436:	f7fb fee3 	bl	8000200 <__aeabi_uldivmod>
 800443a:	4603      	mov	r3, r0
 800443c:	460c      	mov	r4, r1
 800443e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004440:	4b0a      	ldr	r3, [pc, #40]	; (800446c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	0c1b      	lsrs	r3, r3, #16
 8004446:	f003 0303 	and.w	r3, r3, #3
 800444a:	3301      	adds	r3, #1
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	fbb2 f3f3 	udiv	r3, r2, r3
 8004458:	60bb      	str	r3, [r7, #8]
      break;
 800445a:	e002      	b.n	8004462 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800445c:	4b04      	ldr	r3, [pc, #16]	; (8004470 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800445e:	60bb      	str	r3, [r7, #8]
      break;
 8004460:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004462:	68bb      	ldr	r3, [r7, #8]
}
 8004464:	4618      	mov	r0, r3
 8004466:	3714      	adds	r7, #20
 8004468:	46bd      	mov	sp, r7
 800446a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800446c:	40023800 	.word	0x40023800
 8004470:	00f42400 	.word	0x00f42400
 8004474:	007a1200 	.word	0x007a1200

08004478 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004478:	b480      	push	{r7}
 800447a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800447c:	4b03      	ldr	r3, [pc, #12]	; (800448c <HAL_RCC_GetHCLKFreq+0x14>)
 800447e:	681b      	ldr	r3, [r3, #0]
}
 8004480:	4618      	mov	r0, r3
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	20000040 	.word	0x20000040

08004490 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004494:	f7ff fff0 	bl	8004478 <HAL_RCC_GetHCLKFreq>
 8004498:	4601      	mov	r1, r0
 800449a:	4b05      	ldr	r3, [pc, #20]	; (80044b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	0a9b      	lsrs	r3, r3, #10
 80044a0:	f003 0307 	and.w	r3, r3, #7
 80044a4:	4a03      	ldr	r2, [pc, #12]	; (80044b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044a6:	5cd3      	ldrb	r3, [r2, r3]
 80044a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	40023800 	.word	0x40023800
 80044b4:	0800d714 	.word	0x0800d714

080044b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80044bc:	f7ff ffdc 	bl	8004478 <HAL_RCC_GetHCLKFreq>
 80044c0:	4601      	mov	r1, r0
 80044c2:	4b05      	ldr	r3, [pc, #20]	; (80044d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	0b5b      	lsrs	r3, r3, #13
 80044c8:	f003 0307 	and.w	r3, r3, #7
 80044cc:	4a03      	ldr	r2, [pc, #12]	; (80044dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80044ce:	5cd3      	ldrb	r3, [r2, r3]
 80044d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	40023800 	.word	0x40023800
 80044dc:	0800d714 	.word	0x0800d714

080044e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	220f      	movs	r2, #15
 80044ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80044f0:	4b12      	ldr	r3, [pc, #72]	; (800453c <HAL_RCC_GetClockConfig+0x5c>)
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f003 0203 	and.w	r2, r3, #3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80044fc:	4b0f      	ldr	r3, [pc, #60]	; (800453c <HAL_RCC_GetClockConfig+0x5c>)
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004508:	4b0c      	ldr	r3, [pc, #48]	; (800453c <HAL_RCC_GetClockConfig+0x5c>)
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004514:	4b09      	ldr	r3, [pc, #36]	; (800453c <HAL_RCC_GetClockConfig+0x5c>)
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	08db      	lsrs	r3, r3, #3
 800451a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004522:	4b07      	ldr	r3, [pc, #28]	; (8004540 <HAL_RCC_GetClockConfig+0x60>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 020f 	and.w	r2, r3, #15
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	601a      	str	r2, [r3, #0]
}
 800452e:	bf00      	nop
 8004530:	370c      	adds	r7, #12
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	40023800 	.word	0x40023800
 8004540:	40023c00 	.word	0x40023c00

08004544 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800454c:	2300      	movs	r3, #0
 800454e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004550:	2300      	movs	r3, #0
 8004552:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10b      	bne.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004568:	2b00      	cmp	r3, #0
 800456a:	d105      	bne.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004574:	2b00      	cmp	r3, #0
 8004576:	d075      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004578:	4bad      	ldr	r3, [pc, #692]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800457a:	2200      	movs	r2, #0
 800457c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800457e:	f7fb fff5 	bl	800056c <HAL_GetTick>
 8004582:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004584:	e008      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004586:	f7fb fff1 	bl	800056c <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	2b02      	cmp	r3, #2
 8004592:	d901      	bls.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e18b      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004598:	4ba6      	ldr	r3, [pc, #664]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1f0      	bne.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0301 	and.w	r3, r3, #1
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d009      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	019a      	lsls	r2, r3, #6
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	071b      	lsls	r3, r3, #28
 80045bc:	499d      	ldr	r1, [pc, #628]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d01f      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80045d0:	4b98      	ldr	r3, [pc, #608]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80045d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045d6:	0f1b      	lsrs	r3, r3, #28
 80045d8:	f003 0307 	and.w	r3, r3, #7
 80045dc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	019a      	lsls	r2, r3, #6
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	061b      	lsls	r3, r3, #24
 80045ea:	431a      	orrs	r2, r3
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	071b      	lsls	r3, r3, #28
 80045f0:	4990      	ldr	r1, [pc, #576]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80045f8:	4b8e      	ldr	r3, [pc, #568]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80045fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045fe:	f023 021f 	bic.w	r2, r3, #31
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	69db      	ldr	r3, [r3, #28]
 8004606:	3b01      	subs	r3, #1
 8004608:	498a      	ldr	r1, [pc, #552]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800460a:	4313      	orrs	r3, r2
 800460c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00d      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	019a      	lsls	r2, r3, #6
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	061b      	lsls	r3, r3, #24
 8004628:	431a      	orrs	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	071b      	lsls	r3, r3, #28
 8004630:	4980      	ldr	r1, [pc, #512]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004632:	4313      	orrs	r3, r2
 8004634:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004638:	4b7d      	ldr	r3, [pc, #500]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800463a:	2201      	movs	r2, #1
 800463c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800463e:	f7fb ff95 	bl	800056c <HAL_GetTick>
 8004642:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004644:	e008      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004646:	f7fb ff91 	bl	800056c <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	2b02      	cmp	r3, #2
 8004652:	d901      	bls.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e12b      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004658:	4b76      	ldr	r3, [pc, #472]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d0f0      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0304 	and.w	r3, r3, #4
 800466c:	2b00      	cmp	r3, #0
 800466e:	d105      	bne.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004678:	2b00      	cmp	r3, #0
 800467a:	d079      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800467c:	4b6e      	ldr	r3, [pc, #440]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800467e:	2200      	movs	r2, #0
 8004680:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004682:	f7fb ff73 	bl	800056c <HAL_GetTick>
 8004686:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004688:	e008      	b.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800468a:	f7fb ff6f 	bl	800056c <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b02      	cmp	r3, #2
 8004696:	d901      	bls.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e109      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800469c:	4b65      	ldr	r3, [pc, #404]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046a8:	d0ef      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0304 	and.w	r3, r3, #4
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d020      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80046b6:	4b5f      	ldr	r3, [pc, #380]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80046b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046bc:	0f1b      	lsrs	r3, r3, #28
 80046be:	f003 0307 	and.w	r3, r3, #7
 80046c2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	019a      	lsls	r2, r3, #6
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	061b      	lsls	r3, r3, #24
 80046d0:	431a      	orrs	r2, r3
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	071b      	lsls	r3, r3, #28
 80046d6:	4957      	ldr	r1, [pc, #348]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80046de:	4b55      	ldr	r3, [pc, #340]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80046e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046e4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a1b      	ldr	r3, [r3, #32]
 80046ec:	3b01      	subs	r3, #1
 80046ee:	021b      	lsls	r3, r3, #8
 80046f0:	4950      	ldr	r1, [pc, #320]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0308 	and.w	r3, r3, #8
 8004700:	2b00      	cmp	r3, #0
 8004702:	d01e      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004704:	4b4b      	ldr	r3, [pc, #300]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800470a:	0e1b      	lsrs	r3, r3, #24
 800470c:	f003 030f 	and.w	r3, r3, #15
 8004710:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	019a      	lsls	r2, r3, #6
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	061b      	lsls	r3, r3, #24
 800471c:	431a      	orrs	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	071b      	lsls	r3, r3, #28
 8004724:	4943      	ldr	r1, [pc, #268]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004726:	4313      	orrs	r3, r2
 8004728:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800472c:	4b41      	ldr	r3, [pc, #260]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800472e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004732:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473a:	493e      	ldr	r1, [pc, #248]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800473c:	4313      	orrs	r3, r2
 800473e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004742:	4b3d      	ldr	r3, [pc, #244]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004744:	2201      	movs	r2, #1
 8004746:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004748:	f7fb ff10 	bl	800056c <HAL_GetTick>
 800474c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800474e:	e008      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004750:	f7fb ff0c 	bl	800056c <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b02      	cmp	r3, #2
 800475c:	d901      	bls.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e0a6      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004762:	4b34      	ldr	r3, [pc, #208]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800476a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800476e:	d1ef      	bne.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0320 	and.w	r3, r3, #32
 8004778:	2b00      	cmp	r3, #0
 800477a:	f000 808d 	beq.w	8004898 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800477e:	2300      	movs	r3, #0
 8004780:	60fb      	str	r3, [r7, #12]
 8004782:	4b2c      	ldr	r3, [pc, #176]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004786:	4a2b      	ldr	r2, [pc, #172]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800478c:	6413      	str	r3, [r2, #64]	; 0x40
 800478e:	4b29      	ldr	r3, [pc, #164]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004796:	60fb      	str	r3, [r7, #12]
 8004798:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800479a:	4b28      	ldr	r3, [pc, #160]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a27      	ldr	r2, [pc, #156]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80047a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047a4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80047a6:	f7fb fee1 	bl	800056c <HAL_GetTick>
 80047aa:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80047ac:	e008      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80047ae:	f7fb fedd 	bl	800056c <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d901      	bls.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e077      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80047c0:	4b1e      	ldr	r3, [pc, #120]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d0f0      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047cc:	4b19      	ldr	r3, [pc, #100]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80047ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047d4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d039      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d032      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047ea:	4b12      	ldr	r3, [pc, #72]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80047ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047f2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047f4:	4b12      	ldr	r3, [pc, #72]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80047f6:	2201      	movs	r2, #1
 80047f8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047fa:	4b11      	ldr	r3, [pc, #68]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004800:	4a0c      	ldr	r2, [pc, #48]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004806:	4b0b      	ldr	r3, [pc, #44]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b01      	cmp	r3, #1
 8004810:	d11e      	bne.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004812:	f7fb feab 	bl	800056c <HAL_GetTick>
 8004816:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004818:	e014      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800481a:	f7fb fea7 	bl	800056c <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	f241 3288 	movw	r2, #5000	; 0x1388
 8004828:	4293      	cmp	r3, r2
 800482a:	d90b      	bls.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e03f      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8004830:	42470068 	.word	0x42470068
 8004834:	40023800 	.word	0x40023800
 8004838:	42470070 	.word	0x42470070
 800483c:	40007000 	.word	0x40007000
 8004840:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004844:	4b1c      	ldr	r3, [pc, #112]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004848:	f003 0302 	and.w	r3, r3, #2
 800484c:	2b00      	cmp	r3, #0
 800484e:	d0e4      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004854:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004858:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800485c:	d10d      	bne.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x336>
 800485e:	4b16      	ldr	r3, [pc, #88]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800486e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004872:	4911      	ldr	r1, [pc, #68]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004874:	4313      	orrs	r3, r2
 8004876:	608b      	str	r3, [r1, #8]
 8004878:	e005      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800487a:	4b0f      	ldr	r3, [pc, #60]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	4a0e      	ldr	r2, [pc, #56]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004880:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004884:	6093      	str	r3, [r2, #8]
 8004886:	4b0c      	ldr	r3, [pc, #48]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004888:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004892:	4909      	ldr	r1, [pc, #36]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004894:	4313      	orrs	r3, r2
 8004896:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0310 	and.w	r3, r3, #16
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d004      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80048aa:	4b04      	ldr	r3, [pc, #16]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80048ac:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3718      	adds	r7, #24
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	40023800 	.word	0x40023800
 80048bc:	424711e0 	.word	0x424711e0

080048c0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d101      	bne.n	80048d4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e025      	b.n	8004920 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d106      	bne.n	80048ee <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f008 f941 	bl	800cb70 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2202      	movs	r2, #2
 80048f2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	3304      	adds	r3, #4
 80048fe:	4619      	mov	r1, r3
 8004900:	4610      	mov	r0, r2
 8004902:	f001 f83f 	bl	8005984 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6818      	ldr	r0, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	461a      	mov	r2, r3
 8004910:	6839      	ldr	r1, [r7, #0]
 8004912:	f001 f8aa 	bl	8005a6a <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3708      	adds	r7, #8
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d101      	bne.n	800493a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e056      	b.n	80049e8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004946:	b2db      	uxtb	r3, r3
 8004948:	2b00      	cmp	r3, #0
 800494a:	d106      	bne.n	800495a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f007 ffa3 	bl	800c8a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2202      	movs	r2, #2
 800495e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004970:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685a      	ldr	r2, [r3, #4]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	431a      	orrs	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	431a      	orrs	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	431a      	orrs	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	695b      	ldr	r3, [r3, #20]
 800498c:	431a      	orrs	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004996:	431a      	orrs	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	69db      	ldr	r3, [r3, #28]
 800499c:	431a      	orrs	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	ea42 0103 	orr.w	r1, r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	0c1b      	lsrs	r3, r3, #16
 80049b8:	f003 0104 	and.w	r1, r3, #4
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	430a      	orrs	r2, r1
 80049c6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	69da      	ldr	r2, [r3, #28]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049d6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2201      	movs	r2, #1
 80049e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3708      	adds	r7, #8
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e01d      	b.n	8004a3e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d106      	bne.n	8004a1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f007 ff8a 	bl	800c930 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2202      	movs	r2, #2
 8004a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	3304      	adds	r3, #4
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	4610      	mov	r0, r2
 8004a30:	f000 fa14 	bl	8004e5c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3708      	adds	r7, #8
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a46:	b480      	push	{r7}
 8004a48:	b085      	sub	sp, #20
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68da      	ldr	r2, [r3, #12]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f042 0201 	orr.w	r2, r2, #1
 8004a5c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f003 0307 	and.w	r3, r3, #7
 8004a68:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2b06      	cmp	r3, #6
 8004a6e:	d007      	beq.n	8004a80 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f042 0201 	orr.w	r2, r2, #1
 8004a7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3714      	adds	r7, #20
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b082      	sub	sp, #8
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d122      	bne.n	8004aea <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d11b      	bne.n	8004aea <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f06f 0202 	mvn.w	r2, #2
 8004aba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	699b      	ldr	r3, [r3, #24]
 8004ac8:	f003 0303 	and.w	r3, r3, #3
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d003      	beq.n	8004ad8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 f9a5 	bl	8004e20 <HAL_TIM_IC_CaptureCallback>
 8004ad6:	e005      	b.n	8004ae4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 f997 	bl	8004e0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 f9a8 	bl	8004e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	f003 0304 	and.w	r3, r3, #4
 8004af4:	2b04      	cmp	r3, #4
 8004af6:	d122      	bne.n	8004b3e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	f003 0304 	and.w	r3, r3, #4
 8004b02:	2b04      	cmp	r3, #4
 8004b04:	d11b      	bne.n	8004b3e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f06f 0204 	mvn.w	r2, #4
 8004b0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2202      	movs	r2, #2
 8004b14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d003      	beq.n	8004b2c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 f97b 	bl	8004e20 <HAL_TIM_IC_CaptureCallback>
 8004b2a:	e005      	b.n	8004b38 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f000 f96d 	bl	8004e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 f97e 	bl	8004e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	f003 0308 	and.w	r3, r3, #8
 8004b48:	2b08      	cmp	r3, #8
 8004b4a:	d122      	bne.n	8004b92 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	f003 0308 	and.w	r3, r3, #8
 8004b56:	2b08      	cmp	r3, #8
 8004b58:	d11b      	bne.n	8004b92 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f06f 0208 	mvn.w	r2, #8
 8004b62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2204      	movs	r2, #4
 8004b68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	69db      	ldr	r3, [r3, #28]
 8004b70:	f003 0303 	and.w	r3, r3, #3
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d003      	beq.n	8004b80 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 f951 	bl	8004e20 <HAL_TIM_IC_CaptureCallback>
 8004b7e:	e005      	b.n	8004b8c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 f943 	bl	8004e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 f954 	bl	8004e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	f003 0310 	and.w	r3, r3, #16
 8004b9c:	2b10      	cmp	r3, #16
 8004b9e:	d122      	bne.n	8004be6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	f003 0310 	and.w	r3, r3, #16
 8004baa:	2b10      	cmp	r3, #16
 8004bac:	d11b      	bne.n	8004be6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f06f 0210 	mvn.w	r2, #16
 8004bb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2208      	movs	r2, #8
 8004bbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	69db      	ldr	r3, [r3, #28]
 8004bc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d003      	beq.n	8004bd4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f000 f927 	bl	8004e20 <HAL_TIM_IC_CaptureCallback>
 8004bd2:	e005      	b.n	8004be0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 f919 	bl	8004e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 f92a 	bl	8004e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	f003 0301 	and.w	r3, r3, #1
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d10e      	bne.n	8004c12 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	f003 0301 	and.w	r3, r3, #1
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d107      	bne.n	8004c12 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f06f 0201 	mvn.w	r2, #1
 8004c0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f007 fc25 	bl	800c45c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c1c:	2b80      	cmp	r3, #128	; 0x80
 8004c1e:	d10e      	bne.n	8004c3e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c2a:	2b80      	cmp	r3, #128	; 0x80
 8004c2c:	d107      	bne.n	8004c3e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 facf 	bl	80051dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c48:	2b40      	cmp	r3, #64	; 0x40
 8004c4a:	d10e      	bne.n	8004c6a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c56:	2b40      	cmp	r3, #64	; 0x40
 8004c58:	d107      	bne.n	8004c6a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 f8ef 	bl	8004e48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	f003 0320 	and.w	r3, r3, #32
 8004c74:	2b20      	cmp	r3, #32
 8004c76:	d10e      	bne.n	8004c96 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	f003 0320 	and.w	r3, r3, #32
 8004c82:	2b20      	cmp	r3, #32
 8004c84:	d107      	bne.n	8004c96 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f06f 0220 	mvn.w	r2, #32
 8004c8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 fa99 	bl	80051c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c96:	bf00      	nop
 8004c98:	3708      	adds	r7, #8
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b084      	sub	sp, #16
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
 8004ca6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d101      	bne.n	8004cb6 <HAL_TIM_ConfigClockSource+0x18>
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	e0a6      	b.n	8004e04 <HAL_TIM_ConfigClockSource+0x166>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2202      	movs	r2, #2
 8004cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004cd4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cdc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2b40      	cmp	r3, #64	; 0x40
 8004cec:	d067      	beq.n	8004dbe <HAL_TIM_ConfigClockSource+0x120>
 8004cee:	2b40      	cmp	r3, #64	; 0x40
 8004cf0:	d80b      	bhi.n	8004d0a <HAL_TIM_ConfigClockSource+0x6c>
 8004cf2:	2b10      	cmp	r3, #16
 8004cf4:	d073      	beq.n	8004dde <HAL_TIM_ConfigClockSource+0x140>
 8004cf6:	2b10      	cmp	r3, #16
 8004cf8:	d802      	bhi.n	8004d00 <HAL_TIM_ConfigClockSource+0x62>
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d06f      	beq.n	8004dde <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004cfe:	e078      	b.n	8004df2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004d00:	2b20      	cmp	r3, #32
 8004d02:	d06c      	beq.n	8004dde <HAL_TIM_ConfigClockSource+0x140>
 8004d04:	2b30      	cmp	r3, #48	; 0x30
 8004d06:	d06a      	beq.n	8004dde <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004d08:	e073      	b.n	8004df2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004d0a:	2b70      	cmp	r3, #112	; 0x70
 8004d0c:	d00d      	beq.n	8004d2a <HAL_TIM_ConfigClockSource+0x8c>
 8004d0e:	2b70      	cmp	r3, #112	; 0x70
 8004d10:	d804      	bhi.n	8004d1c <HAL_TIM_ConfigClockSource+0x7e>
 8004d12:	2b50      	cmp	r3, #80	; 0x50
 8004d14:	d033      	beq.n	8004d7e <HAL_TIM_ConfigClockSource+0xe0>
 8004d16:	2b60      	cmp	r3, #96	; 0x60
 8004d18:	d041      	beq.n	8004d9e <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004d1a:	e06a      	b.n	8004df2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004d1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d20:	d066      	beq.n	8004df0 <HAL_TIM_ConfigClockSource+0x152>
 8004d22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d26:	d017      	beq.n	8004d58 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004d28:	e063      	b.n	8004df2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6818      	ldr	r0, [r3, #0]
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	6899      	ldr	r1, [r3, #8]
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	685a      	ldr	r2, [r3, #4]
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	f000 f9a9 	bl	8005090 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d4c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	609a      	str	r2, [r3, #8]
      break;
 8004d56:	e04c      	b.n	8004df2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6818      	ldr	r0, [r3, #0]
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	6899      	ldr	r1, [r3, #8]
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	685a      	ldr	r2, [r3, #4]
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	f000 f992 	bl	8005090 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	689a      	ldr	r2, [r3, #8]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d7a:	609a      	str	r2, [r3, #8]
      break;
 8004d7c:	e039      	b.n	8004df2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6818      	ldr	r0, [r3, #0]
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	6859      	ldr	r1, [r3, #4]
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	f000 f906 	bl	8004f9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2150      	movs	r1, #80	; 0x50
 8004d96:	4618      	mov	r0, r3
 8004d98:	f000 f95f 	bl	800505a <TIM_ITRx_SetConfig>
      break;
 8004d9c:	e029      	b.n	8004df2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6818      	ldr	r0, [r3, #0]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	6859      	ldr	r1, [r3, #4]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	461a      	mov	r2, r3
 8004dac:	f000 f925 	bl	8004ffa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2160      	movs	r1, #96	; 0x60
 8004db6:	4618      	mov	r0, r3
 8004db8:	f000 f94f 	bl	800505a <TIM_ITRx_SetConfig>
      break;
 8004dbc:	e019      	b.n	8004df2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6818      	ldr	r0, [r3, #0]
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	6859      	ldr	r1, [r3, #4]
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	f000 f8e6 	bl	8004f9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2140      	movs	r1, #64	; 0x40
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f000 f93f 	bl	800505a <TIM_ITRx_SetConfig>
      break;
 8004ddc:	e009      	b.n	8004df2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4619      	mov	r1, r3
 8004de8:	4610      	mov	r0, r2
 8004dea:	f000 f936 	bl	800505a <TIM_ITRx_SetConfig>
      break;
 8004dee:	e000      	b.n	8004df2 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004df0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2201      	movs	r2, #1
 8004df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3710      	adds	r7, #16
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e14:	bf00      	nop
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b085      	sub	sp, #20
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a40      	ldr	r2, [pc, #256]	; (8004f70 <TIM_Base_SetConfig+0x114>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d013      	beq.n	8004e9c <TIM_Base_SetConfig+0x40>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e7a:	d00f      	beq.n	8004e9c <TIM_Base_SetConfig+0x40>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a3d      	ldr	r2, [pc, #244]	; (8004f74 <TIM_Base_SetConfig+0x118>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d00b      	beq.n	8004e9c <TIM_Base_SetConfig+0x40>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a3c      	ldr	r2, [pc, #240]	; (8004f78 <TIM_Base_SetConfig+0x11c>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d007      	beq.n	8004e9c <TIM_Base_SetConfig+0x40>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a3b      	ldr	r2, [pc, #236]	; (8004f7c <TIM_Base_SetConfig+0x120>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d003      	beq.n	8004e9c <TIM_Base_SetConfig+0x40>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a3a      	ldr	r2, [pc, #232]	; (8004f80 <TIM_Base_SetConfig+0x124>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d108      	bne.n	8004eae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a2f      	ldr	r2, [pc, #188]	; (8004f70 <TIM_Base_SetConfig+0x114>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d02b      	beq.n	8004f0e <TIM_Base_SetConfig+0xb2>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ebc:	d027      	beq.n	8004f0e <TIM_Base_SetConfig+0xb2>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a2c      	ldr	r2, [pc, #176]	; (8004f74 <TIM_Base_SetConfig+0x118>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d023      	beq.n	8004f0e <TIM_Base_SetConfig+0xb2>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a2b      	ldr	r2, [pc, #172]	; (8004f78 <TIM_Base_SetConfig+0x11c>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d01f      	beq.n	8004f0e <TIM_Base_SetConfig+0xb2>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a2a      	ldr	r2, [pc, #168]	; (8004f7c <TIM_Base_SetConfig+0x120>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d01b      	beq.n	8004f0e <TIM_Base_SetConfig+0xb2>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a29      	ldr	r2, [pc, #164]	; (8004f80 <TIM_Base_SetConfig+0x124>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d017      	beq.n	8004f0e <TIM_Base_SetConfig+0xb2>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a28      	ldr	r2, [pc, #160]	; (8004f84 <TIM_Base_SetConfig+0x128>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d013      	beq.n	8004f0e <TIM_Base_SetConfig+0xb2>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a27      	ldr	r2, [pc, #156]	; (8004f88 <TIM_Base_SetConfig+0x12c>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d00f      	beq.n	8004f0e <TIM_Base_SetConfig+0xb2>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a26      	ldr	r2, [pc, #152]	; (8004f8c <TIM_Base_SetConfig+0x130>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d00b      	beq.n	8004f0e <TIM_Base_SetConfig+0xb2>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a25      	ldr	r2, [pc, #148]	; (8004f90 <TIM_Base_SetConfig+0x134>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d007      	beq.n	8004f0e <TIM_Base_SetConfig+0xb2>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a24      	ldr	r2, [pc, #144]	; (8004f94 <TIM_Base_SetConfig+0x138>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d003      	beq.n	8004f0e <TIM_Base_SetConfig+0xb2>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a23      	ldr	r2, [pc, #140]	; (8004f98 <TIM_Base_SetConfig+0x13c>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d108      	bne.n	8004f20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	689a      	ldr	r2, [r3, #8]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a0a      	ldr	r2, [pc, #40]	; (8004f70 <TIM_Base_SetConfig+0x114>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d003      	beq.n	8004f54 <TIM_Base_SetConfig+0xf8>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a0c      	ldr	r2, [pc, #48]	; (8004f80 <TIM_Base_SetConfig+0x124>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d103      	bne.n	8004f5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	691a      	ldr	r2, [r3, #16]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	615a      	str	r2, [r3, #20]
}
 8004f62:	bf00      	nop
 8004f64:	3714      	adds	r7, #20
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	40010000 	.word	0x40010000
 8004f74:	40000400 	.word	0x40000400
 8004f78:	40000800 	.word	0x40000800
 8004f7c:	40000c00 	.word	0x40000c00
 8004f80:	40010400 	.word	0x40010400
 8004f84:	40014000 	.word	0x40014000
 8004f88:	40014400 	.word	0x40014400
 8004f8c:	40014800 	.word	0x40014800
 8004f90:	40001800 	.word	0x40001800
 8004f94:	40001c00 	.word	0x40001c00
 8004f98:	40002000 	.word	0x40002000

08004f9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b087      	sub	sp, #28
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6a1b      	ldr	r3, [r3, #32]
 8004fac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6a1b      	ldr	r3, [r3, #32]
 8004fb2:	f023 0201 	bic.w	r2, r3, #1
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	011b      	lsls	r3, r3, #4
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	f023 030a 	bic.w	r3, r3, #10
 8004fd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004fda:	697a      	ldr	r2, [r7, #20]
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	697a      	ldr	r2, [r7, #20]
 8004fec:	621a      	str	r2, [r3, #32]
}
 8004fee:	bf00      	nop
 8004ff0:	371c      	adds	r7, #28
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr

08004ffa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ffa:	b480      	push	{r7}
 8004ffc:	b087      	sub	sp, #28
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	60f8      	str	r0, [r7, #12]
 8005002:	60b9      	str	r1, [r7, #8]
 8005004:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	f023 0210 	bic.w	r2, r3, #16
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6a1b      	ldr	r3, [r3, #32]
 800501c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005024:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	031b      	lsls	r3, r3, #12
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	4313      	orrs	r3, r2
 800502e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005036:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	011b      	lsls	r3, r3, #4
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	4313      	orrs	r3, r2
 8005040:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	697a      	ldr	r2, [r7, #20]
 8005046:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	693a      	ldr	r2, [r7, #16]
 800504c:	621a      	str	r2, [r3, #32]
}
 800504e:	bf00      	nop
 8005050:	371c      	adds	r7, #28
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800505a:	b480      	push	{r7}
 800505c:	b085      	sub	sp, #20
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
 8005062:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005070:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005072:	683a      	ldr	r2, [r7, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	4313      	orrs	r3, r2
 8005078:	f043 0307 	orr.w	r3, r3, #7
 800507c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	609a      	str	r2, [r3, #8]
}
 8005084:	bf00      	nop
 8005086:	3714      	adds	r7, #20
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005090:	b480      	push	{r7}
 8005092:	b087      	sub	sp, #28
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	607a      	str	r2, [r7, #4]
 800509c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	021a      	lsls	r2, r3, #8
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	431a      	orrs	r2, r3
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	609a      	str	r2, [r3, #8]
}
 80050c4:	bf00      	nop
 80050c6:	371c      	adds	r7, #28
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d101      	bne.n	80050e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050e4:	2302      	movs	r3, #2
 80050e6:	e05a      	b.n	800519e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2202      	movs	r2, #2
 80050f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800510e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	4313      	orrs	r3, r2
 8005118:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a21      	ldr	r2, [pc, #132]	; (80051ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d022      	beq.n	8005172 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005134:	d01d      	beq.n	8005172 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a1d      	ldr	r2, [pc, #116]	; (80051b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d018      	beq.n	8005172 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a1b      	ldr	r2, [pc, #108]	; (80051b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d013      	beq.n	8005172 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a1a      	ldr	r2, [pc, #104]	; (80051b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d00e      	beq.n	8005172 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a18      	ldr	r2, [pc, #96]	; (80051bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d009      	beq.n	8005172 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a17      	ldr	r2, [pc, #92]	; (80051c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d004      	beq.n	8005172 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a15      	ldr	r2, [pc, #84]	; (80051c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d10c      	bne.n	800518c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005178:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	4313      	orrs	r3, r2
 8005182:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68ba      	ldr	r2, [r7, #8]
 800518a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3714      	adds	r7, #20
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	40010000 	.word	0x40010000
 80051b0:	40000400 	.word	0x40000400
 80051b4:	40000800 	.word	0x40000800
 80051b8:	40000c00 	.word	0x40000c00
 80051bc:	40010400 	.word	0x40010400
 80051c0:	40014000 	.word	0x40014000
 80051c4:	40001800 	.word	0x40001800

080051c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d101      	bne.n	8005202 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e03f      	b.n	8005282 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d106      	bne.n	800521c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f007 fbd0 	bl	800c9bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2224      	movs	r2, #36	; 0x24
 8005220:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68da      	ldr	r2, [r3, #12]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005232:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 f829 	bl	800528c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	691a      	ldr	r2, [r3, #16]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005248:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	695a      	ldr	r2, [r3, #20]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005258:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68da      	ldr	r2, [r3, #12]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005268:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2220      	movs	r2, #32
 8005274:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2220      	movs	r2, #32
 800527c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3708      	adds	r7, #8
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
	...

0800528c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800528c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005290:	b085      	sub	sp, #20
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	68da      	ldr	r2, [r3, #12]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	430a      	orrs	r2, r1
 80052aa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	689a      	ldr	r2, [r3, #8]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	431a      	orrs	r2, r3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	431a      	orrs	r2, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	69db      	ldr	r3, [r3, #28]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80052ce:	f023 030c 	bic.w	r3, r3, #12
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	6812      	ldr	r2, [r2, #0]
 80052d6:	68f9      	ldr	r1, [r7, #12]
 80052d8:	430b      	orrs	r3, r1
 80052da:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	699a      	ldr	r2, [r3, #24]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	430a      	orrs	r2, r1
 80052f0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	69db      	ldr	r3, [r3, #28]
 80052f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052fa:	f040 818b 	bne.w	8005614 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4ac1      	ldr	r2, [pc, #772]	; (8005608 <UART_SetConfig+0x37c>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d005      	beq.n	8005314 <UART_SetConfig+0x88>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4abf      	ldr	r2, [pc, #764]	; (800560c <UART_SetConfig+0x380>)
 800530e:	4293      	cmp	r3, r2
 8005310:	f040 80bd 	bne.w	800548e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005314:	f7ff f8d0 	bl	80044b8 <HAL_RCC_GetPCLK2Freq>
 8005318:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	461d      	mov	r5, r3
 800531e:	f04f 0600 	mov.w	r6, #0
 8005322:	46a8      	mov	r8, r5
 8005324:	46b1      	mov	r9, r6
 8005326:	eb18 0308 	adds.w	r3, r8, r8
 800532a:	eb49 0409 	adc.w	r4, r9, r9
 800532e:	4698      	mov	r8, r3
 8005330:	46a1      	mov	r9, r4
 8005332:	eb18 0805 	adds.w	r8, r8, r5
 8005336:	eb49 0906 	adc.w	r9, r9, r6
 800533a:	f04f 0100 	mov.w	r1, #0
 800533e:	f04f 0200 	mov.w	r2, #0
 8005342:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005346:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800534a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800534e:	4688      	mov	r8, r1
 8005350:	4691      	mov	r9, r2
 8005352:	eb18 0005 	adds.w	r0, r8, r5
 8005356:	eb49 0106 	adc.w	r1, r9, r6
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	461d      	mov	r5, r3
 8005360:	f04f 0600 	mov.w	r6, #0
 8005364:	196b      	adds	r3, r5, r5
 8005366:	eb46 0406 	adc.w	r4, r6, r6
 800536a:	461a      	mov	r2, r3
 800536c:	4623      	mov	r3, r4
 800536e:	f7fa ff47 	bl	8000200 <__aeabi_uldivmod>
 8005372:	4603      	mov	r3, r0
 8005374:	460c      	mov	r4, r1
 8005376:	461a      	mov	r2, r3
 8005378:	4ba5      	ldr	r3, [pc, #660]	; (8005610 <UART_SetConfig+0x384>)
 800537a:	fba3 2302 	umull	r2, r3, r3, r2
 800537e:	095b      	lsrs	r3, r3, #5
 8005380:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	461d      	mov	r5, r3
 8005388:	f04f 0600 	mov.w	r6, #0
 800538c:	46a9      	mov	r9, r5
 800538e:	46b2      	mov	sl, r6
 8005390:	eb19 0309 	adds.w	r3, r9, r9
 8005394:	eb4a 040a 	adc.w	r4, sl, sl
 8005398:	4699      	mov	r9, r3
 800539a:	46a2      	mov	sl, r4
 800539c:	eb19 0905 	adds.w	r9, r9, r5
 80053a0:	eb4a 0a06 	adc.w	sl, sl, r6
 80053a4:	f04f 0100 	mov.w	r1, #0
 80053a8:	f04f 0200 	mov.w	r2, #0
 80053ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80053b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80053b8:	4689      	mov	r9, r1
 80053ba:	4692      	mov	sl, r2
 80053bc:	eb19 0005 	adds.w	r0, r9, r5
 80053c0:	eb4a 0106 	adc.w	r1, sl, r6
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	461d      	mov	r5, r3
 80053ca:	f04f 0600 	mov.w	r6, #0
 80053ce:	196b      	adds	r3, r5, r5
 80053d0:	eb46 0406 	adc.w	r4, r6, r6
 80053d4:	461a      	mov	r2, r3
 80053d6:	4623      	mov	r3, r4
 80053d8:	f7fa ff12 	bl	8000200 <__aeabi_uldivmod>
 80053dc:	4603      	mov	r3, r0
 80053de:	460c      	mov	r4, r1
 80053e0:	461a      	mov	r2, r3
 80053e2:	4b8b      	ldr	r3, [pc, #556]	; (8005610 <UART_SetConfig+0x384>)
 80053e4:	fba3 1302 	umull	r1, r3, r3, r2
 80053e8:	095b      	lsrs	r3, r3, #5
 80053ea:	2164      	movs	r1, #100	; 0x64
 80053ec:	fb01 f303 	mul.w	r3, r1, r3
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	00db      	lsls	r3, r3, #3
 80053f4:	3332      	adds	r3, #50	; 0x32
 80053f6:	4a86      	ldr	r2, [pc, #536]	; (8005610 <UART_SetConfig+0x384>)
 80053f8:	fba2 2303 	umull	r2, r3, r2, r3
 80053fc:	095b      	lsrs	r3, r3, #5
 80053fe:	005b      	lsls	r3, r3, #1
 8005400:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005404:	4498      	add	r8, r3
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	461d      	mov	r5, r3
 800540a:	f04f 0600 	mov.w	r6, #0
 800540e:	46a9      	mov	r9, r5
 8005410:	46b2      	mov	sl, r6
 8005412:	eb19 0309 	adds.w	r3, r9, r9
 8005416:	eb4a 040a 	adc.w	r4, sl, sl
 800541a:	4699      	mov	r9, r3
 800541c:	46a2      	mov	sl, r4
 800541e:	eb19 0905 	adds.w	r9, r9, r5
 8005422:	eb4a 0a06 	adc.w	sl, sl, r6
 8005426:	f04f 0100 	mov.w	r1, #0
 800542a:	f04f 0200 	mov.w	r2, #0
 800542e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005432:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005436:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800543a:	4689      	mov	r9, r1
 800543c:	4692      	mov	sl, r2
 800543e:	eb19 0005 	adds.w	r0, r9, r5
 8005442:	eb4a 0106 	adc.w	r1, sl, r6
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	461d      	mov	r5, r3
 800544c:	f04f 0600 	mov.w	r6, #0
 8005450:	196b      	adds	r3, r5, r5
 8005452:	eb46 0406 	adc.w	r4, r6, r6
 8005456:	461a      	mov	r2, r3
 8005458:	4623      	mov	r3, r4
 800545a:	f7fa fed1 	bl	8000200 <__aeabi_uldivmod>
 800545e:	4603      	mov	r3, r0
 8005460:	460c      	mov	r4, r1
 8005462:	461a      	mov	r2, r3
 8005464:	4b6a      	ldr	r3, [pc, #424]	; (8005610 <UART_SetConfig+0x384>)
 8005466:	fba3 1302 	umull	r1, r3, r3, r2
 800546a:	095b      	lsrs	r3, r3, #5
 800546c:	2164      	movs	r1, #100	; 0x64
 800546e:	fb01 f303 	mul.w	r3, r1, r3
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	00db      	lsls	r3, r3, #3
 8005476:	3332      	adds	r3, #50	; 0x32
 8005478:	4a65      	ldr	r2, [pc, #404]	; (8005610 <UART_SetConfig+0x384>)
 800547a:	fba2 2303 	umull	r2, r3, r2, r3
 800547e:	095b      	lsrs	r3, r3, #5
 8005480:	f003 0207 	and.w	r2, r3, #7
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4442      	add	r2, r8
 800548a:	609a      	str	r2, [r3, #8]
 800548c:	e26f      	b.n	800596e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800548e:	f7fe ffff 	bl	8004490 <HAL_RCC_GetPCLK1Freq>
 8005492:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	461d      	mov	r5, r3
 8005498:	f04f 0600 	mov.w	r6, #0
 800549c:	46a8      	mov	r8, r5
 800549e:	46b1      	mov	r9, r6
 80054a0:	eb18 0308 	adds.w	r3, r8, r8
 80054a4:	eb49 0409 	adc.w	r4, r9, r9
 80054a8:	4698      	mov	r8, r3
 80054aa:	46a1      	mov	r9, r4
 80054ac:	eb18 0805 	adds.w	r8, r8, r5
 80054b0:	eb49 0906 	adc.w	r9, r9, r6
 80054b4:	f04f 0100 	mov.w	r1, #0
 80054b8:	f04f 0200 	mov.w	r2, #0
 80054bc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80054c0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80054c4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80054c8:	4688      	mov	r8, r1
 80054ca:	4691      	mov	r9, r2
 80054cc:	eb18 0005 	adds.w	r0, r8, r5
 80054d0:	eb49 0106 	adc.w	r1, r9, r6
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	461d      	mov	r5, r3
 80054da:	f04f 0600 	mov.w	r6, #0
 80054de:	196b      	adds	r3, r5, r5
 80054e0:	eb46 0406 	adc.w	r4, r6, r6
 80054e4:	461a      	mov	r2, r3
 80054e6:	4623      	mov	r3, r4
 80054e8:	f7fa fe8a 	bl	8000200 <__aeabi_uldivmod>
 80054ec:	4603      	mov	r3, r0
 80054ee:	460c      	mov	r4, r1
 80054f0:	461a      	mov	r2, r3
 80054f2:	4b47      	ldr	r3, [pc, #284]	; (8005610 <UART_SetConfig+0x384>)
 80054f4:	fba3 2302 	umull	r2, r3, r3, r2
 80054f8:	095b      	lsrs	r3, r3, #5
 80054fa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	461d      	mov	r5, r3
 8005502:	f04f 0600 	mov.w	r6, #0
 8005506:	46a9      	mov	r9, r5
 8005508:	46b2      	mov	sl, r6
 800550a:	eb19 0309 	adds.w	r3, r9, r9
 800550e:	eb4a 040a 	adc.w	r4, sl, sl
 8005512:	4699      	mov	r9, r3
 8005514:	46a2      	mov	sl, r4
 8005516:	eb19 0905 	adds.w	r9, r9, r5
 800551a:	eb4a 0a06 	adc.w	sl, sl, r6
 800551e:	f04f 0100 	mov.w	r1, #0
 8005522:	f04f 0200 	mov.w	r2, #0
 8005526:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800552a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800552e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005532:	4689      	mov	r9, r1
 8005534:	4692      	mov	sl, r2
 8005536:	eb19 0005 	adds.w	r0, r9, r5
 800553a:	eb4a 0106 	adc.w	r1, sl, r6
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	461d      	mov	r5, r3
 8005544:	f04f 0600 	mov.w	r6, #0
 8005548:	196b      	adds	r3, r5, r5
 800554a:	eb46 0406 	adc.w	r4, r6, r6
 800554e:	461a      	mov	r2, r3
 8005550:	4623      	mov	r3, r4
 8005552:	f7fa fe55 	bl	8000200 <__aeabi_uldivmod>
 8005556:	4603      	mov	r3, r0
 8005558:	460c      	mov	r4, r1
 800555a:	461a      	mov	r2, r3
 800555c:	4b2c      	ldr	r3, [pc, #176]	; (8005610 <UART_SetConfig+0x384>)
 800555e:	fba3 1302 	umull	r1, r3, r3, r2
 8005562:	095b      	lsrs	r3, r3, #5
 8005564:	2164      	movs	r1, #100	; 0x64
 8005566:	fb01 f303 	mul.w	r3, r1, r3
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	00db      	lsls	r3, r3, #3
 800556e:	3332      	adds	r3, #50	; 0x32
 8005570:	4a27      	ldr	r2, [pc, #156]	; (8005610 <UART_SetConfig+0x384>)
 8005572:	fba2 2303 	umull	r2, r3, r2, r3
 8005576:	095b      	lsrs	r3, r3, #5
 8005578:	005b      	lsls	r3, r3, #1
 800557a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800557e:	4498      	add	r8, r3
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	461d      	mov	r5, r3
 8005584:	f04f 0600 	mov.w	r6, #0
 8005588:	46a9      	mov	r9, r5
 800558a:	46b2      	mov	sl, r6
 800558c:	eb19 0309 	adds.w	r3, r9, r9
 8005590:	eb4a 040a 	adc.w	r4, sl, sl
 8005594:	4699      	mov	r9, r3
 8005596:	46a2      	mov	sl, r4
 8005598:	eb19 0905 	adds.w	r9, r9, r5
 800559c:	eb4a 0a06 	adc.w	sl, sl, r6
 80055a0:	f04f 0100 	mov.w	r1, #0
 80055a4:	f04f 0200 	mov.w	r2, #0
 80055a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80055b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80055b4:	4689      	mov	r9, r1
 80055b6:	4692      	mov	sl, r2
 80055b8:	eb19 0005 	adds.w	r0, r9, r5
 80055bc:	eb4a 0106 	adc.w	r1, sl, r6
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	461d      	mov	r5, r3
 80055c6:	f04f 0600 	mov.w	r6, #0
 80055ca:	196b      	adds	r3, r5, r5
 80055cc:	eb46 0406 	adc.w	r4, r6, r6
 80055d0:	461a      	mov	r2, r3
 80055d2:	4623      	mov	r3, r4
 80055d4:	f7fa fe14 	bl	8000200 <__aeabi_uldivmod>
 80055d8:	4603      	mov	r3, r0
 80055da:	460c      	mov	r4, r1
 80055dc:	461a      	mov	r2, r3
 80055de:	4b0c      	ldr	r3, [pc, #48]	; (8005610 <UART_SetConfig+0x384>)
 80055e0:	fba3 1302 	umull	r1, r3, r3, r2
 80055e4:	095b      	lsrs	r3, r3, #5
 80055e6:	2164      	movs	r1, #100	; 0x64
 80055e8:	fb01 f303 	mul.w	r3, r1, r3
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	00db      	lsls	r3, r3, #3
 80055f0:	3332      	adds	r3, #50	; 0x32
 80055f2:	4a07      	ldr	r2, [pc, #28]	; (8005610 <UART_SetConfig+0x384>)
 80055f4:	fba2 2303 	umull	r2, r3, r2, r3
 80055f8:	095b      	lsrs	r3, r3, #5
 80055fa:	f003 0207 	and.w	r2, r3, #7
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4442      	add	r2, r8
 8005604:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005606:	e1b2      	b.n	800596e <UART_SetConfig+0x6e2>
 8005608:	40011000 	.word	0x40011000
 800560c:	40011400 	.word	0x40011400
 8005610:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4ad7      	ldr	r2, [pc, #860]	; (8005978 <UART_SetConfig+0x6ec>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d005      	beq.n	800562a <UART_SetConfig+0x39e>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4ad6      	ldr	r2, [pc, #856]	; (800597c <UART_SetConfig+0x6f0>)
 8005624:	4293      	cmp	r3, r2
 8005626:	f040 80d1 	bne.w	80057cc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800562a:	f7fe ff45 	bl	80044b8 <HAL_RCC_GetPCLK2Freq>
 800562e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	469a      	mov	sl, r3
 8005634:	f04f 0b00 	mov.w	fp, #0
 8005638:	46d0      	mov	r8, sl
 800563a:	46d9      	mov	r9, fp
 800563c:	eb18 0308 	adds.w	r3, r8, r8
 8005640:	eb49 0409 	adc.w	r4, r9, r9
 8005644:	4698      	mov	r8, r3
 8005646:	46a1      	mov	r9, r4
 8005648:	eb18 080a 	adds.w	r8, r8, sl
 800564c:	eb49 090b 	adc.w	r9, r9, fp
 8005650:	f04f 0100 	mov.w	r1, #0
 8005654:	f04f 0200 	mov.w	r2, #0
 8005658:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800565c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005660:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005664:	4688      	mov	r8, r1
 8005666:	4691      	mov	r9, r2
 8005668:	eb1a 0508 	adds.w	r5, sl, r8
 800566c:	eb4b 0609 	adc.w	r6, fp, r9
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	4619      	mov	r1, r3
 8005676:	f04f 0200 	mov.w	r2, #0
 800567a:	f04f 0300 	mov.w	r3, #0
 800567e:	f04f 0400 	mov.w	r4, #0
 8005682:	0094      	lsls	r4, r2, #2
 8005684:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005688:	008b      	lsls	r3, r1, #2
 800568a:	461a      	mov	r2, r3
 800568c:	4623      	mov	r3, r4
 800568e:	4628      	mov	r0, r5
 8005690:	4631      	mov	r1, r6
 8005692:	f7fa fdb5 	bl	8000200 <__aeabi_uldivmod>
 8005696:	4603      	mov	r3, r0
 8005698:	460c      	mov	r4, r1
 800569a:	461a      	mov	r2, r3
 800569c:	4bb8      	ldr	r3, [pc, #736]	; (8005980 <UART_SetConfig+0x6f4>)
 800569e:	fba3 2302 	umull	r2, r3, r3, r2
 80056a2:	095b      	lsrs	r3, r3, #5
 80056a4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	469b      	mov	fp, r3
 80056ac:	f04f 0c00 	mov.w	ip, #0
 80056b0:	46d9      	mov	r9, fp
 80056b2:	46e2      	mov	sl, ip
 80056b4:	eb19 0309 	adds.w	r3, r9, r9
 80056b8:	eb4a 040a 	adc.w	r4, sl, sl
 80056bc:	4699      	mov	r9, r3
 80056be:	46a2      	mov	sl, r4
 80056c0:	eb19 090b 	adds.w	r9, r9, fp
 80056c4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80056c8:	f04f 0100 	mov.w	r1, #0
 80056cc:	f04f 0200 	mov.w	r2, #0
 80056d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80056d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80056dc:	4689      	mov	r9, r1
 80056de:	4692      	mov	sl, r2
 80056e0:	eb1b 0509 	adds.w	r5, fp, r9
 80056e4:	eb4c 060a 	adc.w	r6, ip, sl
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	4619      	mov	r1, r3
 80056ee:	f04f 0200 	mov.w	r2, #0
 80056f2:	f04f 0300 	mov.w	r3, #0
 80056f6:	f04f 0400 	mov.w	r4, #0
 80056fa:	0094      	lsls	r4, r2, #2
 80056fc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005700:	008b      	lsls	r3, r1, #2
 8005702:	461a      	mov	r2, r3
 8005704:	4623      	mov	r3, r4
 8005706:	4628      	mov	r0, r5
 8005708:	4631      	mov	r1, r6
 800570a:	f7fa fd79 	bl	8000200 <__aeabi_uldivmod>
 800570e:	4603      	mov	r3, r0
 8005710:	460c      	mov	r4, r1
 8005712:	461a      	mov	r2, r3
 8005714:	4b9a      	ldr	r3, [pc, #616]	; (8005980 <UART_SetConfig+0x6f4>)
 8005716:	fba3 1302 	umull	r1, r3, r3, r2
 800571a:	095b      	lsrs	r3, r3, #5
 800571c:	2164      	movs	r1, #100	; 0x64
 800571e:	fb01 f303 	mul.w	r3, r1, r3
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	011b      	lsls	r3, r3, #4
 8005726:	3332      	adds	r3, #50	; 0x32
 8005728:	4a95      	ldr	r2, [pc, #596]	; (8005980 <UART_SetConfig+0x6f4>)
 800572a:	fba2 2303 	umull	r2, r3, r2, r3
 800572e:	095b      	lsrs	r3, r3, #5
 8005730:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005734:	4498      	add	r8, r3
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	469b      	mov	fp, r3
 800573a:	f04f 0c00 	mov.w	ip, #0
 800573e:	46d9      	mov	r9, fp
 8005740:	46e2      	mov	sl, ip
 8005742:	eb19 0309 	adds.w	r3, r9, r9
 8005746:	eb4a 040a 	adc.w	r4, sl, sl
 800574a:	4699      	mov	r9, r3
 800574c:	46a2      	mov	sl, r4
 800574e:	eb19 090b 	adds.w	r9, r9, fp
 8005752:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005756:	f04f 0100 	mov.w	r1, #0
 800575a:	f04f 0200 	mov.w	r2, #0
 800575e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005762:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005766:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800576a:	4689      	mov	r9, r1
 800576c:	4692      	mov	sl, r2
 800576e:	eb1b 0509 	adds.w	r5, fp, r9
 8005772:	eb4c 060a 	adc.w	r6, ip, sl
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	4619      	mov	r1, r3
 800577c:	f04f 0200 	mov.w	r2, #0
 8005780:	f04f 0300 	mov.w	r3, #0
 8005784:	f04f 0400 	mov.w	r4, #0
 8005788:	0094      	lsls	r4, r2, #2
 800578a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800578e:	008b      	lsls	r3, r1, #2
 8005790:	461a      	mov	r2, r3
 8005792:	4623      	mov	r3, r4
 8005794:	4628      	mov	r0, r5
 8005796:	4631      	mov	r1, r6
 8005798:	f7fa fd32 	bl	8000200 <__aeabi_uldivmod>
 800579c:	4603      	mov	r3, r0
 800579e:	460c      	mov	r4, r1
 80057a0:	461a      	mov	r2, r3
 80057a2:	4b77      	ldr	r3, [pc, #476]	; (8005980 <UART_SetConfig+0x6f4>)
 80057a4:	fba3 1302 	umull	r1, r3, r3, r2
 80057a8:	095b      	lsrs	r3, r3, #5
 80057aa:	2164      	movs	r1, #100	; 0x64
 80057ac:	fb01 f303 	mul.w	r3, r1, r3
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	011b      	lsls	r3, r3, #4
 80057b4:	3332      	adds	r3, #50	; 0x32
 80057b6:	4a72      	ldr	r2, [pc, #456]	; (8005980 <UART_SetConfig+0x6f4>)
 80057b8:	fba2 2303 	umull	r2, r3, r2, r3
 80057bc:	095b      	lsrs	r3, r3, #5
 80057be:	f003 020f 	and.w	r2, r3, #15
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4442      	add	r2, r8
 80057c8:	609a      	str	r2, [r3, #8]
 80057ca:	e0d0      	b.n	800596e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80057cc:	f7fe fe60 	bl	8004490 <HAL_RCC_GetPCLK1Freq>
 80057d0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	469a      	mov	sl, r3
 80057d6:	f04f 0b00 	mov.w	fp, #0
 80057da:	46d0      	mov	r8, sl
 80057dc:	46d9      	mov	r9, fp
 80057de:	eb18 0308 	adds.w	r3, r8, r8
 80057e2:	eb49 0409 	adc.w	r4, r9, r9
 80057e6:	4698      	mov	r8, r3
 80057e8:	46a1      	mov	r9, r4
 80057ea:	eb18 080a 	adds.w	r8, r8, sl
 80057ee:	eb49 090b 	adc.w	r9, r9, fp
 80057f2:	f04f 0100 	mov.w	r1, #0
 80057f6:	f04f 0200 	mov.w	r2, #0
 80057fa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80057fe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005802:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005806:	4688      	mov	r8, r1
 8005808:	4691      	mov	r9, r2
 800580a:	eb1a 0508 	adds.w	r5, sl, r8
 800580e:	eb4b 0609 	adc.w	r6, fp, r9
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	4619      	mov	r1, r3
 8005818:	f04f 0200 	mov.w	r2, #0
 800581c:	f04f 0300 	mov.w	r3, #0
 8005820:	f04f 0400 	mov.w	r4, #0
 8005824:	0094      	lsls	r4, r2, #2
 8005826:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800582a:	008b      	lsls	r3, r1, #2
 800582c:	461a      	mov	r2, r3
 800582e:	4623      	mov	r3, r4
 8005830:	4628      	mov	r0, r5
 8005832:	4631      	mov	r1, r6
 8005834:	f7fa fce4 	bl	8000200 <__aeabi_uldivmod>
 8005838:	4603      	mov	r3, r0
 800583a:	460c      	mov	r4, r1
 800583c:	461a      	mov	r2, r3
 800583e:	4b50      	ldr	r3, [pc, #320]	; (8005980 <UART_SetConfig+0x6f4>)
 8005840:	fba3 2302 	umull	r2, r3, r3, r2
 8005844:	095b      	lsrs	r3, r3, #5
 8005846:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	469b      	mov	fp, r3
 800584e:	f04f 0c00 	mov.w	ip, #0
 8005852:	46d9      	mov	r9, fp
 8005854:	46e2      	mov	sl, ip
 8005856:	eb19 0309 	adds.w	r3, r9, r9
 800585a:	eb4a 040a 	adc.w	r4, sl, sl
 800585e:	4699      	mov	r9, r3
 8005860:	46a2      	mov	sl, r4
 8005862:	eb19 090b 	adds.w	r9, r9, fp
 8005866:	eb4a 0a0c 	adc.w	sl, sl, ip
 800586a:	f04f 0100 	mov.w	r1, #0
 800586e:	f04f 0200 	mov.w	r2, #0
 8005872:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005876:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800587a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800587e:	4689      	mov	r9, r1
 8005880:	4692      	mov	sl, r2
 8005882:	eb1b 0509 	adds.w	r5, fp, r9
 8005886:	eb4c 060a 	adc.w	r6, ip, sl
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	4619      	mov	r1, r3
 8005890:	f04f 0200 	mov.w	r2, #0
 8005894:	f04f 0300 	mov.w	r3, #0
 8005898:	f04f 0400 	mov.w	r4, #0
 800589c:	0094      	lsls	r4, r2, #2
 800589e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80058a2:	008b      	lsls	r3, r1, #2
 80058a4:	461a      	mov	r2, r3
 80058a6:	4623      	mov	r3, r4
 80058a8:	4628      	mov	r0, r5
 80058aa:	4631      	mov	r1, r6
 80058ac:	f7fa fca8 	bl	8000200 <__aeabi_uldivmod>
 80058b0:	4603      	mov	r3, r0
 80058b2:	460c      	mov	r4, r1
 80058b4:	461a      	mov	r2, r3
 80058b6:	4b32      	ldr	r3, [pc, #200]	; (8005980 <UART_SetConfig+0x6f4>)
 80058b8:	fba3 1302 	umull	r1, r3, r3, r2
 80058bc:	095b      	lsrs	r3, r3, #5
 80058be:	2164      	movs	r1, #100	; 0x64
 80058c0:	fb01 f303 	mul.w	r3, r1, r3
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	011b      	lsls	r3, r3, #4
 80058c8:	3332      	adds	r3, #50	; 0x32
 80058ca:	4a2d      	ldr	r2, [pc, #180]	; (8005980 <UART_SetConfig+0x6f4>)
 80058cc:	fba2 2303 	umull	r2, r3, r2, r3
 80058d0:	095b      	lsrs	r3, r3, #5
 80058d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058d6:	4498      	add	r8, r3
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	469b      	mov	fp, r3
 80058dc:	f04f 0c00 	mov.w	ip, #0
 80058e0:	46d9      	mov	r9, fp
 80058e2:	46e2      	mov	sl, ip
 80058e4:	eb19 0309 	adds.w	r3, r9, r9
 80058e8:	eb4a 040a 	adc.w	r4, sl, sl
 80058ec:	4699      	mov	r9, r3
 80058ee:	46a2      	mov	sl, r4
 80058f0:	eb19 090b 	adds.w	r9, r9, fp
 80058f4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80058f8:	f04f 0100 	mov.w	r1, #0
 80058fc:	f04f 0200 	mov.w	r2, #0
 8005900:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005904:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005908:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800590c:	4689      	mov	r9, r1
 800590e:	4692      	mov	sl, r2
 8005910:	eb1b 0509 	adds.w	r5, fp, r9
 8005914:	eb4c 060a 	adc.w	r6, ip, sl
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	4619      	mov	r1, r3
 800591e:	f04f 0200 	mov.w	r2, #0
 8005922:	f04f 0300 	mov.w	r3, #0
 8005926:	f04f 0400 	mov.w	r4, #0
 800592a:	0094      	lsls	r4, r2, #2
 800592c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005930:	008b      	lsls	r3, r1, #2
 8005932:	461a      	mov	r2, r3
 8005934:	4623      	mov	r3, r4
 8005936:	4628      	mov	r0, r5
 8005938:	4631      	mov	r1, r6
 800593a:	f7fa fc61 	bl	8000200 <__aeabi_uldivmod>
 800593e:	4603      	mov	r3, r0
 8005940:	460c      	mov	r4, r1
 8005942:	461a      	mov	r2, r3
 8005944:	4b0e      	ldr	r3, [pc, #56]	; (8005980 <UART_SetConfig+0x6f4>)
 8005946:	fba3 1302 	umull	r1, r3, r3, r2
 800594a:	095b      	lsrs	r3, r3, #5
 800594c:	2164      	movs	r1, #100	; 0x64
 800594e:	fb01 f303 	mul.w	r3, r1, r3
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	011b      	lsls	r3, r3, #4
 8005956:	3332      	adds	r3, #50	; 0x32
 8005958:	4a09      	ldr	r2, [pc, #36]	; (8005980 <UART_SetConfig+0x6f4>)
 800595a:	fba2 2303 	umull	r2, r3, r2, r3
 800595e:	095b      	lsrs	r3, r3, #5
 8005960:	f003 020f 	and.w	r2, r3, #15
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4442      	add	r2, r8
 800596a:	609a      	str	r2, [r3, #8]
}
 800596c:	e7ff      	b.n	800596e <UART_SetConfig+0x6e2>
 800596e:	bf00      	nop
 8005970:	3714      	adds	r7, #20
 8005972:	46bd      	mov	sp, r7
 8005974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005978:	40011000 	.word	0x40011000
 800597c:	40011400 	.word	0x40011400
 8005980:	51eb851f 	.word	0x51eb851f

08005984 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800598e:	2300      	movs	r3, #0
 8005990:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8005992:	2300      	movs	r3, #0
 8005994:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2b01      	cmp	r3, #1
 800599c:	d029      	beq.n	80059f2 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80059aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80059ae:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80059b8:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80059be:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80059c4:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80059ca:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80059d0:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 80059d6:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 80059dc:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 80059e2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	601a      	str	r2, [r3, #0]
 80059f0:	e034      	b.n	8005a5c <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059fe:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005a08:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8005a0e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005a22:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005a26:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005a30:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8005a36:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8005a3c:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8005a42:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8005a48:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005a4a:	68ba      	ldr	r2, [r7, #8]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3714      	adds	r7, #20
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr

08005a6a <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005a6a:	b480      	push	{r7}
 8005a6c:	b087      	sub	sp, #28
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	60f8      	str	r0, [r7, #12]
 8005a72:	60b9      	str	r1, [r7, #8]
 8005a74:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8005a76:	2300      	movs	r3, #0
 8005a78:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d02e      	beq.n	8005ae2 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005a90:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8005aa0:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	3b01      	subs	r3, #1
 8005aa8:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8005aaa:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8005ab4:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	3b01      	subs	r3, #1
 8005abc:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005abe:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	695b      	ldr	r3, [r3, #20]
 8005ac4:	3b01      	subs	r3, #1
 8005ac6:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8005ac8:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	697a      	ldr	r2, [r7, #20]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	697a      	ldr	r2, [r7, #20]
 8005ade:	609a      	str	r2, [r3, #8]
 8005ae0:	e03b      	b.n	8005b5a <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005aee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005af2:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	3b01      	subs	r3, #1
 8005afa:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	695b      	ldr	r3, [r3, #20]
 8005b00:	3b01      	subs	r3, #1
 8005b02:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005b04:	4313      	orrs	r3, r2
 8005b06:	697a      	ldr	r2, [r7, #20]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005b18:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	3b01      	subs	r3, #1
 8005b26:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005b28:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	3b01      	subs	r3, #1
 8005b30:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8005b32:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8005b3c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	3b01      	subs	r3, #1
 8005b44:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005b46:	4313      	orrs	r3, r2
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	697a      	ldr	r2, [r7, #20]
 8005b52:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	371c      	adds	r7, #28
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b68:	b084      	sub	sp, #16
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b084      	sub	sp, #16
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
 8005b72:	f107 001c 	add.w	r0, r7, #28
 8005b76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d122      	bne.n	8005bc6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005b94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005ba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d105      	bne.n	8005bba <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 f94a 	bl	8005e54 <USB_CoreReset>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	73fb      	strb	r3, [r7, #15]
 8005bc4:	e01a      	b.n	8005bfc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 f93e 	bl	8005e54 <USB_CoreReset>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005bdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d106      	bne.n	8005bf0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	639a      	str	r2, [r3, #56]	; 0x38
 8005bee:	e005      	b.n	8005bfc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d10b      	bne.n	8005c1a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	f043 0206 	orr.w	r2, r3, #6
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	f043 0220 	orr.w	r2, r3, #32
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3710      	adds	r7, #16
 8005c20:	46bd      	mov	sp, r7
 8005c22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c26:	b004      	add	sp, #16
 8005c28:	4770      	bx	lr

08005c2a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c2a:	b480      	push	{r7}
 8005c2c:	b083      	sub	sp, #12
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f043 0201 	orr.w	r2, r3, #1
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	370c      	adds	r7, #12
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	f023 0201 	bic.w	r2, r3, #1
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	370c      	adds	r7, #12
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr

08005c6e <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b082      	sub	sp, #8
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
 8005c76:	460b      	mov	r3, r1
 8005c78:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005c86:	78fb      	ldrb	r3, [r7, #3]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d106      	bne.n	8005c9a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	60da      	str	r2, [r3, #12]
 8005c98:	e00b      	b.n	8005cb2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005c9a:	78fb      	ldrb	r3, [r7, #3]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d106      	bne.n	8005cae <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	60da      	str	r2, [r3, #12]
 8005cac:	e001      	b.n	8005cb2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e003      	b.n	8005cba <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005cb2:	2032      	movs	r0, #50	; 0x32
 8005cb4:	f7fa fc66 	bl	8000584 <HAL_Delay>

  return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3708      	adds	r7, #8
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
	...

08005cc4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	019b      	lsls	r3, r3, #6
 8005cd6:	f043 0220 	orr.w	r2, r3, #32
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	60fb      	str	r3, [r7, #12]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	4a09      	ldr	r2, [pc, #36]	; (8005d0c <USB_FlushTxFifo+0x48>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d901      	bls.n	8005cf0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005cec:	2303      	movs	r3, #3
 8005cee:	e006      	b.n	8005cfe <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	f003 0320 	and.w	r3, r3, #32
 8005cf8:	2b20      	cmp	r3, #32
 8005cfa:	d0f0      	beq.n	8005cde <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3714      	adds	r7, #20
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	00030d40 	.word	0x00030d40

08005d10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2210      	movs	r2, #16
 8005d20:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	3301      	adds	r3, #1
 8005d26:	60fb      	str	r3, [r7, #12]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	4a09      	ldr	r2, [pc, #36]	; (8005d50 <USB_FlushRxFifo+0x40>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d901      	bls.n	8005d34 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005d30:	2303      	movs	r3, #3
 8005d32:	e006      	b.n	8005d42 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	f003 0310 	and.w	r3, r3, #16
 8005d3c:	2b10      	cmp	r3, #16
 8005d3e:	d0f0      	beq.n	8005d22 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005d40:	2300      	movs	r3, #0
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3714      	adds	r7, #20
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	00030d40 	.word	0x00030d40

08005d54 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b089      	sub	sp, #36	; 0x24
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	4611      	mov	r1, r2
 8005d60:	461a      	mov	r2, r3
 8005d62:	460b      	mov	r3, r1
 8005d64:	71fb      	strb	r3, [r7, #7]
 8005d66:	4613      	mov	r3, r2
 8005d68:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005d72:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d11a      	bne.n	8005db0 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005d7a:	88bb      	ldrh	r3, [r7, #4]
 8005d7c:	3303      	adds	r3, #3
 8005d7e:	089b      	lsrs	r3, r3, #2
 8005d80:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005d82:	2300      	movs	r3, #0
 8005d84:	61bb      	str	r3, [r7, #24]
 8005d86:	e00f      	b.n	8005da8 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005d88:	79fb      	ldrb	r3, [r7, #7]
 8005d8a:	031a      	lsls	r2, r3, #12
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	4413      	add	r3, r2
 8005d90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d94:	461a      	mov	r2, r3
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	3304      	adds	r3, #4
 8005da0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	3301      	adds	r3, #1
 8005da6:	61bb      	str	r3, [r7, #24]
 8005da8:	69ba      	ldr	r2, [r7, #24]
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d3eb      	bcc.n	8005d88 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3724      	adds	r7, #36	; 0x24
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr

08005dbe <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005dbe:	b480      	push	{r7}
 8005dc0:	b089      	sub	sp, #36	; 0x24
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	60f8      	str	r0, [r7, #12]
 8005dc6:	60b9      	str	r1, [r7, #8]
 8005dc8:	4613      	mov	r3, r2
 8005dca:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005dd4:	88fb      	ldrh	r3, [r7, #6]
 8005dd6:	3303      	adds	r3, #3
 8005dd8:	089b      	lsrs	r3, r3, #2
 8005dda:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005ddc:	2300      	movs	r3, #0
 8005dde:	61bb      	str	r3, [r7, #24]
 8005de0:	e00b      	b.n	8005dfa <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	601a      	str	r2, [r3, #0]
    pDest++;
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	3304      	adds	r3, #4
 8005df2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	3301      	adds	r3, #1
 8005df8:	61bb      	str	r3, [r7, #24]
 8005dfa:	69ba      	ldr	r2, [r7, #24]
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d3ef      	bcc.n	8005de2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005e02:	69fb      	ldr	r3, [r7, #28]
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3724      	adds	r7, #36	; 0x24
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b085      	sub	sp, #20
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	695b      	ldr	r3, [r3, #20]
 8005e1c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	699b      	ldr	r3, [r3, #24]
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	4013      	ands	r3, r2
 8005e26:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005e28:	68fb      	ldr	r3, [r7, #12]
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3714      	adds	r7, #20
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr

08005e36 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005e36:	b480      	push	{r7}
 8005e38:	b083      	sub	sp, #12
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	f003 0301 	and.w	r3, r3, #1
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	370c      	adds	r7, #12
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
	...

08005e54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	3301      	adds	r3, #1
 8005e64:	60fb      	str	r3, [r7, #12]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	4a13      	ldr	r2, [pc, #76]	; (8005eb8 <USB_CoreReset+0x64>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d901      	bls.n	8005e72 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e01b      	b.n	8005eaa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	daf2      	bge.n	8005e60 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	f043 0201 	orr.w	r2, r3, #1
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	60fb      	str	r3, [r7, #12]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	4a09      	ldr	r2, [pc, #36]	; (8005eb8 <USB_CoreReset+0x64>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d901      	bls.n	8005e9c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	e006      	b.n	8005eaa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	691b      	ldr	r3, [r3, #16]
 8005ea0:	f003 0301 	and.w	r3, r3, #1
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d0f0      	beq.n	8005e8a <USB_CoreReset+0x36>

  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3714      	adds	r7, #20
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop
 8005eb8:	00030d40 	.word	0x00030d40

08005ebc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ebc:	b084      	sub	sp, #16
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b084      	sub	sp, #16
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
 8005ec6:	f107 001c 	add.w	r0, r7, #28
 8005eca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ed8:	461a      	mov	r2, r3
 8005eda:	2300      	movs	r3, #0
 8005edc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eee:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efa:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d018      	beq.n	8005f40 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d10a      	bne.n	8005f2a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	68ba      	ldr	r2, [r7, #8]
 8005f1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f22:	f043 0304 	orr.w	r3, r3, #4
 8005f26:	6013      	str	r3, [r2, #0]
 8005f28:	e014      	b.n	8005f54 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68ba      	ldr	r2, [r7, #8]
 8005f34:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f38:	f023 0304 	bic.w	r3, r3, #4
 8005f3c:	6013      	str	r3, [r2, #0]
 8005f3e:	e009      	b.n	8005f54 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68ba      	ldr	r2, [r7, #8]
 8005f4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f4e:	f023 0304 	bic.w	r3, r3, #4
 8005f52:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005f54:	2110      	movs	r1, #16
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f7ff feb4 	bl	8005cc4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f7ff fed7 	bl	8005d10 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005f62:	2300      	movs	r3, #0
 8005f64:	60fb      	str	r3, [r7, #12]
 8005f66:	e015      	b.n	8005f94 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	015a      	lsls	r2, r3, #5
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	4413      	add	r3, r2
 8005f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f74:	461a      	mov	r2, r3
 8005f76:	f04f 33ff 	mov.w	r3, #4294967295
 8005f7a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	015a      	lsls	r2, r3, #5
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	4413      	add	r3, r2
 8005f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f88:	461a      	mov	r2, r3
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	3301      	adds	r3, #1
 8005f92:	60fb      	str	r3, [r7, #12]
 8005f94:	6a3b      	ldr	r3, [r7, #32]
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d3e5      	bcc.n	8005f68 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8005f9c:	2101      	movs	r1, #1
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 f8ac 	bl	80060fc <USB_DriveVbus>

  HAL_Delay(200U);
 8005fa4:	20c8      	movs	r0, #200	; 0xc8
 8005fa6:	f7fa faed 	bl	8000584 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8005fb6:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d00b      	beq.n	8005fdc <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fca:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a14      	ldr	r2, [pc, #80]	; (8006020 <USB_HostInit+0x164>)
 8005fd0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a13      	ldr	r2, [pc, #76]	; (8006024 <USB_HostInit+0x168>)
 8005fd6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005fda:	e009      	b.n	8005ff0 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2280      	movs	r2, #128	; 0x80
 8005fe0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a10      	ldr	r2, [pc, #64]	; (8006028 <USB_HostInit+0x16c>)
 8005fe6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a10      	ldr	r2, [pc, #64]	; (800602c <USB_HostInit+0x170>)
 8005fec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d105      	bne.n	8006002 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	f043 0210 	orr.w	r2, r3, #16
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	699a      	ldr	r2, [r3, #24]
 8006006:	4b0a      	ldr	r3, [pc, #40]	; (8006030 <USB_HostInit+0x174>)
 8006008:	4313      	orrs	r3, r2
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800600e:	2300      	movs	r3, #0
}
 8006010:	4618      	mov	r0, r3
 8006012:	3710      	adds	r7, #16
 8006014:	46bd      	mov	sp, r7
 8006016:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800601a:	b004      	add	sp, #16
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	01000200 	.word	0x01000200
 8006024:	00e00300 	.word	0x00e00300
 8006028:	00600080 	.word	0x00600080
 800602c:	004000e0 	.word	0x004000e0
 8006030:	a3200008 	.word	0xa3200008

08006034 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006034:	b480      	push	{r7}
 8006036:	b085      	sub	sp, #20
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	460b      	mov	r3, r1
 800603e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68fa      	ldr	r2, [r7, #12]
 800604e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006052:	f023 0303 	bic.w	r3, r3, #3
 8006056:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	78fb      	ldrb	r3, [r7, #3]
 8006062:	f003 0303 	and.w	r3, r3, #3
 8006066:	68f9      	ldr	r1, [r7, #12]
 8006068:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800606c:	4313      	orrs	r3, r2
 800606e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006070:	78fb      	ldrb	r3, [r7, #3]
 8006072:	2b01      	cmp	r3, #1
 8006074:	d107      	bne.n	8006086 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800607c:	461a      	mov	r2, r3
 800607e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006082:	6053      	str	r3, [r2, #4]
 8006084:	e009      	b.n	800609a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006086:	78fb      	ldrb	r3, [r7, #3]
 8006088:	2b02      	cmp	r3, #2
 800608a:	d106      	bne.n	800609a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006092:	461a      	mov	r2, r3
 8006094:	f241 7370 	movw	r3, #6000	; 0x1770
 8006098:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800609a:	2300      	movs	r3, #0
}
 800609c:	4618      	mov	r0, r3
 800609e:	3714      	adds	r7, #20
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80060b4:	2300      	movs	r3, #0
 80060b6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80060c8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80060d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060d6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80060d8:	2064      	movs	r0, #100	; 0x64
 80060da:	f7fa fa53 	bl	8000584 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80060e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060ea:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80060ec:	200a      	movs	r0, #10
 80060ee:	f7fa fa49 	bl	8000584 <HAL_Delay>

  return HAL_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3710      	adds	r7, #16
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	460b      	mov	r3, r1
 8006106:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800610c:	2300      	movs	r3, #0
 800610e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006120:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006128:	2b00      	cmp	r3, #0
 800612a:	d109      	bne.n	8006140 <USB_DriveVbus+0x44>
 800612c:	78fb      	ldrb	r3, [r7, #3]
 800612e:	2b01      	cmp	r3, #1
 8006130:	d106      	bne.n	8006140 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800613a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800613e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800614a:	d109      	bne.n	8006160 <USB_DriveVbus+0x64>
 800614c:	78fb      	ldrb	r3, [r7, #3]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d106      	bne.n	8006160 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800615a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800615e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3714      	adds	r7, #20
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr

0800616e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800616e:	b480      	push	{r7}
 8006170:	b085      	sub	sp, #20
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800617a:	2300      	movs	r3, #0
 800617c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	0c5b      	lsrs	r3, r3, #17
 800618c:	f003 0303 	and.w	r3, r3, #3
}
 8006190:	4618      	mov	r0, r3
 8006192:	3714      	adds	r7, #20
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800619c:	b480      	push	{r7}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	b29b      	uxth	r3, r3
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3714      	adds	r7, #20
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr
	...

080061c0 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b087      	sub	sp, #28
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	4608      	mov	r0, r1
 80061ca:	4611      	mov	r1, r2
 80061cc:	461a      	mov	r2, r3
 80061ce:	4603      	mov	r3, r0
 80061d0:	70fb      	strb	r3, [r7, #3]
 80061d2:	460b      	mov	r3, r1
 80061d4:	70bb      	strb	r3, [r7, #2]
 80061d6:	4613      	mov	r3, r2
 80061d8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80061da:	2300      	movs	r3, #0
 80061dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80061e2:	78fb      	ldrb	r3, [r7, #3]
 80061e4:	015a      	lsls	r2, r3, #5
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	4413      	add	r3, r2
 80061ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ee:	461a      	mov	r2, r3
 80061f0:	f04f 33ff 	mov.w	r3, #4294967295
 80061f4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80061f6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80061fa:	2b03      	cmp	r3, #3
 80061fc:	d87e      	bhi.n	80062fc <USB_HC_Init+0x13c>
 80061fe:	a201      	add	r2, pc, #4	; (adr r2, 8006204 <USB_HC_Init+0x44>)
 8006200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006204:	08006215 	.word	0x08006215
 8006208:	080062bf 	.word	0x080062bf
 800620c:	08006215 	.word	0x08006215
 8006210:	08006281 	.word	0x08006281
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006214:	78fb      	ldrb	r3, [r7, #3]
 8006216:	015a      	lsls	r2, r3, #5
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	4413      	add	r3, r2
 800621c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006220:	461a      	mov	r2, r3
 8006222:	f240 439d 	movw	r3, #1181	; 0x49d
 8006226:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006228:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800622c:	2b00      	cmp	r3, #0
 800622e:	da10      	bge.n	8006252 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006230:	78fb      	ldrb	r3, [r7, #3]
 8006232:	015a      	lsls	r2, r3, #5
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	4413      	add	r3, r2
 8006238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	78fa      	ldrb	r2, [r7, #3]
 8006240:	0151      	lsls	r1, r2, #5
 8006242:	68ba      	ldr	r2, [r7, #8]
 8006244:	440a      	add	r2, r1
 8006246:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800624a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800624e:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8006250:	e057      	b.n	8006302 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800625a:	2b00      	cmp	r3, #0
 800625c:	d051      	beq.n	8006302 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800625e:	78fb      	ldrb	r3, [r7, #3]
 8006260:	015a      	lsls	r2, r3, #5
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	4413      	add	r3, r2
 8006266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	78fa      	ldrb	r2, [r7, #3]
 800626e:	0151      	lsls	r1, r2, #5
 8006270:	68ba      	ldr	r2, [r7, #8]
 8006272:	440a      	add	r2, r1
 8006274:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006278:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800627c:	60d3      	str	r3, [r2, #12]
      break;
 800627e:	e040      	b.n	8006302 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006280:	78fb      	ldrb	r3, [r7, #3]
 8006282:	015a      	lsls	r2, r3, #5
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	4413      	add	r3, r2
 8006288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800628c:	461a      	mov	r2, r3
 800628e:	f240 639d 	movw	r3, #1693	; 0x69d
 8006292:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006294:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006298:	2b00      	cmp	r3, #0
 800629a:	da34      	bge.n	8006306 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800629c:	78fb      	ldrb	r3, [r7, #3]
 800629e:	015a      	lsls	r2, r3, #5
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	4413      	add	r3, r2
 80062a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	78fa      	ldrb	r2, [r7, #3]
 80062ac:	0151      	lsls	r1, r2, #5
 80062ae:	68ba      	ldr	r2, [r7, #8]
 80062b0:	440a      	add	r2, r1
 80062b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062ba:	60d3      	str	r3, [r2, #12]
      }

      break;
 80062bc:	e023      	b.n	8006306 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80062be:	78fb      	ldrb	r3, [r7, #3]
 80062c0:	015a      	lsls	r2, r3, #5
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	4413      	add	r3, r2
 80062c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ca:	461a      	mov	r2, r3
 80062cc:	f240 2325 	movw	r3, #549	; 0x225
 80062d0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80062d2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	da17      	bge.n	800630a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80062da:	78fb      	ldrb	r3, [r7, #3]
 80062dc:	015a      	lsls	r2, r3, #5
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	4413      	add	r3, r2
 80062e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	78fa      	ldrb	r2, [r7, #3]
 80062ea:	0151      	lsls	r1, r2, #5
 80062ec:	68ba      	ldr	r2, [r7, #8]
 80062ee:	440a      	add	r2, r1
 80062f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062f4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80062f8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80062fa:	e006      	b.n	800630a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	75fb      	strb	r3, [r7, #23]
      break;
 8006300:	e004      	b.n	800630c <USB_HC_Init+0x14c>
      break;
 8006302:	bf00      	nop
 8006304:	e002      	b.n	800630c <USB_HC_Init+0x14c>
      break;
 8006306:	bf00      	nop
 8006308:	e000      	b.n	800630c <USB_HC_Init+0x14c>
      break;
 800630a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006312:	699a      	ldr	r2, [r3, #24]
 8006314:	78fb      	ldrb	r3, [r7, #3]
 8006316:	f003 030f 	and.w	r3, r3, #15
 800631a:	2101      	movs	r1, #1
 800631c:	fa01 f303 	lsl.w	r3, r1, r3
 8006320:	68b9      	ldr	r1, [r7, #8]
 8006322:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006326:	4313      	orrs	r3, r2
 8006328:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	699b      	ldr	r3, [r3, #24]
 800632e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006336:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800633a:	2b00      	cmp	r3, #0
 800633c:	da03      	bge.n	8006346 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800633e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006342:	613b      	str	r3, [r7, #16]
 8006344:	e001      	b.n	800634a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8006346:	2300      	movs	r3, #0
 8006348:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800634a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800634e:	2b02      	cmp	r3, #2
 8006350:	d103      	bne.n	800635a <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006352:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006356:	60fb      	str	r3, [r7, #12]
 8006358:	e001      	b.n	800635e <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800635a:	2300      	movs	r3, #0
 800635c:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800635e:	787b      	ldrb	r3, [r7, #1]
 8006360:	059b      	lsls	r3, r3, #22
 8006362:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006366:	78bb      	ldrb	r3, [r7, #2]
 8006368:	02db      	lsls	r3, r3, #11
 800636a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800636e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006370:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006374:	049b      	lsls	r3, r3, #18
 8006376:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800637a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800637c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800637e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006382:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006388:	78fb      	ldrb	r3, [r7, #3]
 800638a:	0159      	lsls	r1, r3, #5
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	440b      	add	r3, r1
 8006390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006394:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800639a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800639c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80063a0:	2b03      	cmp	r3, #3
 80063a2:	d10f      	bne.n	80063c4 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80063a4:	78fb      	ldrb	r3, [r7, #3]
 80063a6:	015a      	lsls	r2, r3, #5
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	4413      	add	r3, r2
 80063ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	78fa      	ldrb	r2, [r7, #3]
 80063b4:	0151      	lsls	r1, r2, #5
 80063b6:	68ba      	ldr	r2, [r7, #8]
 80063b8:	440a      	add	r2, r1
 80063ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80063c2:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80063c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	371c      	adds	r7, #28
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr
 80063d2:	bf00      	nop

080063d4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b08c      	sub	sp, #48	; 0x30
 80063d8:	af02      	add	r7, sp, #8
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	4613      	mov	r3, r2
 80063e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	785b      	ldrb	r3, [r3, #1]
 80063ea:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80063ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80063f0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d028      	beq.n	8006450 <USB_HC_StartXfer+0x7c>
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	791b      	ldrb	r3, [r3, #4]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d124      	bne.n	8006450 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8006406:	79fb      	ldrb	r3, [r7, #7]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d10b      	bne.n	8006424 <USB_HC_StartXfer+0x50>
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	795b      	ldrb	r3, [r3, #5]
 8006410:	2b01      	cmp	r3, #1
 8006412:	d107      	bne.n	8006424 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	785b      	ldrb	r3, [r3, #1]
 8006418:	4619      	mov	r1, r3
 800641a:	68f8      	ldr	r0, [r7, #12]
 800641c:	f000 fa2e 	bl	800687c <USB_DoPing>
      return HAL_OK;
 8006420:	2300      	movs	r3, #0
 8006422:	e112      	b.n	800664a <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8006424:	79fb      	ldrb	r3, [r7, #7]
 8006426:	2b01      	cmp	r3, #1
 8006428:	d112      	bne.n	8006450 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	015a      	lsls	r2, r3, #5
 800642e:	6a3b      	ldr	r3, [r7, #32]
 8006430:	4413      	add	r3, r2
 8006432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	69fa      	ldr	r2, [r7, #28]
 800643a:	0151      	lsls	r1, r2, #5
 800643c:	6a3a      	ldr	r2, [r7, #32]
 800643e:	440a      	add	r2, r1
 8006440:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006444:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006448:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	2200      	movs	r2, #0
 800644e:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d018      	beq.n	800648a <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	68ba      	ldr	r2, [r7, #8]
 800645e:	8912      	ldrh	r2, [r2, #8]
 8006460:	4413      	add	r3, r2
 8006462:	3b01      	subs	r3, #1
 8006464:	68ba      	ldr	r2, [r7, #8]
 8006466:	8912      	ldrh	r2, [r2, #8]
 8006468:	fbb3 f3f2 	udiv	r3, r3, r2
 800646c:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800646e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006470:	8b7b      	ldrh	r3, [r7, #26]
 8006472:	429a      	cmp	r2, r3
 8006474:	d90b      	bls.n	800648e <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8006476:	8b7b      	ldrh	r3, [r7, #26]
 8006478:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800647a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800647c:	68ba      	ldr	r2, [r7, #8]
 800647e:	8912      	ldrh	r2, [r2, #8]
 8006480:	fb02 f203 	mul.w	r2, r2, r3
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	611a      	str	r2, [r3, #16]
 8006488:	e001      	b.n	800648e <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800648a:	2301      	movs	r3, #1
 800648c:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	78db      	ldrb	r3, [r3, #3]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d006      	beq.n	80064a4 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006496:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006498:	68ba      	ldr	r2, [r7, #8]
 800649a:	8912      	ldrh	r2, [r2, #8]
 800649c:	fb02 f203 	mul.w	r2, r2, r3
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80064ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80064ae:	04d9      	lsls	r1, r3, #19
 80064b0:	4b68      	ldr	r3, [pc, #416]	; (8006654 <USB_HC_StartXfer+0x280>)
 80064b2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80064b4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	7a9b      	ldrb	r3, [r3, #10]
 80064ba:	075b      	lsls	r3, r3, #29
 80064bc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80064c0:	69f9      	ldr	r1, [r7, #28]
 80064c2:	0148      	lsls	r0, r1, #5
 80064c4:	6a39      	ldr	r1, [r7, #32]
 80064c6:	4401      	add	r1, r0
 80064c8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80064cc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80064ce:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80064d0:	79fb      	ldrb	r3, [r7, #7]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d009      	beq.n	80064ea <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	68d9      	ldr	r1, [r3, #12]
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	015a      	lsls	r2, r3, #5
 80064de:	6a3b      	ldr	r3, [r7, #32]
 80064e0:	4413      	add	r3, r2
 80064e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064e6:	460a      	mov	r2, r1
 80064e8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80064ea:	6a3b      	ldr	r3, [r7, #32]
 80064ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	f003 0301 	and.w	r3, r3, #1
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	bf0c      	ite	eq
 80064fa:	2301      	moveq	r3, #1
 80064fc:	2300      	movne	r3, #0
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	015a      	lsls	r2, r3, #5
 8006506:	6a3b      	ldr	r3, [r7, #32]
 8006508:	4413      	add	r3, r2
 800650a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	69fa      	ldr	r2, [r7, #28]
 8006512:	0151      	lsls	r1, r2, #5
 8006514:	6a3a      	ldr	r2, [r7, #32]
 8006516:	440a      	add	r2, r1
 8006518:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800651c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006520:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	015a      	lsls	r2, r3, #5
 8006526:	6a3b      	ldr	r3, [r7, #32]
 8006528:	4413      	add	r3, r2
 800652a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	7e7b      	ldrb	r3, [r7, #25]
 8006532:	075b      	lsls	r3, r3, #29
 8006534:	69f9      	ldr	r1, [r7, #28]
 8006536:	0148      	lsls	r0, r1, #5
 8006538:	6a39      	ldr	r1, [r7, #32]
 800653a:	4401      	add	r1, r0
 800653c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006540:	4313      	orrs	r3, r2
 8006542:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	015a      	lsls	r2, r3, #5
 8006548:	6a3b      	ldr	r3, [r7, #32]
 800654a:	4413      	add	r3, r2
 800654c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a41      	ldr	r2, [pc, #260]	; (8006658 <USB_HC_StartXfer+0x284>)
 8006554:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006556:	4b40      	ldr	r3, [pc, #256]	; (8006658 <USB_HC_StartXfer+0x284>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800655e:	4a3e      	ldr	r2, [pc, #248]	; (8006658 <USB_HC_StartXfer+0x284>)
 8006560:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	78db      	ldrb	r3, [r3, #3]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d006      	beq.n	8006578 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800656a:	4b3b      	ldr	r3, [pc, #236]	; (8006658 <USB_HC_StartXfer+0x284>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006572:	4a39      	ldr	r2, [pc, #228]	; (8006658 <USB_HC_StartXfer+0x284>)
 8006574:	6013      	str	r3, [r2, #0]
 8006576:	e005      	b.n	8006584 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006578:	4b37      	ldr	r3, [pc, #220]	; (8006658 <USB_HC_StartXfer+0x284>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006580:	4a35      	ldr	r2, [pc, #212]	; (8006658 <USB_HC_StartXfer+0x284>)
 8006582:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006584:	4b34      	ldr	r3, [pc, #208]	; (8006658 <USB_HC_StartXfer+0x284>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800658c:	4a32      	ldr	r2, [pc, #200]	; (8006658 <USB_HC_StartXfer+0x284>)
 800658e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	015a      	lsls	r2, r3, #5
 8006594:	6a3b      	ldr	r3, [r7, #32]
 8006596:	4413      	add	r3, r2
 8006598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800659c:	461a      	mov	r2, r3
 800659e:	4b2e      	ldr	r3, [pc, #184]	; (8006658 <USB_HC_StartXfer+0x284>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 80065a4:	79fb      	ldrb	r3, [r7, #7]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d14e      	bne.n	8006648 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	78db      	ldrb	r3, [r3, #3]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d14a      	bne.n	8006648 <USB_HC_StartXfer+0x274>
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d046      	beq.n	8006648 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	79db      	ldrb	r3, [r3, #7]
 80065be:	2b03      	cmp	r3, #3
 80065c0:	d830      	bhi.n	8006624 <USB_HC_StartXfer+0x250>
 80065c2:	a201      	add	r2, pc, #4	; (adr r2, 80065c8 <USB_HC_StartXfer+0x1f4>)
 80065c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065c8:	080065d9 	.word	0x080065d9
 80065cc:	080065fd 	.word	0x080065fd
 80065d0:	080065d9 	.word	0x080065d9
 80065d4:	080065fd 	.word	0x080065fd
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	691b      	ldr	r3, [r3, #16]
 80065dc:	3303      	adds	r3, #3
 80065de:	089b      	lsrs	r3, r3, #2
 80065e0:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80065e2:	8afa      	ldrh	r2, [r7, #22]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d91c      	bls.n	8006628 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	699b      	ldr	r3, [r3, #24]
 80065f2:	f043 0220 	orr.w	r2, r3, #32
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	619a      	str	r2, [r3, #24]
          }
          break;
 80065fa:	e015      	b.n	8006628 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	3303      	adds	r3, #3
 8006602:	089b      	lsrs	r3, r3, #2
 8006604:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006606:	8afa      	ldrh	r2, [r7, #22]
 8006608:	6a3b      	ldr	r3, [r7, #32]
 800660a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	b29b      	uxth	r3, r3
 8006612:	429a      	cmp	r2, r3
 8006614:	d90a      	bls.n	800662c <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	699b      	ldr	r3, [r3, #24]
 800661a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	619a      	str	r2, [r3, #24]
          }
          break;
 8006622:	e003      	b.n	800662c <USB_HC_StartXfer+0x258>

        default:
          break;
 8006624:	bf00      	nop
 8006626:	e002      	b.n	800662e <USB_HC_StartXfer+0x25a>
          break;
 8006628:	bf00      	nop
 800662a:	e000      	b.n	800662e <USB_HC_StartXfer+0x25a>
          break;
 800662c:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	68d9      	ldr	r1, [r3, #12]
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	785a      	ldrb	r2, [r3, #1]
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	b298      	uxth	r0, r3
 800663c:	2300      	movs	r3, #0
 800663e:	9300      	str	r3, [sp, #0]
 8006640:	4603      	mov	r3, r0
 8006642:	68f8      	ldr	r0, [r7, #12]
 8006644:	f7ff fb86 	bl	8005d54 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3728      	adds	r7, #40	; 0x28
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	1ff80000 	.word	0x1ff80000
 8006658:	200000c4 	.word	0x200000c4

0800665c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800665c:	b480      	push	{r7}
 800665e:	b085      	sub	sp, #20
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800666e:	695b      	ldr	r3, [r3, #20]
 8006670:	b29b      	uxth	r3, r3
}
 8006672:	4618      	mov	r0, r3
 8006674:	3714      	adds	r7, #20
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr

0800667e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800667e:	b480      	push	{r7}
 8006680:	b087      	sub	sp, #28
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
 8006686:	460b      	mov	r3, r1
 8006688:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800668e:	78fb      	ldrb	r3, [r7, #3]
 8006690:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006692:	2300      	movs	r3, #0
 8006694:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	015a      	lsls	r2, r3, #5
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	4413      	add	r3, r2
 800669e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	0c9b      	lsrs	r3, r3, #18
 80066a6:	f003 0303 	and.w	r3, r3, #3
 80066aa:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d002      	beq.n	80066b8 <USB_HC_Halt+0x3a>
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	2b02      	cmp	r3, #2
 80066b6:	d16c      	bne.n	8006792 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	015a      	lsls	r2, r3, #5
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	4413      	add	r3, r2
 80066c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	0151      	lsls	r1, r2, #5
 80066ca:	693a      	ldr	r2, [r7, #16]
 80066cc:	440a      	add	r2, r1
 80066ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066d6:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d143      	bne.n	800676c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	015a      	lsls	r2, r3, #5
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	4413      	add	r3, r2
 80066ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	0151      	lsls	r1, r2, #5
 80066f6:	693a      	ldr	r2, [r7, #16]
 80066f8:	440a      	add	r2, r1
 80066fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006702:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	015a      	lsls	r2, r3, #5
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	4413      	add	r3, r2
 800670c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	0151      	lsls	r1, r2, #5
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	440a      	add	r2, r1
 800671a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800671e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006722:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	015a      	lsls	r2, r3, #5
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	4413      	add	r3, r2
 800672c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	0151      	lsls	r1, r2, #5
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	440a      	add	r2, r1
 800673a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800673e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006742:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	3301      	adds	r3, #1
 8006748:	617b      	str	r3, [r7, #20]
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006750:	d81d      	bhi.n	800678e <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	015a      	lsls	r2, r3, #5
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	4413      	add	r3, r2
 800675a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006764:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006768:	d0ec      	beq.n	8006744 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800676a:	e080      	b.n	800686e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	015a      	lsls	r2, r3, #5
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	4413      	add	r3, r2
 8006774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	0151      	lsls	r1, r2, #5
 800677e:	693a      	ldr	r2, [r7, #16]
 8006780:	440a      	add	r2, r1
 8006782:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006786:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800678a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800678c:	e06f      	b.n	800686e <USB_HC_Halt+0x1f0>
          break;
 800678e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006790:	e06d      	b.n	800686e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	015a      	lsls	r2, r3, #5
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	4413      	add	r3, r2
 800679a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	0151      	lsls	r1, r2, #5
 80067a4:	693a      	ldr	r2, [r7, #16]
 80067a6:	440a      	add	r2, r1
 80067a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067b0:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d143      	bne.n	800684a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	015a      	lsls	r2, r3, #5
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	4413      	add	r3, r2
 80067ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	0151      	lsls	r1, r2, #5
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	440a      	add	r2, r1
 80067d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067e0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	015a      	lsls	r2, r3, #5
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	4413      	add	r3, r2
 80067ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	0151      	lsls	r1, r2, #5
 80067f4:	693a      	ldr	r2, [r7, #16]
 80067f6:	440a      	add	r2, r1
 80067f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006800:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	015a      	lsls	r2, r3, #5
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	4413      	add	r3, r2
 800680a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	0151      	lsls	r1, r2, #5
 8006814:	693a      	ldr	r2, [r7, #16]
 8006816:	440a      	add	r2, r1
 8006818:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800681c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006820:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	3301      	adds	r3, #1
 8006826:	617b      	str	r3, [r7, #20]
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800682e:	d81d      	bhi.n	800686c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	015a      	lsls	r2, r3, #5
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	4413      	add	r3, r2
 8006838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006842:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006846:	d0ec      	beq.n	8006822 <USB_HC_Halt+0x1a4>
 8006848:	e011      	b.n	800686e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	015a      	lsls	r2, r3, #5
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	4413      	add	r3, r2
 8006852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68fa      	ldr	r2, [r7, #12]
 800685a:	0151      	lsls	r1, r2, #5
 800685c:	693a      	ldr	r2, [r7, #16]
 800685e:	440a      	add	r2, r1
 8006860:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006864:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006868:	6013      	str	r3, [r2, #0]
 800686a:	e000      	b.n	800686e <USB_HC_Halt+0x1f0>
          break;
 800686c:	bf00      	nop
    }
  }

  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	371c      	adds	r7, #28
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800687c:	b480      	push	{r7}
 800687e:	b087      	sub	sp, #28
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	460b      	mov	r3, r1
 8006886:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800688c:	78fb      	ldrb	r3, [r7, #3]
 800688e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006890:	2301      	movs	r3, #1
 8006892:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	04da      	lsls	r2, r3, #19
 8006898:	4b15      	ldr	r3, [pc, #84]	; (80068f0 <USB_DoPing+0x74>)
 800689a:	4013      	ands	r3, r2
 800689c:	693a      	ldr	r2, [r7, #16]
 800689e:	0151      	lsls	r1, r2, #5
 80068a0:	697a      	ldr	r2, [r7, #20]
 80068a2:	440a      	add	r2, r1
 80068a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068ac:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	015a      	lsls	r2, r3, #5
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	4413      	add	r3, r2
 80068b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80068c4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068cc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	015a      	lsls	r2, r3, #5
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	4413      	add	r3, r2
 80068d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068da:	461a      	mov	r2, r3
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	371c      	adds	r7, #28
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	1ff80000 	.word	0x1ff80000

080068f4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b086      	sub	sp, #24
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006900:	2300      	movs	r3, #0
 8006902:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f7ff f9a1 	bl	8005c4c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800690a:	2110      	movs	r1, #16
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f7ff f9d9 	bl	8005cc4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f7ff f9fc 	bl	8005d10 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006918:	2300      	movs	r3, #0
 800691a:	613b      	str	r3, [r7, #16]
 800691c:	e01f      	b.n	800695e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	015a      	lsls	r2, r3, #5
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	4413      	add	r3, r2
 8006926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006934:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800693c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006944:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	015a      	lsls	r2, r3, #5
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	4413      	add	r3, r2
 800694e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006952:	461a      	mov	r2, r3
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	3301      	adds	r3, #1
 800695c:	613b      	str	r3, [r7, #16]
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	2b0f      	cmp	r3, #15
 8006962:	d9dc      	bls.n	800691e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006964:	2300      	movs	r3, #0
 8006966:	613b      	str	r3, [r7, #16]
 8006968:	e034      	b.n	80069d4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	015a      	lsls	r2, r3, #5
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	4413      	add	r3, r2
 8006972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006980:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006988:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006990:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	015a      	lsls	r2, r3, #5
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	4413      	add	r3, r2
 800699a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800699e:	461a      	mov	r2, r3
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	3301      	adds	r3, #1
 80069a8:	617b      	str	r3, [r7, #20]
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069b0:	d80c      	bhi.n	80069cc <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	015a      	lsls	r2, r3, #5
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	4413      	add	r3, r2
 80069ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069c8:	d0ec      	beq.n	80069a4 <USB_StopHost+0xb0>
 80069ca:	e000      	b.n	80069ce <USB_StopHost+0xda>
        break;
 80069cc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	3301      	adds	r3, #1
 80069d2:	613b      	str	r3, [r7, #16]
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	2b0f      	cmp	r3, #15
 80069d8:	d9c7      	bls.n	800696a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069e0:	461a      	mov	r2, r3
 80069e2:	f04f 33ff 	mov.w	r3, #4294967295
 80069e6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f04f 32ff 	mov.w	r2, #4294967295
 80069ee:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f7ff f91a 	bl	8005c2a <USB_EnableGlobalInt>

  return HAL_OK;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3718      	adds	r7, #24
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006a00:	b590      	push	{r4, r7, lr}
 8006a02:	b089      	sub	sp, #36	; 0x24
 8006a04:	af04      	add	r7, sp, #16
 8006a06:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006a08:	2301      	movs	r3, #1
 8006a0a:	2202      	movs	r2, #2
 8006a0c:	2102      	movs	r1, #2
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 fcba 	bl	8007388 <USBH_FindInterface>
 8006a14:	4603      	mov	r3, r0
 8006a16:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006a18:	7bfb      	ldrb	r3, [r7, #15]
 8006a1a:	2bff      	cmp	r3, #255	; 0xff
 8006a1c:	d002      	beq.n	8006a24 <USBH_CDC_InterfaceInit+0x24>
 8006a1e:	7bfb      	ldrb	r3, [r7, #15]
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d901      	bls.n	8006a28 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006a24:	2302      	movs	r3, #2
 8006a26:	e13d      	b.n	8006ca4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006a28:	7bfb      	ldrb	r3, [r7, #15]
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 fc8f 	bl	8007350 <USBH_SelectInterface>
 8006a32:	4603      	mov	r3, r0
 8006a34:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006a36:	7bbb      	ldrb	r3, [r7, #14]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d001      	beq.n	8006a40 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006a3c:	2302      	movs	r3, #2
 8006a3e:	e131      	b.n	8006ca4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006a46:	2050      	movs	r0, #80	; 0x50
 8006a48:	f006 fd24 	bl	800d494 <malloc>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a56:	69db      	ldr	r3, [r3, #28]
 8006a58:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d101      	bne.n	8006a64 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006a60:	2302      	movs	r3, #2
 8006a62:	e11f      	b.n	8006ca4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006a64:	2250      	movs	r2, #80	; 0x50
 8006a66:	2100      	movs	r1, #0
 8006a68:	68b8      	ldr	r0, [r7, #8]
 8006a6a:	f006 fd2e 	bl	800d4ca <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006a6e:	7bfb      	ldrb	r3, [r7, #15]
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	211a      	movs	r1, #26
 8006a74:	fb01 f303 	mul.w	r3, r1, r3
 8006a78:	4413      	add	r3, r2
 8006a7a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	b25b      	sxtb	r3, r3
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	da15      	bge.n	8006ab2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006a86:	7bfb      	ldrb	r3, [r7, #15]
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	211a      	movs	r1, #26
 8006a8c:	fb01 f303 	mul.w	r3, r1, r3
 8006a90:	4413      	add	r3, r2
 8006a92:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006a96:	781a      	ldrb	r2, [r3, #0]
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006a9c:	7bfb      	ldrb	r3, [r7, #15]
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	211a      	movs	r1, #26
 8006aa2:	fb01 f303 	mul.w	r3, r1, r3
 8006aa6:	4413      	add	r3, r2
 8006aa8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006aac:	881a      	ldrh	r2, [r3, #0]
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	785b      	ldrb	r3, [r3, #1]
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f002 f894 	bl	8008be6 <USBH_AllocPipe>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	7819      	ldrb	r1, [r3, #0]
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	7858      	ldrb	r0, [r3, #1]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006ada:	68ba      	ldr	r2, [r7, #8]
 8006adc:	8952      	ldrh	r2, [r2, #10]
 8006ade:	9202      	str	r2, [sp, #8]
 8006ae0:	2203      	movs	r2, #3
 8006ae2:	9201      	str	r2, [sp, #4]
 8006ae4:	9300      	str	r3, [sp, #0]
 8006ae6:	4623      	mov	r3, r4
 8006ae8:	4602      	mov	r2, r0
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f002 f84c 	bl	8008b88 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	2200      	movs	r2, #0
 8006af6:	4619      	mov	r1, r3
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f006 fbf1 	bl	800d2e0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006afe:	2300      	movs	r3, #0
 8006b00:	2200      	movs	r2, #0
 8006b02:	210a      	movs	r1, #10
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 fc3f 	bl	8007388 <USBH_FindInterface>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006b0e:	7bfb      	ldrb	r3, [r7, #15]
 8006b10:	2bff      	cmp	r3, #255	; 0xff
 8006b12:	d002      	beq.n	8006b1a <USBH_CDC_InterfaceInit+0x11a>
 8006b14:	7bfb      	ldrb	r3, [r7, #15]
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d901      	bls.n	8006b1e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006b1a:	2302      	movs	r3, #2
 8006b1c:	e0c2      	b.n	8006ca4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006b1e:	7bfb      	ldrb	r3, [r7, #15]
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	211a      	movs	r1, #26
 8006b24:	fb01 f303 	mul.w	r3, r1, r3
 8006b28:	4413      	add	r3, r2
 8006b2a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	b25b      	sxtb	r3, r3
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	da16      	bge.n	8006b64 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006b36:	7bfb      	ldrb	r3, [r7, #15]
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	211a      	movs	r1, #26
 8006b3c:	fb01 f303 	mul.w	r3, r1, r3
 8006b40:	4413      	add	r3, r2
 8006b42:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006b46:	781a      	ldrb	r2, [r3, #0]
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006b4c:	7bfb      	ldrb	r3, [r7, #15]
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	211a      	movs	r1, #26
 8006b52:	fb01 f303 	mul.w	r3, r1, r3
 8006b56:	4413      	add	r3, r2
 8006b58:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006b5c:	881a      	ldrh	r2, [r3, #0]
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	835a      	strh	r2, [r3, #26]
 8006b62:	e015      	b.n	8006b90 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006b64:	7bfb      	ldrb	r3, [r7, #15]
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	211a      	movs	r1, #26
 8006b6a:	fb01 f303 	mul.w	r3, r1, r3
 8006b6e:	4413      	add	r3, r2
 8006b70:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006b74:	781a      	ldrb	r2, [r3, #0]
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006b7a:	7bfb      	ldrb	r3, [r7, #15]
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	211a      	movs	r1, #26
 8006b80:	fb01 f303 	mul.w	r3, r1, r3
 8006b84:	4413      	add	r3, r2
 8006b86:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006b8a:	881a      	ldrh	r2, [r3, #0]
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006b90:	7bfb      	ldrb	r3, [r7, #15]
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	211a      	movs	r1, #26
 8006b96:	fb01 f303 	mul.w	r3, r1, r3
 8006b9a:	4413      	add	r3, r2
 8006b9c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	b25b      	sxtb	r3, r3
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	da16      	bge.n	8006bd6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006ba8:	7bfb      	ldrb	r3, [r7, #15]
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	211a      	movs	r1, #26
 8006bae:	fb01 f303 	mul.w	r3, r1, r3
 8006bb2:	4413      	add	r3, r2
 8006bb4:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006bb8:	781a      	ldrb	r2, [r3, #0]
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006bbe:	7bfb      	ldrb	r3, [r7, #15]
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	211a      	movs	r1, #26
 8006bc4:	fb01 f303 	mul.w	r3, r1, r3
 8006bc8:	4413      	add	r3, r2
 8006bca:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006bce:	881a      	ldrh	r2, [r3, #0]
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	835a      	strh	r2, [r3, #26]
 8006bd4:	e015      	b.n	8006c02 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006bd6:	7bfb      	ldrb	r3, [r7, #15]
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	211a      	movs	r1, #26
 8006bdc:	fb01 f303 	mul.w	r3, r1, r3
 8006be0:	4413      	add	r3, r2
 8006be2:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006be6:	781a      	ldrb	r2, [r3, #0]
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006bec:	7bfb      	ldrb	r3, [r7, #15]
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	211a      	movs	r1, #26
 8006bf2:	fb01 f303 	mul.w	r3, r1, r3
 8006bf6:	4413      	add	r3, r2
 8006bf8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006bfc:	881a      	ldrh	r2, [r3, #0]
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	7b9b      	ldrb	r3, [r3, #14]
 8006c06:	4619      	mov	r1, r3
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f001 ffec 	bl	8008be6 <USBH_AllocPipe>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	461a      	mov	r2, r3
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	7bdb      	ldrb	r3, [r3, #15]
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f001 ffe2 	bl	8008be6 <USBH_AllocPipe>
 8006c22:	4603      	mov	r3, r0
 8006c24:	461a      	mov	r2, r3
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	7b59      	ldrb	r1, [r3, #13]
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	7b98      	ldrb	r0, [r3, #14]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006c3e:	68ba      	ldr	r2, [r7, #8]
 8006c40:	8b12      	ldrh	r2, [r2, #24]
 8006c42:	9202      	str	r2, [sp, #8]
 8006c44:	2202      	movs	r2, #2
 8006c46:	9201      	str	r2, [sp, #4]
 8006c48:	9300      	str	r3, [sp, #0]
 8006c4a:	4623      	mov	r3, r4
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f001 ff9a 	bl	8008b88 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	7b19      	ldrb	r1, [r3, #12]
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	7bd8      	ldrb	r0, [r3, #15]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006c68:	68ba      	ldr	r2, [r7, #8]
 8006c6a:	8b52      	ldrh	r2, [r2, #26]
 8006c6c:	9202      	str	r2, [sp, #8]
 8006c6e:	2202      	movs	r2, #2
 8006c70:	9201      	str	r2, [sp, #4]
 8006c72:	9300      	str	r3, [sp, #0]
 8006c74:	4623      	mov	r3, r4
 8006c76:	4602      	mov	r2, r0
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f001 ff85 	bl	8008b88 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	2200      	movs	r2, #0
 8006c82:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	7b5b      	ldrb	r3, [r3, #13]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f006 fb26 	bl	800d2e0 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	7b1b      	ldrb	r3, [r3, #12]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f006 fb1f 	bl	800d2e0 <USBH_LL_SetToggle>

  return USBH_OK;
 8006ca2:	2300      	movs	r3, #0
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3714      	adds	r7, #20
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd90      	pop	{r4, r7, pc}

08006cac <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cba:	69db      	ldr	r3, [r3, #28]
 8006cbc:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d00e      	beq.n	8006ce4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	4619      	mov	r1, r3
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f001 ff7a 	bl	8008bc6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f001 ffa5 	bl	8008c28 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	7b1b      	ldrb	r3, [r3, #12]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00e      	beq.n	8006d0a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	7b1b      	ldrb	r3, [r3, #12]
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f001 ff67 	bl	8008bc6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	7b1b      	ldrb	r3, [r3, #12]
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f001 ff92 	bl	8008c28 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2200      	movs	r2, #0
 8006d08:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	7b5b      	ldrb	r3, [r3, #13]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d00e      	beq.n	8006d30 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	7b5b      	ldrb	r3, [r3, #13]
 8006d16:	4619      	mov	r1, r3
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f001 ff54 	bl	8008bc6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	7b5b      	ldrb	r3, [r3, #13]
 8006d22:	4619      	mov	r1, r3
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f001 ff7f 	bl	8008c28 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d36:	69db      	ldr	r3, [r3, #28]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d00b      	beq.n	8006d54 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d42:	69db      	ldr	r3, [r3, #28]
 8006d44:	4618      	mov	r0, r3
 8006d46:	f006 fbad 	bl	800d4a4 <free>
    phost->pActiveClass->pData = 0U;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d50:	2200      	movs	r2, #0
 8006d52:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b084      	sub	sp, #16
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d6c:	69db      	ldr	r3, [r3, #28]
 8006d6e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	3340      	adds	r3, #64	; 0x40
 8006d74:	4619      	mov	r1, r3
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 f8b1 	bl	8006ede <GetLineCoding>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006d80:	7afb      	ldrb	r3, [r7, #11]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d105      	bne.n	8006d92 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006d8c:	2102      	movs	r1, #2
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006d92:	7afb      	ldrb	r3, [r7, #11]
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3710      	adds	r7, #16
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006da4:	2301      	movs	r3, #1
 8006da6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006da8:	2300      	movs	r3, #0
 8006daa:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006db2:	69db      	ldr	r3, [r3, #28]
 8006db4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006dbc:	2b04      	cmp	r3, #4
 8006dbe:	d877      	bhi.n	8006eb0 <USBH_CDC_Process+0x114>
 8006dc0:	a201      	add	r2, pc, #4	; (adr r2, 8006dc8 <USBH_CDC_Process+0x2c>)
 8006dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc6:	bf00      	nop
 8006dc8:	08006ddd 	.word	0x08006ddd
 8006dcc:	08006de3 	.word	0x08006de3
 8006dd0:	08006e13 	.word	0x08006e13
 8006dd4:	08006e87 	.word	0x08006e87
 8006dd8:	08006e95 	.word	0x08006e95
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	73fb      	strb	r3, [r7, #15]
      break;
 8006de0:	e06d      	b.n	8006ebe <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006de6:	4619      	mov	r1, r3
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 f897 	bl	8006f1c <SetLineCoding>
 8006dee:	4603      	mov	r3, r0
 8006df0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006df2:	7bbb      	ldrb	r3, [r7, #14]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d104      	bne.n	8006e02 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	2202      	movs	r2, #2
 8006dfc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006e00:	e058      	b.n	8006eb4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006e02:	7bbb      	ldrb	r3, [r7, #14]
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d055      	beq.n	8006eb4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	2204      	movs	r2, #4
 8006e0c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006e10:	e050      	b.n	8006eb4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	3340      	adds	r3, #64	; 0x40
 8006e16:	4619      	mov	r1, r3
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 f860 	bl	8006ede <GetLineCoding>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006e22:	7bbb      	ldrb	r3, [r7, #14]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d126      	bne.n	8006e76 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e3a:	791b      	ldrb	r3, [r3, #4]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d13b      	bne.n	8006eb8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e4a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d133      	bne.n	8006eb8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e5a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d12b      	bne.n	8006eb8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e68:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d124      	bne.n	8006eb8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 f984 	bl	800717c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006e74:	e020      	b.n	8006eb8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006e76:	7bbb      	ldrb	r3, [r7, #14]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d01d      	beq.n	8006eb8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	2204      	movs	r2, #4
 8006e80:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006e84:	e018      	b.n	8006eb8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 f867 	bl	8006f5a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 f8f8 	bl	8007082 <CDC_ProcessReception>
      break;
 8006e92:	e014      	b.n	8006ebe <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006e94:	2100      	movs	r1, #0
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f001 f953 	bl	8008142 <USBH_ClrFeature>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006ea0:	7bbb      	ldrb	r3, [r7, #14]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d10a      	bne.n	8006ebc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006eae:	e005      	b.n	8006ebc <USBH_CDC_Process+0x120>

    default:
      break;
 8006eb0:	bf00      	nop
 8006eb2:	e004      	b.n	8006ebe <USBH_CDC_Process+0x122>
      break;
 8006eb4:	bf00      	nop
 8006eb6:	e002      	b.n	8006ebe <USBH_CDC_Process+0x122>
      break;
 8006eb8:	bf00      	nop
 8006eba:	e000      	b.n	8006ebe <USBH_CDC_Process+0x122>
      break;
 8006ebc:	bf00      	nop

  }

  return status;
 8006ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3710      	adds	r7, #16
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	370c      	adds	r7, #12
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr

08006ede <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006ede:	b580      	push	{r7, lr}
 8006ee0:	b082      	sub	sp, #8
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
 8006ee6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	22a1      	movs	r2, #161	; 0xa1
 8006eec:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2221      	movs	r2, #33	; 0x21
 8006ef2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2207      	movs	r2, #7
 8006f04:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	2207      	movs	r2, #7
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f001 faf8 	bl	8008502 <USBH_CtlReq>
 8006f12:	4603      	mov	r3, r0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3708      	adds	r7, #8
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2221      	movs	r2, #33	; 0x21
 8006f2a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2220      	movs	r2, #32
 8006f30:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2207      	movs	r2, #7
 8006f42:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	2207      	movs	r2, #7
 8006f48:	4619      	mov	r1, r3
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f001 fad9 	bl	8008502 <USBH_CtlReq>
 8006f50:	4603      	mov	r3, r0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3708      	adds	r7, #8
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}

08006f5a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006f5a:	b580      	push	{r7, lr}
 8006f5c:	b086      	sub	sp, #24
 8006f5e:	af02      	add	r7, sp, #8
 8006f60:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f68:	69db      	ldr	r3, [r3, #28]
 8006f6a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d002      	beq.n	8006f80 <CDC_ProcessTransmission+0x26>
 8006f7a:	2b02      	cmp	r3, #2
 8006f7c:	d025      	beq.n	8006fca <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 8006f7e:	e07c      	b.n	800707a <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f84:	68fa      	ldr	r2, [r7, #12]
 8006f86:	8b12      	ldrh	r2, [r2, #24]
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d90c      	bls.n	8006fa6 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	69d9      	ldr	r1, [r3, #28]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	8b1a      	ldrh	r2, [r3, #24]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	7b58      	ldrb	r0, [r3, #13]
 8006f98:	2301      	movs	r3, #1
 8006f9a:	9300      	str	r3, [sp, #0]
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f001 fdaf 	bl	8008b02 <USBH_BulkSendData>
 8006fa4:	e00c      	b.n	8006fc0 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8006fae:	b29a      	uxth	r2, r3
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	7b58      	ldrb	r0, [r3, #13]
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	9300      	str	r3, [sp, #0]
 8006fb8:	4603      	mov	r3, r0
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f001 fda1 	bl	8008b02 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2202      	movs	r2, #2
 8006fc4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006fc8:	e057      	b.n	800707a <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	7b5b      	ldrb	r3, [r3, #13]
 8006fce:	4619      	mov	r1, r3
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f006 f95b 	bl	800d28c <USBH_LL_GetURBState>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006fda:	7afb      	ldrb	r3, [r7, #11]
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d136      	bne.n	800704e <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	8b12      	ldrh	r2, [r2, #24]
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d90e      	bls.n	800700a <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff0:	68fa      	ldr	r2, [r7, #12]
 8006ff2:	8b12      	ldrh	r2, [r2, #24]
 8006ff4:	1a9a      	subs	r2, r3, r2
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	69db      	ldr	r3, [r3, #28]
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	8b12      	ldrh	r2, [r2, #24]
 8007002:	441a      	add	r2, r3
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	61da      	str	r2, [r3, #28]
 8007008:	e002      	b.n	8007010 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2200      	movs	r2, #0
 800700e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007014:	2b00      	cmp	r3, #0
 8007016:	d004      	beq.n	8007022 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8007020:	e006      	b.n	8007030 <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 f892 	bl	8007154 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2204      	movs	r2, #4
 8007034:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007044:	2200      	movs	r2, #0
 8007046:	4619      	mov	r1, r3
 8007048:	f001 feea 	bl	8008e20 <osMessagePut>
      break;
 800704c:	e014      	b.n	8007078 <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 800704e:	7afb      	ldrb	r3, [r7, #11]
 8007050:	2b02      	cmp	r3, #2
 8007052:	d111      	bne.n	8007078 <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2201      	movs	r2, #1
 8007058:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2204      	movs	r2, #4
 8007060:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007070:	2200      	movs	r2, #0
 8007072:	4619      	mov	r1, r3
 8007074:	f001 fed4 	bl	8008e20 <osMessagePut>
      break;
 8007078:	bf00      	nop
  }
}
 800707a:	bf00      	nop
 800707c:	3710      	adds	r7, #16
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}

08007082 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007082:	b580      	push	{r7, lr}
 8007084:	b086      	sub	sp, #24
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007090:	69db      	ldr	r3, [r3, #28]
 8007092:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007094:	2300      	movs	r3, #0
 8007096:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800709e:	2b03      	cmp	r3, #3
 80070a0:	d002      	beq.n	80070a8 <CDC_ProcessReception+0x26>
 80070a2:	2b04      	cmp	r3, #4
 80070a4:	d00e      	beq.n	80070c4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80070a6:	e051      	b.n	800714c <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	6a19      	ldr	r1, [r3, #32]
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	8b5a      	ldrh	r2, [r3, #26]
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	7b1b      	ldrb	r3, [r3, #12]
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f001 fd49 	bl	8008b4c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	2204      	movs	r2, #4
 80070be:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80070c2:	e043      	b.n	800714c <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	7b1b      	ldrb	r3, [r3, #12]
 80070c8:	4619      	mov	r1, r3
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f006 f8de 	bl	800d28c <USBH_LL_GetURBState>
 80070d0:	4603      	mov	r3, r0
 80070d2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80070d4:	7cfb      	ldrb	r3, [r7, #19]
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d137      	bne.n	800714a <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	7b1b      	ldrb	r3, [r3, #12]
 80070de:	4619      	mov	r1, r3
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f006 f841 	bl	800d168 <USBH_LL_GetLastXferSize>
 80070e6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ec:	68fa      	ldr	r2, [r7, #12]
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d016      	beq.n	8007120 <CDC_ProcessReception+0x9e>
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	8b5b      	ldrh	r3, [r3, #26]
 80070f6:	461a      	mov	r2, r3
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d910      	bls.n	8007120 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	1ad2      	subs	r2, r2, r3
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	6a1a      	ldr	r2, [r3, #32]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	441a      	add	r2, r3
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	2203      	movs	r2, #3
 800711a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800711e:	e006      	b.n	800712e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	2200      	movs	r2, #0
 8007124:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f000 f81d 	bl	8007168 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2204      	movs	r2, #4
 8007132:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007142:	2200      	movs	r2, #0
 8007144:	4619      	mov	r1, r3
 8007146:	f001 fe6b 	bl	8008e20 <osMessagePut>
      break;
 800714a:	bf00      	nop
  }
}
 800714c:	bf00      	nop
 800714e:	3718      	adds	r7, #24
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800715c:	bf00      	nop
 800715e:	370c      	adds	r7, #12
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr

08007168 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007168:	b480      	push	{r7}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007170:	bf00      	nop
 8007172:	370c      	adds	r7, #12
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007184:	bf00      	nop
 8007186:	370c      	adds	r7, #12
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007190:	b5b0      	push	{r4, r5, r7, lr}
 8007192:	b090      	sub	sp, #64	; 0x40
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	4613      	mov	r3, r2
 800719c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d101      	bne.n	80071a8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80071a4:	2302      	movs	r3, #2
 80071a6:	e04d      	b.n	8007244 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	79fa      	ldrb	r2, [r7, #7]
 80071ac:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80071c0:	68f8      	ldr	r0, [r7, #12]
 80071c2:	f000 f847 	bl	8007254 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2200      	movs	r2, #0
 80071d2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2200      	movs	r2, #0
 80071da:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2200      	movs	r2, #0
 80071e2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d003      	beq.n	80071f4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	68ba      	ldr	r2, [r7, #8]
 80071f0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 80071f4:	4b15      	ldr	r3, [pc, #84]	; (800724c <USBH_Init+0xbc>)
 80071f6:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80071fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80071fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8007200:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007204:	2100      	movs	r1, #0
 8007206:	4618      	mov	r0, r3
 8007208:	f001 fde1 	bl	8008dce <osMessageCreate>
 800720c:	4602      	mov	r2, r0
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8007214:	4b0e      	ldr	r3, [pc, #56]	; (8007250 <USBH_Init+0xc0>)
 8007216:	f107 0414 	add.w	r4, r7, #20
 800721a:	461d      	mov	r5, r3
 800721c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800721e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007220:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007224:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8007228:	f107 0314 	add.w	r3, r7, #20
 800722c:	68f9      	ldr	r1, [r7, #12]
 800722e:	4618      	mov	r0, r3
 8007230:	f001 fd6d 	bl	8008d0e <osThreadCreate>
 8007234:	4602      	mov	r2, r0
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800723c:	68f8      	ldr	r0, [r7, #12]
 800723e:	f005 fed7 	bl	800cff0 <USBH_LL_Init>

  return USBH_OK;
 8007242:	2300      	movs	r3, #0
}
 8007244:	4618      	mov	r0, r3
 8007246:	3740      	adds	r7, #64	; 0x40
 8007248:	46bd      	mov	sp, r7
 800724a:	bdb0      	pop	{r4, r5, r7, pc}
 800724c:	0800d66c 	.word	0x0800d66c
 8007250:	0800d688 	.word	0x0800d688

08007254 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007254:	b480      	push	{r7}
 8007256:	b085      	sub	sp, #20
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800725c:	2300      	movs	r3, #0
 800725e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007260:	2300      	movs	r3, #0
 8007262:	60fb      	str	r3, [r7, #12]
 8007264:	e009      	b.n	800727a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	33e0      	adds	r3, #224	; 0xe0
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	4413      	add	r3, r2
 8007270:	2200      	movs	r2, #0
 8007272:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	3301      	adds	r3, #1
 8007278:	60fb      	str	r3, [r7, #12]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2b0e      	cmp	r3, #14
 800727e:	d9f2      	bls.n	8007266 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007280:	2300      	movs	r3, #0
 8007282:	60fb      	str	r3, [r7, #12]
 8007284:	e009      	b.n	800729a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	4413      	add	r3, r2
 800728c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007290:	2200      	movs	r2, #0
 8007292:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	3301      	adds	r3, #1
 8007298:	60fb      	str	r3, [r7, #12]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072a0:	d3f1      	bcc.n	8007286 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2200      	movs	r2, #0
 80072ac:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2201      	movs	r2, #1
 80072b2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2201      	movs	r2, #1
 80072c0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2240      	movs	r2, #64	; 0x40
 80072c6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2201      	movs	r2, #1
 80072da:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2200      	movs	r2, #0
 80072e2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80072ee:	2300      	movs	r3, #0
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3714      	adds	r7, #20
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b085      	sub	sp, #20
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007306:	2300      	movs	r3, #0
 8007308:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d016      	beq.n	800733e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007316:	2b00      	cmp	r3, #0
 8007318:	d10e      	bne.n	8007338 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007320:	1c59      	adds	r1, r3, #1
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	33de      	adds	r3, #222	; 0xde
 800732c:	6839      	ldr	r1, [r7, #0]
 800732e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007332:	2300      	movs	r3, #0
 8007334:	73fb      	strb	r3, [r7, #15]
 8007336:	e004      	b.n	8007342 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007338:	2302      	movs	r3, #2
 800733a:	73fb      	strb	r3, [r7, #15]
 800733c:	e001      	b.n	8007342 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800733e:	2302      	movs	r3, #2
 8007340:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007342:	7bfb      	ldrb	r3, [r7, #15]
}
 8007344:	4618      	mov	r0, r3
 8007346:	3714      	adds	r7, #20
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007350:	b480      	push	{r7}
 8007352:	b085      	sub	sp, #20
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	460b      	mov	r3, r1
 800735a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800735c:	2300      	movs	r3, #0
 800735e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007366:	78fa      	ldrb	r2, [r7, #3]
 8007368:	429a      	cmp	r2, r3
 800736a:	d204      	bcs.n	8007376 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	78fa      	ldrb	r2, [r7, #3]
 8007370:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007374:	e001      	b.n	800737a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007376:	2302      	movs	r3, #2
 8007378:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800737a:	7bfb      	ldrb	r3, [r7, #15]
}
 800737c:	4618      	mov	r0, r3
 800737e:	3714      	adds	r7, #20
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007388:	b480      	push	{r7}
 800738a:	b087      	sub	sp, #28
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	4608      	mov	r0, r1
 8007392:	4611      	mov	r1, r2
 8007394:	461a      	mov	r2, r3
 8007396:	4603      	mov	r3, r0
 8007398:	70fb      	strb	r3, [r7, #3]
 800739a:	460b      	mov	r3, r1
 800739c:	70bb      	strb	r3, [r7, #2]
 800739e:	4613      	mov	r3, r2
 80073a0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80073a2:	2300      	movs	r3, #0
 80073a4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80073a6:	2300      	movs	r3, #0
 80073a8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80073b0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80073b2:	e025      	b.n	8007400 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80073b4:	7dfb      	ldrb	r3, [r7, #23]
 80073b6:	221a      	movs	r2, #26
 80073b8:	fb02 f303 	mul.w	r3, r2, r3
 80073bc:	3308      	adds	r3, #8
 80073be:	68fa      	ldr	r2, [r7, #12]
 80073c0:	4413      	add	r3, r2
 80073c2:	3302      	adds	r3, #2
 80073c4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	795b      	ldrb	r3, [r3, #5]
 80073ca:	78fa      	ldrb	r2, [r7, #3]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d002      	beq.n	80073d6 <USBH_FindInterface+0x4e>
 80073d0:	78fb      	ldrb	r3, [r7, #3]
 80073d2:	2bff      	cmp	r3, #255	; 0xff
 80073d4:	d111      	bne.n	80073fa <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80073da:	78ba      	ldrb	r2, [r7, #2]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d002      	beq.n	80073e6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80073e0:	78bb      	ldrb	r3, [r7, #2]
 80073e2:	2bff      	cmp	r3, #255	; 0xff
 80073e4:	d109      	bne.n	80073fa <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80073ea:	787a      	ldrb	r2, [r7, #1]
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d002      	beq.n	80073f6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80073f0:	787b      	ldrb	r3, [r7, #1]
 80073f2:	2bff      	cmp	r3, #255	; 0xff
 80073f4:	d101      	bne.n	80073fa <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80073f6:	7dfb      	ldrb	r3, [r7, #23]
 80073f8:	e006      	b.n	8007408 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80073fa:	7dfb      	ldrb	r3, [r7, #23]
 80073fc:	3301      	adds	r3, #1
 80073fe:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007400:	7dfb      	ldrb	r3, [r7, #23]
 8007402:	2b01      	cmp	r3, #1
 8007404:	d9d6      	bls.n	80073b4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007406:	23ff      	movs	r3, #255	; 0xff
}
 8007408:	4618      	mov	r0, r3
 800740a:	371c      	adds	r7, #28
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr

08007414 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b082      	sub	sp, #8
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f005 fe2d 	bl	800d07c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007422:	2101      	movs	r1, #1
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f005 ff44 	bl	800d2b2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800742a:	2300      	movs	r3, #0
}
 800742c:	4618      	mov	r0, r3
 800742e:	3708      	adds	r7, #8
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b088      	sub	sp, #32
 8007438:	af04      	add	r7, sp, #16
 800743a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800743c:	2302      	movs	r3, #2
 800743e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007440:	2300      	movs	r3, #0
 8007442:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800744a:	b2db      	uxtb	r3, r3
 800744c:	2b01      	cmp	r3, #1
 800744e:	d102      	bne.n	8007456 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2203      	movs	r2, #3
 8007454:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	b2db      	uxtb	r3, r3
 800745c:	2b0b      	cmp	r3, #11
 800745e:	f200 823c 	bhi.w	80078da <USBH_Process+0x4a6>
 8007462:	a201      	add	r2, pc, #4	; (adr r2, 8007468 <USBH_Process+0x34>)
 8007464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007468:	08007499 	.word	0x08007499
 800746c:	080074e7 	.word	0x080074e7
 8007470:	0800756b 	.word	0x0800756b
 8007474:	08007859 	.word	0x08007859
 8007478:	080078db 	.word	0x080078db
 800747c:	0800762b 	.word	0x0800762b
 8007480:	080077e3 	.word	0x080077e3
 8007484:	0800767d 	.word	0x0800767d
 8007488:	080076b9 	.word	0x080076b9
 800748c:	080076f3 	.word	0x080076f3
 8007490:	0800773b 	.word	0x0800773b
 8007494:	08007841 	.word	0x08007841
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	f000 821c 	beq.w	80078de <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2201      	movs	r2, #1
 80074aa:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80074ac:	20c8      	movs	r0, #200	; 0xc8
 80074ae:	f005 ff4a 	bl	800d346 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f005 fe3d 	bl	800d132 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80074dc:	2200      	movs	r2, #0
 80074de:	4619      	mov	r1, r3
 80074e0:	f001 fc9e 	bl	8008e20 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80074e4:	e1fb      	b.n	80078de <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d107      	bne.n	8007500 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2202      	movs	r2, #2
 80074fc:	701a      	strb	r2, [r3, #0]
 80074fe:	e025      	b.n	800754c <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007506:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800750a:	d914      	bls.n	8007536 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007512:	3301      	adds	r3, #1
 8007514:	b2da      	uxtb	r2, r3
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007522:	2b03      	cmp	r3, #3
 8007524:	d903      	bls.n	800752e <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	220d      	movs	r2, #13
 800752a:	701a      	strb	r2, [r3, #0]
 800752c:	e00e      	b.n	800754c <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	701a      	strb	r2, [r3, #0]
 8007534:	e00a      	b.n	800754c <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800753c:	f103 020a 	add.w	r2, r3, #10
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007546:	200a      	movs	r0, #10
 8007548:	f005 fefd 	bl	800d346 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2201      	movs	r2, #1
 8007550:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007560:	2200      	movs	r2, #0
 8007562:	4619      	mov	r1, r3
 8007564:	f001 fc5c 	bl	8008e20 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007568:	e1c0      	b.n	80078ec <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007570:	2b00      	cmp	r3, #0
 8007572:	d005      	beq.n	8007580 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800757a:	2104      	movs	r1, #4
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007580:	2064      	movs	r0, #100	; 0x64
 8007582:	f005 fee0 	bl	800d346 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f005 fdae 	bl	800d0e8 <USBH_LL_GetSpeed>
 800758c:	4603      	mov	r3, r0
 800758e:	461a      	mov	r2, r3
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2205      	movs	r2, #5
 800759a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800759c:	2100      	movs	r1, #0
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f001 fb21 	bl	8008be6 <USBH_AllocPipe>
 80075a4:	4603      	mov	r3, r0
 80075a6:	461a      	mov	r2, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80075ac:	2180      	movs	r1, #128	; 0x80
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f001 fb19 	bl	8008be6 <USBH_AllocPipe>
 80075b4:	4603      	mov	r3, r0
 80075b6:	461a      	mov	r2, r3
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	7919      	ldrb	r1, [r3, #4]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80075d0:	b292      	uxth	r2, r2
 80075d2:	9202      	str	r2, [sp, #8]
 80075d4:	2200      	movs	r2, #0
 80075d6:	9201      	str	r2, [sp, #4]
 80075d8:	9300      	str	r3, [sp, #0]
 80075da:	4603      	mov	r3, r0
 80075dc:	2280      	movs	r2, #128	; 0x80
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f001 fad2 	bl	8008b88 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	7959      	ldrb	r1, [r3, #5]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80075f8:	b292      	uxth	r2, r2
 80075fa:	9202      	str	r2, [sp, #8]
 80075fc:	2200      	movs	r2, #0
 80075fe:	9201      	str	r2, [sp, #4]
 8007600:	9300      	str	r3, [sp, #0]
 8007602:	4603      	mov	r3, r0
 8007604:	2200      	movs	r2, #0
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f001 fabe 	bl	8008b88 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007620:	2200      	movs	r2, #0
 8007622:	4619      	mov	r1, r3
 8007624:	f001 fbfc 	bl	8008e20 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007628:	e160      	b.n	80078ec <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 f964 	bl	80078f8 <USBH_HandleEnum>
 8007630:	4603      	mov	r3, r0
 8007632:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007634:	7bbb      	ldrb	r3, [r7, #14]
 8007636:	b2db      	uxtb	r3, r3
 8007638:	2b00      	cmp	r3, #0
 800763a:	f040 8152 	bne.w	80078e2 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800764c:	2b01      	cmp	r3, #1
 800764e:	d103      	bne.n	8007658 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2208      	movs	r2, #8
 8007654:	701a      	strb	r2, [r3, #0]
 8007656:	e002      	b.n	800765e <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2207      	movs	r2, #7
 800765c:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2205      	movs	r2, #5
 8007662:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007672:	2200      	movs	r2, #0
 8007674:	4619      	mov	r1, r3
 8007676:	f001 fbd3 	bl	8008e20 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800767a:	e132      	b.n	80078e2 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007682:	2b00      	cmp	r3, #0
 8007684:	f000 812f 	beq.w	80078e6 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800768e:	2101      	movs	r1, #1
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2208      	movs	r2, #8
 8007698:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2205      	movs	r2, #5
 800769e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80076ae:	2200      	movs	r2, #0
 80076b0:	4619      	mov	r1, r3
 80076b2:	f001 fbb5 	bl	8008e20 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80076b6:	e116      	b.n	80078e6 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80076be:	b29b      	uxth	r3, r3
 80076c0:	4619      	mov	r1, r3
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 fcf6 	bl	80080b4 <USBH_SetCfg>
 80076c8:	4603      	mov	r3, r0
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d102      	bne.n	80076d4 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2209      	movs	r2, #9
 80076d2:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80076e8:	2200      	movs	r2, #0
 80076ea:	4619      	mov	r1, r3
 80076ec:	f001 fb98 	bl	8008e20 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80076f0:	e0fc      	b.n	80078ec <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80076f8:	f003 0320 	and.w	r3, r3, #32
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d00a      	beq.n	8007716 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007700:	2101      	movs	r1, #1
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 fcf9 	bl	80080fa <USBH_SetFeature>
 8007708:	4603      	mov	r3, r0
 800770a:	2b00      	cmp	r3, #0
 800770c:	d106      	bne.n	800771c <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	220a      	movs	r2, #10
 8007712:	701a      	strb	r2, [r3, #0]
 8007714:	e002      	b.n	800771c <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	220a      	movs	r2, #10
 800771a:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2201      	movs	r2, #1
 8007720:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007730:	2200      	movs	r2, #0
 8007732:	4619      	mov	r1, r3
 8007734:	f001 fb74 	bl	8008e20 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007738:	e0d8      	b.n	80078ec <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007740:	2b00      	cmp	r3, #0
 8007742:	d03f      	beq.n	80077c4 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800774c:	2300      	movs	r3, #0
 800774e:	73fb      	strb	r3, [r7, #15]
 8007750:	e016      	b.n	8007780 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007752:	7bfa      	ldrb	r2, [r7, #15]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	32de      	adds	r2, #222	; 0xde
 8007758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800775c:	791a      	ldrb	r2, [r3, #4]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007764:	429a      	cmp	r2, r3
 8007766:	d108      	bne.n	800777a <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007768:	7bfa      	ldrb	r2, [r7, #15]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	32de      	adds	r2, #222	; 0xde
 800776e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007778:	e005      	b.n	8007786 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800777a:	7bfb      	ldrb	r3, [r7, #15]
 800777c:	3301      	adds	r3, #1
 800777e:	73fb      	strb	r3, [r7, #15]
 8007780:	7bfb      	ldrb	r3, [r7, #15]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d0e5      	beq.n	8007752 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800778c:	2b00      	cmp	r3, #0
 800778e:	d016      	beq.n	80077be <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	4798      	blx	r3
 800779c:	4603      	mov	r3, r0
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d109      	bne.n	80077b6 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2206      	movs	r2, #6
 80077a6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80077ae:	2103      	movs	r1, #3
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	4798      	blx	r3
 80077b4:	e006      	b.n	80077c4 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	220d      	movs	r2, #13
 80077ba:	701a      	strb	r2, [r3, #0]
 80077bc:	e002      	b.n	80077c4 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	220d      	movs	r2, #13
 80077c2:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2205      	movs	r2, #5
 80077c8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80077d8:	2200      	movs	r2, #0
 80077da:	4619      	mov	r1, r3
 80077dc:	f001 fb20 	bl	8008e20 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80077e0:	e084      	b.n	80078ec <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d017      	beq.n	800781c <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	4798      	blx	r3
 80077f8:	4603      	mov	r3, r0
 80077fa:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80077fc:	7bbb      	ldrb	r3, [r7, #14]
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	2b00      	cmp	r3, #0
 8007802:	d103      	bne.n	800780c <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	220b      	movs	r2, #11
 8007808:	701a      	strb	r2, [r3, #0]
 800780a:	e00a      	b.n	8007822 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800780c:	7bbb      	ldrb	r3, [r7, #14]
 800780e:	b2db      	uxtb	r3, r3
 8007810:	2b02      	cmp	r3, #2
 8007812:	d106      	bne.n	8007822 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	220d      	movs	r2, #13
 8007818:	701a      	strb	r2, [r3, #0]
 800781a:	e002      	b.n	8007822 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	220d      	movs	r2, #13
 8007820:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2205      	movs	r2, #5
 8007826:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007836:	2200      	movs	r2, #0
 8007838:	4619      	mov	r1, r3
 800783a:	f001 faf1 	bl	8008e20 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800783e:	e055      	b.n	80078ec <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007846:	2b00      	cmp	r3, #0
 8007848:	d04f      	beq.n	80078ea <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007850:	695b      	ldr	r3, [r3, #20]
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	4798      	blx	r3
      }
      break;
 8007856:	e048      	b.n	80078ea <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f7ff fcf7 	bl	8007254 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800786c:	2b00      	cmp	r3, #0
 800786e:	d009      	beq.n	8007884 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007876:	68db      	ldr	r3, [r3, #12]
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2200      	movs	r2, #0
 8007880:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800788a:	2b00      	cmp	r3, #0
 800788c:	d005      	beq.n	800789a <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007894:	2105      	movs	r1, #5
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d107      	bne.n	80078b6 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f7ff fdb0 	bl	8007414 <USBH_Start>
 80078b4:	e002      	b.n	80078bc <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f005 fbe0 	bl	800d07c <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2201      	movs	r2, #1
 80078c0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80078d0:	2200      	movs	r2, #0
 80078d2:	4619      	mov	r1, r3
 80078d4:	f001 faa4 	bl	8008e20 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80078d8:	e008      	b.n	80078ec <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 80078da:	bf00      	nop
 80078dc:	e006      	b.n	80078ec <USBH_Process+0x4b8>
      break;
 80078de:	bf00      	nop
 80078e0:	e004      	b.n	80078ec <USBH_Process+0x4b8>
      break;
 80078e2:	bf00      	nop
 80078e4:	e002      	b.n	80078ec <USBH_Process+0x4b8>
    break;
 80078e6:	bf00      	nop
 80078e8:	e000      	b.n	80078ec <USBH_Process+0x4b8>
      break;
 80078ea:	bf00      	nop
  }
  return USBH_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3710      	adds	r7, #16
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop

080078f8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b088      	sub	sp, #32
 80078fc:	af04      	add	r7, sp, #16
 80078fe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007900:	2301      	movs	r3, #1
 8007902:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007904:	2301      	movs	r3, #1
 8007906:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	785b      	ldrb	r3, [r3, #1]
 800790c:	2b07      	cmp	r3, #7
 800790e:	f200 8208 	bhi.w	8007d22 <USBH_HandleEnum+0x42a>
 8007912:	a201      	add	r2, pc, #4	; (adr r2, 8007918 <USBH_HandleEnum+0x20>)
 8007914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007918:	08007939 	.word	0x08007939
 800791c:	080079f7 	.word	0x080079f7
 8007920:	08007a61 	.word	0x08007a61
 8007924:	08007aef 	.word	0x08007aef
 8007928:	08007b59 	.word	0x08007b59
 800792c:	08007bc9 	.word	0x08007bc9
 8007930:	08007c65 	.word	0x08007c65
 8007934:	08007ce3 	.word	0x08007ce3
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007938:	2108      	movs	r1, #8
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 faea 	bl	8007f14 <USBH_Get_DevDesc>
 8007940:	4603      	mov	r3, r0
 8007942:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007944:	7bbb      	ldrb	r3, [r7, #14]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d130      	bne.n	80079ac <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	7919      	ldrb	r1, [r3, #4]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800796e:	b292      	uxth	r2, r2
 8007970:	9202      	str	r2, [sp, #8]
 8007972:	2200      	movs	r2, #0
 8007974:	9201      	str	r2, [sp, #4]
 8007976:	9300      	str	r3, [sp, #0]
 8007978:	4603      	mov	r3, r0
 800797a:	2280      	movs	r2, #128	; 0x80
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f001 f903 	bl	8008b88 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	7959      	ldrb	r1, [r3, #5]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007996:	b292      	uxth	r2, r2
 8007998:	9202      	str	r2, [sp, #8]
 800799a:	2200      	movs	r2, #0
 800799c:	9201      	str	r2, [sp, #4]
 800799e:	9300      	str	r3, [sp, #0]
 80079a0:	4603      	mov	r3, r0
 80079a2:	2200      	movs	r2, #0
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f001 f8ef 	bl	8008b88 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80079aa:	e1bc      	b.n	8007d26 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079ac:	7bbb      	ldrb	r3, [r7, #14]
 80079ae:	2b03      	cmp	r3, #3
 80079b0:	f040 81b9 	bne.w	8007d26 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80079ba:	3301      	adds	r3, #1
 80079bc:	b2da      	uxtb	r2, r3
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80079ca:	2b03      	cmp	r3, #3
 80079cc:	d903      	bls.n	80079d6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	220d      	movs	r2, #13
 80079d2:	701a      	strb	r2, [r3, #0]
      break;
 80079d4:	e1a7      	b.n	8007d26 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	795b      	ldrb	r3, [r3, #5]
 80079da:	4619      	mov	r1, r3
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f001 f923 	bl	8008c28 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	791b      	ldrb	r3, [r3, #4]
 80079e6:	4619      	mov	r1, r3
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f001 f91d 	bl	8008c28 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	701a      	strb	r2, [r3, #0]
      break;
 80079f4:	e197      	b.n	8007d26 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80079f6:	2112      	movs	r1, #18
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 fa8b 	bl	8007f14 <USBH_Get_DevDesc>
 80079fe:	4603      	mov	r3, r0
 8007a00:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a02:	7bbb      	ldrb	r3, [r7, #14]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d103      	bne.n	8007a10 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2202      	movs	r2, #2
 8007a0c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007a0e:	e18c      	b.n	8007d2a <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a10:	7bbb      	ldrb	r3, [r7, #14]
 8007a12:	2b03      	cmp	r3, #3
 8007a14:	f040 8189 	bne.w	8007d2a <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a1e:	3301      	adds	r3, #1
 8007a20:	b2da      	uxtb	r2, r3
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a2e:	2b03      	cmp	r3, #3
 8007a30:	d903      	bls.n	8007a3a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	220d      	movs	r2, #13
 8007a36:	701a      	strb	r2, [r3, #0]
      break;
 8007a38:	e177      	b.n	8007d2a <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	795b      	ldrb	r3, [r3, #5]
 8007a3e:	4619      	mov	r1, r3
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f001 f8f1 	bl	8008c28 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	791b      	ldrb	r3, [r3, #4]
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f001 f8eb 	bl	8008c28 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2200      	movs	r2, #0
 8007a56:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	701a      	strb	r2, [r3, #0]
      break;
 8007a5e:	e164      	b.n	8007d2a <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007a60:	2101      	movs	r1, #1
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 fb02 	bl	800806c <USBH_SetAddress>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a6c:	7bbb      	ldrb	r3, [r7, #14]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d132      	bne.n	8007ad8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007a72:	2002      	movs	r0, #2
 8007a74:	f005 fc67 	bl	800d346 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2203      	movs	r2, #3
 8007a84:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	7919      	ldrb	r1, [r3, #4]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007a9a:	b292      	uxth	r2, r2
 8007a9c:	9202      	str	r2, [sp, #8]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	9201      	str	r2, [sp, #4]
 8007aa2:	9300      	str	r3, [sp, #0]
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	2280      	movs	r2, #128	; 0x80
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f001 f86d 	bl	8008b88 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	7959      	ldrb	r1, [r3, #5]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007ac2:	b292      	uxth	r2, r2
 8007ac4:	9202      	str	r2, [sp, #8]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	9201      	str	r2, [sp, #4]
 8007aca:	9300      	str	r3, [sp, #0]
 8007acc:	4603      	mov	r3, r0
 8007ace:	2200      	movs	r2, #0
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f001 f859 	bl	8008b88 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007ad6:	e12a      	b.n	8007d2e <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ad8:	7bbb      	ldrb	r3, [r7, #14]
 8007ada:	2b03      	cmp	r3, #3
 8007adc:	f040 8127 	bne.w	8007d2e <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	220d      	movs	r2, #13
 8007ae4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	705a      	strb	r2, [r3, #1]
      break;
 8007aec:	e11f      	b.n	8007d2e <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007aee:	2109      	movs	r1, #9
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 fa37 	bl	8007f64 <USBH_Get_CfgDesc>
 8007af6:	4603      	mov	r3, r0
 8007af8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007afa:	7bbb      	ldrb	r3, [r7, #14]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d103      	bne.n	8007b08 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2204      	movs	r2, #4
 8007b04:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007b06:	e114      	b.n	8007d32 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b08:	7bbb      	ldrb	r3, [r7, #14]
 8007b0a:	2b03      	cmp	r3, #3
 8007b0c:	f040 8111 	bne.w	8007d32 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b16:	3301      	adds	r3, #1
 8007b18:	b2da      	uxtb	r2, r3
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b26:	2b03      	cmp	r3, #3
 8007b28:	d903      	bls.n	8007b32 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	220d      	movs	r2, #13
 8007b2e:	701a      	strb	r2, [r3, #0]
      break;
 8007b30:	e0ff      	b.n	8007d32 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	795b      	ldrb	r3, [r3, #5]
 8007b36:	4619      	mov	r1, r3
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f001 f875 	bl	8008c28 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	791b      	ldrb	r3, [r3, #4]
 8007b42:	4619      	mov	r1, r3
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f001 f86f 	bl	8008c28 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	701a      	strb	r2, [r3, #0]
      break;
 8007b56:	e0ec      	b.n	8007d32 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007b5e:	4619      	mov	r1, r3
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 f9ff 	bl	8007f64 <USBH_Get_CfgDesc>
 8007b66:	4603      	mov	r3, r0
 8007b68:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b6a:	7bbb      	ldrb	r3, [r7, #14]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d103      	bne.n	8007b78 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2205      	movs	r2, #5
 8007b74:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007b76:	e0de      	b.n	8007d36 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b78:	7bbb      	ldrb	r3, [r7, #14]
 8007b7a:	2b03      	cmp	r3, #3
 8007b7c:	f040 80db 	bne.w	8007d36 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b86:	3301      	adds	r3, #1
 8007b88:	b2da      	uxtb	r2, r3
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b96:	2b03      	cmp	r3, #3
 8007b98:	d903      	bls.n	8007ba2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	220d      	movs	r2, #13
 8007b9e:	701a      	strb	r2, [r3, #0]
      break;
 8007ba0:	e0c9      	b.n	8007d36 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	795b      	ldrb	r3, [r3, #5]
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f001 f83d 	bl	8008c28 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	791b      	ldrb	r3, [r3, #4]
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f001 f837 	bl	8008c28 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	701a      	strb	r2, [r3, #0]
      break;
 8007bc6:	e0b6      	b.n	8007d36 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d036      	beq.n	8007c40 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007bde:	23ff      	movs	r3, #255	; 0xff
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 f9e3 	bl	8007fac <USBH_Get_StringDesc>
 8007be6:	4603      	mov	r3, r0
 8007be8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007bea:	7bbb      	ldrb	r3, [r7, #14]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d111      	bne.n	8007c14 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2206      	movs	r2, #6
 8007bf4:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2205      	movs	r2, #5
 8007bfa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	f001 f907 	bl	8008e20 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007c12:	e092      	b.n	8007d3a <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c14:	7bbb      	ldrb	r3, [r7, #14]
 8007c16:	2b03      	cmp	r3, #3
 8007c18:	f040 808f 	bne.w	8007d3a <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2206      	movs	r2, #6
 8007c20:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2205      	movs	r2, #5
 8007c26:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007c36:	2200      	movs	r2, #0
 8007c38:	4619      	mov	r1, r3
 8007c3a:	f001 f8f1 	bl	8008e20 <osMessagePut>
      break;
 8007c3e:	e07c      	b.n	8007d3a <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2206      	movs	r2, #6
 8007c44:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2205      	movs	r2, #5
 8007c4a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	f001 f8df 	bl	8008e20 <osMessagePut>
      break;
 8007c62:	e06a      	b.n	8007d3a <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d027      	beq.n	8007cbe <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007c7a:	23ff      	movs	r3, #255	; 0xff
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 f995 	bl	8007fac <USBH_Get_StringDesc>
 8007c82:	4603      	mov	r3, r0
 8007c84:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007c86:	7bbb      	ldrb	r3, [r7, #14]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d103      	bne.n	8007c94 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2207      	movs	r2, #7
 8007c90:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007c92:	e054      	b.n	8007d3e <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c94:	7bbb      	ldrb	r3, [r7, #14]
 8007c96:	2b03      	cmp	r3, #3
 8007c98:	d151      	bne.n	8007d3e <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2207      	movs	r2, #7
 8007c9e:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2205      	movs	r2, #5
 8007ca4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	f001 f8b2 	bl	8008e20 <osMessagePut>
      break;
 8007cbc:	e03f      	b.n	8007d3e <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2207      	movs	r2, #7
 8007cc2:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2205      	movs	r2, #5
 8007cc8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007cd8:	2200      	movs	r2, #0
 8007cda:	4619      	mov	r1, r3
 8007cdc:	f001 f8a0 	bl	8008e20 <osMessagePut>
      break;
 8007ce0:	e02d      	b.n	8007d3e <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d017      	beq.n	8007d1c <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007cf8:	23ff      	movs	r3, #255	; 0xff
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 f956 	bl	8007fac <USBH_Get_StringDesc>
 8007d00:	4603      	mov	r3, r0
 8007d02:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007d04:	7bbb      	ldrb	r3, [r7, #14]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d102      	bne.n	8007d10 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007d0e:	e018      	b.n	8007d42 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d10:	7bbb      	ldrb	r3, [r7, #14]
 8007d12:	2b03      	cmp	r3, #3
 8007d14:	d115      	bne.n	8007d42 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 8007d16:	2300      	movs	r3, #0
 8007d18:	73fb      	strb	r3, [r7, #15]
      break;
 8007d1a:	e012      	b.n	8007d42 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	73fb      	strb	r3, [r7, #15]
      break;
 8007d20:	e00f      	b.n	8007d42 <USBH_HandleEnum+0x44a>

    default:
      break;
 8007d22:	bf00      	nop
 8007d24:	e00e      	b.n	8007d44 <USBH_HandleEnum+0x44c>
      break;
 8007d26:	bf00      	nop
 8007d28:	e00c      	b.n	8007d44 <USBH_HandleEnum+0x44c>
      break;
 8007d2a:	bf00      	nop
 8007d2c:	e00a      	b.n	8007d44 <USBH_HandleEnum+0x44c>
      break;
 8007d2e:	bf00      	nop
 8007d30:	e008      	b.n	8007d44 <USBH_HandleEnum+0x44c>
      break;
 8007d32:	bf00      	nop
 8007d34:	e006      	b.n	8007d44 <USBH_HandleEnum+0x44c>
      break;
 8007d36:	bf00      	nop
 8007d38:	e004      	b.n	8007d44 <USBH_HandleEnum+0x44c>
      break;
 8007d3a:	bf00      	nop
 8007d3c:	e002      	b.n	8007d44 <USBH_HandleEnum+0x44c>
      break;
 8007d3e:	bf00      	nop
 8007d40:	e000      	b.n	8007d44 <USBH_HandleEnum+0x44c>
      break;
 8007d42:	bf00      	nop
  }
  return Status;
 8007d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3710      	adds	r7, #16
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop

08007d50 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b083      	sub	sp, #12
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	683a      	ldr	r2, [r7, #0]
 8007d5e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007d62:	bf00      	nop
 8007d64:	370c      	adds	r7, #12
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr

08007d6e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007d6e:	b580      	push	{r7, lr}
 8007d70:	b082      	sub	sp, #8
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007d7c:	1c5a      	adds	r2, r3, #1
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 f804 	bl	8007d92 <USBH_HandleSof>
}
 8007d8a:	bf00      	nop
 8007d8c:	3708      	adds	r7, #8
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}

08007d92 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007d92:	b580      	push	{r7, lr}
 8007d94:	b082      	sub	sp, #8
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	2b0b      	cmp	r3, #11
 8007da2:	d10a      	bne.n	8007dba <USBH_HandleSof+0x28>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d005      	beq.n	8007dba <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007db4:	699b      	ldr	r3, [r3, #24]
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	4798      	blx	r3
  }
}
 8007dba:	bf00      	nop
 8007dbc:	3708      	adds	r7, #8
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}

08007dc2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007dc2:	b580      	push	{r7, lr}
 8007dc4:	b082      	sub	sp, #8
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2201      	movs	r2, #1
 8007dce:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007de6:	2200      	movs	r2, #0
 8007de8:	4619      	mov	r1, r3
 8007dea:	f001 f819 	bl	8008e20 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007dee:	bf00      	nop
}
 8007df0:	3708      	adds	r7, #8
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007df6:	b480      	push	{r7}
 8007df8:	b083      	sub	sp, #12
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2200      	movs	r2, #0
 8007e02:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007e06:	bf00      	nop
}
 8007e08:	370c      	adds	r7, #12
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr

08007e12 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007e12:	b580      	push	{r7, lr}
 8007e14:	b082      	sub	sp, #8
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2201      	movs	r2, #1
 8007e36:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007e46:	2200      	movs	r2, #0
 8007e48:	4619      	mov	r1, r3
 8007e4a:	f000 ffe9 	bl	8008e20 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007e4e:	2300      	movs	r3, #0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3708      	adds	r7, #8
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2201      	movs	r2, #1
 8007e64:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f005 f91a 	bl	800d0b2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	791b      	ldrb	r3, [r3, #4]
 8007e82:	4619      	mov	r1, r3
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 fecf 	bl	8008c28 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	795b      	ldrb	r3, [r3, #5]
 8007e8e:	4619      	mov	r1, r3
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 fec9 	bl	8008c28 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2201      	movs	r2, #1
 8007e9a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007eaa:	2200      	movs	r2, #0
 8007eac:	4619      	mov	r1, r3
 8007eae:	f000 ffb7 	bl	8008e20 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007eb2:	2300      	movs	r3, #0
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3708      	adds	r7, #8
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b086      	sub	sp, #24
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 8007eca:	f107 030c 	add.w	r3, r7, #12
 8007ece:	f04f 32ff 	mov.w	r2, #4294967295
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f000 ffe4 	bl	8008ea0 <osMessageGet>
    if (event.status == osEventMessage)
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2b10      	cmp	r3, #16
 8007edc:	d1f2      	bne.n	8007ec4 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f7ff faa8 	bl	8007434 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8007ee4:	e7ee      	b.n	8007ec4 <USBH_Process_OS+0x8>

08007ee6 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8007ee6:	b580      	push	{r7, lr}
 8007ee8:	b082      	sub	sp, #8
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007f02:	2200      	movs	r2, #0
 8007f04:	4619      	mov	r1, r3
 8007f06:	f000 ff8b 	bl	8008e20 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 8007f0a:	2300      	movs	r3, #0
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3708      	adds	r7, #8
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b086      	sub	sp, #24
 8007f18:	af02      	add	r7, sp, #8
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	460b      	mov	r3, r1
 8007f1e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007f26:	78fb      	ldrb	r3, [r7, #3]
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	9300      	str	r3, [sp, #0]
 8007f2c:	4613      	mov	r3, r2
 8007f2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f32:	2100      	movs	r1, #0
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 f864 	bl	8008002 <USBH_GetDescriptor>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	73fb      	strb	r3, [r7, #15]
 8007f3e:	7bfb      	ldrb	r3, [r7, #15]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d10a      	bne.n	8007f5a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007f50:	78fa      	ldrb	r2, [r7, #3]
 8007f52:	b292      	uxth	r2, r2
 8007f54:	4619      	mov	r1, r3
 8007f56:	f000 f918 	bl	800818a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3710      	adds	r7, #16
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b086      	sub	sp, #24
 8007f68:	af02      	add	r7, sp, #8
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	460b      	mov	r3, r1
 8007f6e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	331c      	adds	r3, #28
 8007f74:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007f76:	887b      	ldrh	r3, [r7, #2]
 8007f78:	9300      	str	r3, [sp, #0]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f80:	2100      	movs	r1, #0
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 f83d 	bl	8008002 <USBH_GetDescriptor>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	72fb      	strb	r3, [r7, #11]
 8007f8c:	7afb      	ldrb	r3, [r7, #11]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d107      	bne.n	8007fa2 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007f98:	887a      	ldrh	r2, [r7, #2]
 8007f9a:	68f9      	ldr	r1, [r7, #12]
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f000 f964 	bl	800826a <USBH_ParseCfgDesc>
  }

  return status;
 8007fa2:	7afb      	ldrb	r3, [r7, #11]
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3710      	adds	r7, #16
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b088      	sub	sp, #32
 8007fb0:	af02      	add	r7, sp, #8
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	607a      	str	r2, [r7, #4]
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	460b      	mov	r3, r1
 8007fba:	72fb      	strb	r3, [r7, #11]
 8007fbc:	4613      	mov	r3, r2
 8007fbe:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007fc0:	7afb      	ldrb	r3, [r7, #11]
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007fc8:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007fd0:	893b      	ldrh	r3, [r7, #8]
 8007fd2:	9300      	str	r3, [sp, #0]
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	2100      	movs	r1, #0
 8007fd8:	68f8      	ldr	r0, [r7, #12]
 8007fda:	f000 f812 	bl	8008002 <USBH_GetDescriptor>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	75fb      	strb	r3, [r7, #23]
 8007fe2:	7dfb      	ldrb	r3, [r7, #23]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d107      	bne.n	8007ff8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007fee:	893a      	ldrh	r2, [r7, #8]
 8007ff0:	6879      	ldr	r1, [r7, #4]
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f000 fa37 	bl	8008466 <USBH_ParseStringDesc>
  }

  return status;
 8007ff8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3718      	adds	r7, #24
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}

08008002 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008002:	b580      	push	{r7, lr}
 8008004:	b084      	sub	sp, #16
 8008006:	af00      	add	r7, sp, #0
 8008008:	60f8      	str	r0, [r7, #12]
 800800a:	607b      	str	r3, [r7, #4]
 800800c:	460b      	mov	r3, r1
 800800e:	72fb      	strb	r3, [r7, #11]
 8008010:	4613      	mov	r3, r2
 8008012:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	789b      	ldrb	r3, [r3, #2]
 8008018:	2b01      	cmp	r3, #1
 800801a:	d11c      	bne.n	8008056 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800801c:	7afb      	ldrb	r3, [r7, #11]
 800801e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008022:	b2da      	uxtb	r2, r3
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2206      	movs	r2, #6
 800802c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	893a      	ldrh	r2, [r7, #8]
 8008032:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008034:	893b      	ldrh	r3, [r7, #8]
 8008036:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800803a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800803e:	d104      	bne.n	800804a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f240 4209 	movw	r2, #1033	; 0x409
 8008046:	829a      	strh	r2, [r3, #20]
 8008048:	e002      	b.n	8008050 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2200      	movs	r2, #0
 800804e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	8b3a      	ldrh	r2, [r7, #24]
 8008054:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008056:	8b3b      	ldrh	r3, [r7, #24]
 8008058:	461a      	mov	r2, r3
 800805a:	6879      	ldr	r1, [r7, #4]
 800805c:	68f8      	ldr	r0, [r7, #12]
 800805e:	f000 fa50 	bl	8008502 <USBH_CtlReq>
 8008062:	4603      	mov	r3, r0
}
 8008064:	4618      	mov	r0, r3
 8008066:	3710      	adds	r7, #16
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	460b      	mov	r3, r1
 8008076:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	789b      	ldrb	r3, [r3, #2]
 800807c:	2b01      	cmp	r3, #1
 800807e:	d10f      	bne.n	80080a0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2200      	movs	r2, #0
 8008084:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2205      	movs	r2, #5
 800808a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800808c:	78fb      	ldrb	r3, [r7, #3]
 800808e:	b29a      	uxth	r2, r3
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2200      	movs	r2, #0
 800809e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80080a0:	2200      	movs	r2, #0
 80080a2:	2100      	movs	r1, #0
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 fa2c 	bl	8008502 <USBH_CtlReq>
 80080aa:	4603      	mov	r3, r0
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3708      	adds	r7, #8
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	460b      	mov	r3, r1
 80080be:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	789b      	ldrb	r3, [r3, #2]
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	d10e      	bne.n	80080e6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2209      	movs	r2, #9
 80080d2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	887a      	ldrh	r2, [r7, #2]
 80080d8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2200      	movs	r2, #0
 80080e4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80080e6:	2200      	movs	r2, #0
 80080e8:	2100      	movs	r1, #0
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 fa09 	bl	8008502 <USBH_CtlReq>
 80080f0:	4603      	mov	r3, r0
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3708      	adds	r7, #8
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}

080080fa <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80080fa:	b580      	push	{r7, lr}
 80080fc:	b082      	sub	sp, #8
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
 8008102:	460b      	mov	r3, r1
 8008104:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	789b      	ldrb	r3, [r3, #2]
 800810a:	2b01      	cmp	r3, #1
 800810c:	d10f      	bne.n	800812e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2200      	movs	r2, #0
 8008112:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2203      	movs	r2, #3
 8008118:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800811a:	78fb      	ldrb	r3, [r7, #3]
 800811c:	b29a      	uxth	r2, r3
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800812e:	2200      	movs	r2, #0
 8008130:	2100      	movs	r1, #0
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 f9e5 	bl	8008502 <USBH_CtlReq>
 8008138:	4603      	mov	r3, r0
}
 800813a:	4618      	mov	r0, r3
 800813c:	3708      	adds	r7, #8
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}

08008142 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008142:	b580      	push	{r7, lr}
 8008144:	b082      	sub	sp, #8
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
 800814a:	460b      	mov	r3, r1
 800814c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	789b      	ldrb	r3, [r3, #2]
 8008152:	2b01      	cmp	r3, #1
 8008154:	d10f      	bne.n	8008176 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2202      	movs	r2, #2
 800815a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2201      	movs	r2, #1
 8008160:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2200      	movs	r2, #0
 8008166:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008168:	78fb      	ldrb	r3, [r7, #3]
 800816a:	b29a      	uxth	r2, r3
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8008176:	2200      	movs	r2, #0
 8008178:	2100      	movs	r1, #0
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 f9c1 	bl	8008502 <USBH_CtlReq>
 8008180:	4603      	mov	r3, r0
}
 8008182:	4618      	mov	r0, r3
 8008184:	3708      	adds	r7, #8
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800818a:	b480      	push	{r7}
 800818c:	b085      	sub	sp, #20
 800818e:	af00      	add	r7, sp, #0
 8008190:	60f8      	str	r0, [r7, #12]
 8008192:	60b9      	str	r1, [r7, #8]
 8008194:	4613      	mov	r3, r2
 8008196:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	781a      	ldrb	r2, [r3, #0]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	785a      	ldrb	r2, [r3, #1]
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	3302      	adds	r3, #2
 80081ac:	781b      	ldrb	r3, [r3, #0]
 80081ae:	b29a      	uxth	r2, r3
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	3303      	adds	r3, #3
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	021b      	lsls	r3, r3, #8
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	4313      	orrs	r3, r2
 80081be:	b29a      	uxth	r2, r3
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	791a      	ldrb	r2, [r3, #4]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	795a      	ldrb	r2, [r3, #5]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	799a      	ldrb	r2, [r3, #6]
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	79da      	ldrb	r2, [r3, #7]
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80081e4:	88fb      	ldrh	r3, [r7, #6]
 80081e6:	2b08      	cmp	r3, #8
 80081e8:	d939      	bls.n	800825e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	3308      	adds	r3, #8
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	b29a      	uxth	r2, r3
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	3309      	adds	r3, #9
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	021b      	lsls	r3, r3, #8
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	4313      	orrs	r3, r2
 8008200:	b29a      	uxth	r2, r3
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	330a      	adds	r3, #10
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	b29a      	uxth	r2, r3
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	330b      	adds	r3, #11
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	b29b      	uxth	r3, r3
 8008216:	021b      	lsls	r3, r3, #8
 8008218:	b29b      	uxth	r3, r3
 800821a:	4313      	orrs	r3, r2
 800821c:	b29a      	uxth	r2, r3
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	330c      	adds	r3, #12
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	b29a      	uxth	r2, r3
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	330d      	adds	r3, #13
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	b29b      	uxth	r3, r3
 8008232:	021b      	lsls	r3, r3, #8
 8008234:	b29b      	uxth	r3, r3
 8008236:	4313      	orrs	r3, r2
 8008238:	b29a      	uxth	r2, r3
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	7b9a      	ldrb	r2, [r3, #14]
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	7bda      	ldrb	r2, [r3, #15]
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	7c1a      	ldrb	r2, [r3, #16]
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	7c5a      	ldrb	r2, [r3, #17]
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	745a      	strb	r2, [r3, #17]
  }
}
 800825e:	bf00      	nop
 8008260:	3714      	adds	r7, #20
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr

0800826a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800826a:	b580      	push	{r7, lr}
 800826c:	b08a      	sub	sp, #40	; 0x28
 800826e:	af00      	add	r7, sp, #0
 8008270:	60f8      	str	r0, [r7, #12]
 8008272:	60b9      	str	r1, [r7, #8]
 8008274:	4613      	mov	r3, r2
 8008276:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800827c:	2300      	movs	r3, #0
 800827e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8008282:	2300      	movs	r3, #0
 8008284:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	781a      	ldrb	r2, [r3, #0]
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	785a      	ldrb	r2, [r3, #1]
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	3302      	adds	r3, #2
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	b29a      	uxth	r2, r3
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	3303      	adds	r3, #3
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	021b      	lsls	r3, r3, #8
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	4313      	orrs	r3, r2
 80082b2:	b29a      	uxth	r2, r3
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	791a      	ldrb	r2, [r3, #4]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	795a      	ldrb	r2, [r3, #5]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	799a      	ldrb	r2, [r3, #6]
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	79da      	ldrb	r2, [r3, #7]
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	7a1a      	ldrb	r2, [r3, #8]
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80082e0:	88fb      	ldrh	r3, [r7, #6]
 80082e2:	2b09      	cmp	r3, #9
 80082e4:	d95f      	bls.n	80083a6 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80082e6:	2309      	movs	r3, #9
 80082e8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80082ea:	2300      	movs	r3, #0
 80082ec:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80082ee:	e051      	b.n	8008394 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80082f0:	f107 0316 	add.w	r3, r7, #22
 80082f4:	4619      	mov	r1, r3
 80082f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80082f8:	f000 f8e8 	bl	80084cc <USBH_GetNextDesc>
 80082fc:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80082fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008300:	785b      	ldrb	r3, [r3, #1]
 8008302:	2b04      	cmp	r3, #4
 8008304:	d146      	bne.n	8008394 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8008306:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800830a:	221a      	movs	r2, #26
 800830c:	fb02 f303 	mul.w	r3, r2, r3
 8008310:	3308      	adds	r3, #8
 8008312:	68fa      	ldr	r2, [r7, #12]
 8008314:	4413      	add	r3, r2
 8008316:	3302      	adds	r3, #2
 8008318:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800831a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800831c:	69f8      	ldr	r0, [r7, #28]
 800831e:	f000 f846 	bl	80083ae <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008322:	2300      	movs	r3, #0
 8008324:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008328:	2300      	movs	r3, #0
 800832a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800832c:	e022      	b.n	8008374 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800832e:	f107 0316 	add.w	r3, r7, #22
 8008332:	4619      	mov	r1, r3
 8008334:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008336:	f000 f8c9 	bl	80084cc <USBH_GetNextDesc>
 800833a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800833c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833e:	785b      	ldrb	r3, [r3, #1]
 8008340:	2b05      	cmp	r3, #5
 8008342:	d117      	bne.n	8008374 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008344:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008348:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800834c:	3201      	adds	r2, #1
 800834e:	00d2      	lsls	r2, r2, #3
 8008350:	211a      	movs	r1, #26
 8008352:	fb01 f303 	mul.w	r3, r1, r3
 8008356:	4413      	add	r3, r2
 8008358:	3308      	adds	r3, #8
 800835a:	68fa      	ldr	r2, [r7, #12]
 800835c:	4413      	add	r3, r2
 800835e:	3304      	adds	r3, #4
 8008360:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8008362:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008364:	69b8      	ldr	r0, [r7, #24]
 8008366:	f000 f851 	bl	800840c <USBH_ParseEPDesc>
            ep_ix++;
 800836a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800836e:	3301      	adds	r3, #1
 8008370:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008374:	69fb      	ldr	r3, [r7, #28]
 8008376:	791b      	ldrb	r3, [r3, #4]
 8008378:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800837c:	429a      	cmp	r2, r3
 800837e:	d204      	bcs.n	800838a <USBH_ParseCfgDesc+0x120>
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	885a      	ldrh	r2, [r3, #2]
 8008384:	8afb      	ldrh	r3, [r7, #22]
 8008386:	429a      	cmp	r2, r3
 8008388:	d8d1      	bhi.n	800832e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800838a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800838e:	3301      	adds	r3, #1
 8008390:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008394:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008398:	2b01      	cmp	r3, #1
 800839a:	d804      	bhi.n	80083a6 <USBH_ParseCfgDesc+0x13c>
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	885a      	ldrh	r2, [r3, #2]
 80083a0:	8afb      	ldrh	r3, [r7, #22]
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d8a4      	bhi.n	80082f0 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80083a6:	bf00      	nop
 80083a8:	3728      	adds	r7, #40	; 0x28
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}

080083ae <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80083ae:	b480      	push	{r7}
 80083b0:	b083      	sub	sp, #12
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
 80083b6:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	781a      	ldrb	r2, [r3, #0]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	785a      	ldrb	r2, [r3, #1]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	789a      	ldrb	r2, [r3, #2]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	78da      	ldrb	r2, [r3, #3]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	791a      	ldrb	r2, [r3, #4]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	795a      	ldrb	r2, [r3, #5]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	799a      	ldrb	r2, [r3, #6]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	79da      	ldrb	r2, [r3, #7]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	7a1a      	ldrb	r2, [r3, #8]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	721a      	strb	r2, [r3, #8]
}
 8008400:	bf00      	nop
 8008402:	370c      	adds	r7, #12
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr

0800840c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800840c:	b480      	push	{r7}
 800840e:	b083      	sub	sp, #12
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	781a      	ldrb	r2, [r3, #0]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	785a      	ldrb	r2, [r3, #1]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	789a      	ldrb	r2, [r3, #2]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	78da      	ldrb	r2, [r3, #3]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	3304      	adds	r3, #4
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	b29a      	uxth	r2, r3
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	3305      	adds	r3, #5
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	b29b      	uxth	r3, r3
 8008446:	021b      	lsls	r3, r3, #8
 8008448:	b29b      	uxth	r3, r3
 800844a:	4313      	orrs	r3, r2
 800844c:	b29a      	uxth	r2, r3
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	799a      	ldrb	r2, [r3, #6]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	719a      	strb	r2, [r3, #6]
}
 800845a:	bf00      	nop
 800845c:	370c      	adds	r7, #12
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr

08008466 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008466:	b480      	push	{r7}
 8008468:	b087      	sub	sp, #28
 800846a:	af00      	add	r7, sp, #0
 800846c:	60f8      	str	r0, [r7, #12]
 800846e:	60b9      	str	r1, [r7, #8]
 8008470:	4613      	mov	r3, r2
 8008472:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	3301      	adds	r3, #1
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	2b03      	cmp	r3, #3
 800847c:	d120      	bne.n	80084c0 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	1e9a      	subs	r2, r3, #2
 8008484:	88fb      	ldrh	r3, [r7, #6]
 8008486:	4293      	cmp	r3, r2
 8008488:	bf28      	it	cs
 800848a:	4613      	movcs	r3, r2
 800848c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	3302      	adds	r3, #2
 8008492:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008494:	2300      	movs	r3, #0
 8008496:	82fb      	strh	r3, [r7, #22]
 8008498:	e00b      	b.n	80084b2 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800849a:	8afb      	ldrh	r3, [r7, #22]
 800849c:	68fa      	ldr	r2, [r7, #12]
 800849e:	4413      	add	r3, r2
 80084a0:	781a      	ldrb	r2, [r3, #0]
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	701a      	strb	r2, [r3, #0]
      pdest++;
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	3301      	adds	r3, #1
 80084aa:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80084ac:	8afb      	ldrh	r3, [r7, #22]
 80084ae:	3302      	adds	r3, #2
 80084b0:	82fb      	strh	r3, [r7, #22]
 80084b2:	8afa      	ldrh	r2, [r7, #22]
 80084b4:	8abb      	ldrh	r3, [r7, #20]
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d3ef      	bcc.n	800849a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	2200      	movs	r2, #0
 80084be:	701a      	strb	r2, [r3, #0]
  }
}
 80084c0:	bf00      	nop
 80084c2:	371c      	adds	r7, #28
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b085      	sub	sp, #20
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	881a      	ldrh	r2, [r3, #0]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	b29b      	uxth	r3, r3
 80084e0:	4413      	add	r3, r2
 80084e2:	b29a      	uxth	r2, r3
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	781b      	ldrb	r3, [r3, #0]
 80084ec:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	4413      	add	r3, r2
 80084f2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80084f4:	68fb      	ldr	r3, [r7, #12]
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3714      	adds	r7, #20
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr

08008502 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008502:	b580      	push	{r7, lr}
 8008504:	b086      	sub	sp, #24
 8008506:	af00      	add	r7, sp, #0
 8008508:	60f8      	str	r0, [r7, #12]
 800850a:	60b9      	str	r1, [r7, #8]
 800850c:	4613      	mov	r3, r2
 800850e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008510:	2301      	movs	r3, #1
 8008512:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	789b      	ldrb	r3, [r3, #2]
 8008518:	2b01      	cmp	r3, #1
 800851a:	d002      	beq.n	8008522 <USBH_CtlReq+0x20>
 800851c:	2b02      	cmp	r3, #2
 800851e:	d01d      	beq.n	800855c <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8008520:	e043      	b.n	80085aa <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	68ba      	ldr	r2, [r7, #8]
 8008526:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	88fa      	ldrh	r2, [r7, #6]
 800852c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2201      	movs	r2, #1
 8008532:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2202      	movs	r2, #2
 8008538:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800853a:	2301      	movs	r3, #1
 800853c:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2203      	movs	r2, #3
 8008542:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008552:	2200      	movs	r2, #0
 8008554:	4619      	mov	r1, r3
 8008556:	f000 fc63 	bl	8008e20 <osMessagePut>
      break;
 800855a:	e026      	b.n	80085aa <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800855c:	68f8      	ldr	r0, [r7, #12]
 800855e:	f000 f829 	bl	80085b4 <USBH_HandleControl>
 8008562:	4603      	mov	r3, r0
 8008564:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008566:	7dfb      	ldrb	r3, [r7, #23]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d002      	beq.n	8008572 <USBH_CtlReq+0x70>
 800856c:	7dfb      	ldrb	r3, [r7, #23]
 800856e:	2b03      	cmp	r3, #3
 8008570:	d106      	bne.n	8008580 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2201      	movs	r2, #1
 8008576:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2200      	movs	r2, #0
 800857c:	761a      	strb	r2, [r3, #24]
 800857e:	e005      	b.n	800858c <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8008580:	7dfb      	ldrb	r3, [r7, #23]
 8008582:	2b02      	cmp	r3, #2
 8008584:	d102      	bne.n	800858c <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2201      	movs	r2, #1
 800858a:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2203      	movs	r2, #3
 8008590:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80085a0:	2200      	movs	r2, #0
 80085a2:	4619      	mov	r1, r3
 80085a4:	f000 fc3c 	bl	8008e20 <osMessagePut>
      break;
 80085a8:	bf00      	nop
  }
  return status;
 80085aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3718      	adds	r7, #24
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b086      	sub	sp, #24
 80085b8:	af02      	add	r7, sp, #8
 80085ba:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80085bc:	2301      	movs	r3, #1
 80085be:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80085c0:	2300      	movs	r3, #0
 80085c2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	7e1b      	ldrb	r3, [r3, #24]
 80085c8:	3b01      	subs	r3, #1
 80085ca:	2b0a      	cmp	r3, #10
 80085cc:	f200 822b 	bhi.w	8008a26 <USBH_HandleControl+0x472>
 80085d0:	a201      	add	r2, pc, #4	; (adr r2, 80085d8 <USBH_HandleControl+0x24>)
 80085d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d6:	bf00      	nop
 80085d8:	08008605 	.word	0x08008605
 80085dc:	0800861f 	.word	0x0800861f
 80085e0:	080086c1 	.word	0x080086c1
 80085e4:	080086e7 	.word	0x080086e7
 80085e8:	08008773 	.word	0x08008773
 80085ec:	0800879f 	.word	0x0800879f
 80085f0:	08008861 	.word	0x08008861
 80085f4:	08008883 	.word	0x08008883
 80085f8:	08008915 	.word	0x08008915
 80085fc:	0800893d 	.word	0x0800893d
 8008600:	080089cf 	.word	0x080089cf
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f103 0110 	add.w	r1, r3, #16
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	795b      	ldrb	r3, [r3, #5]
 800860e:	461a      	mov	r2, r3
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 fa19 	bl	8008a48 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2202      	movs	r2, #2
 800861a:	761a      	strb	r2, [r3, #24]
      break;
 800861c:	e20e      	b.n	8008a3c <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	795b      	ldrb	r3, [r3, #5]
 8008622:	4619      	mov	r1, r3
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f004 fe31 	bl	800d28c <USBH_LL_GetURBState>
 800862a:	4603      	mov	r3, r0
 800862c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800862e:	7bbb      	ldrb	r3, [r7, #14]
 8008630:	2b01      	cmp	r3, #1
 8008632:	d12c      	bne.n	800868e <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	7c1b      	ldrb	r3, [r3, #16]
 8008638:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800863c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	8adb      	ldrh	r3, [r3, #22]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d00a      	beq.n	800865c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008646:	7b7b      	ldrb	r3, [r7, #13]
 8008648:	2b80      	cmp	r3, #128	; 0x80
 800864a:	d103      	bne.n	8008654 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2203      	movs	r2, #3
 8008650:	761a      	strb	r2, [r3, #24]
 8008652:	e00d      	b.n	8008670 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2205      	movs	r2, #5
 8008658:	761a      	strb	r2, [r3, #24]
 800865a:	e009      	b.n	8008670 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800865c:	7b7b      	ldrb	r3, [r7, #13]
 800865e:	2b80      	cmp	r3, #128	; 0x80
 8008660:	d103      	bne.n	800866a <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2209      	movs	r2, #9
 8008666:	761a      	strb	r2, [r3, #24]
 8008668:	e002      	b.n	8008670 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2207      	movs	r2, #7
 800866e:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2203      	movs	r2, #3
 8008674:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008684:	2200      	movs	r2, #0
 8008686:	4619      	mov	r1, r3
 8008688:	f000 fbca 	bl	8008e20 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800868c:	e1cd      	b.n	8008a2a <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800868e:	7bbb      	ldrb	r3, [r7, #14]
 8008690:	2b04      	cmp	r3, #4
 8008692:	d003      	beq.n	800869c <USBH_HandleControl+0xe8>
 8008694:	7bbb      	ldrb	r3, [r7, #14]
 8008696:	2b02      	cmp	r3, #2
 8008698:	f040 81c7 	bne.w	8008a2a <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	220b      	movs	r2, #11
 80086a0:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2203      	movs	r2, #3
 80086a6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80086b6:	2200      	movs	r2, #0
 80086b8:	4619      	mov	r1, r3
 80086ba:	f000 fbb1 	bl	8008e20 <osMessagePut>
      break;
 80086be:	e1b4      	b.n	8008a2a <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80086c6:	b29a      	uxth	r2, r3
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6899      	ldr	r1, [r3, #8]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	899a      	ldrh	r2, [r3, #12]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	791b      	ldrb	r3, [r3, #4]
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f000 f9f4 	bl	8008ac6 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2204      	movs	r2, #4
 80086e2:	761a      	strb	r2, [r3, #24]
      break;
 80086e4:	e1aa      	b.n	8008a3c <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	791b      	ldrb	r3, [r3, #4]
 80086ea:	4619      	mov	r1, r3
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f004 fdcd 	bl	800d28c <USBH_LL_GetURBState>
 80086f2:	4603      	mov	r3, r0
 80086f4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80086f6:	7bbb      	ldrb	r3, [r7, #14]
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d110      	bne.n	800871e <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2209      	movs	r2, #9
 8008700:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2203      	movs	r2, #3
 8008706:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008716:	2200      	movs	r2, #0
 8008718:	4619      	mov	r1, r3
 800871a:	f000 fb81 	bl	8008e20 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800871e:	7bbb      	ldrb	r3, [r7, #14]
 8008720:	2b05      	cmp	r3, #5
 8008722:	d110      	bne.n	8008746 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008724:	2303      	movs	r3, #3
 8008726:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2203      	movs	r2, #3
 800872c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800873c:	2200      	movs	r2, #0
 800873e:	4619      	mov	r1, r3
 8008740:	f000 fb6e 	bl	8008e20 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008744:	e173      	b.n	8008a2e <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8008746:	7bbb      	ldrb	r3, [r7, #14]
 8008748:	2b04      	cmp	r3, #4
 800874a:	f040 8170 	bne.w	8008a2e <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	220b      	movs	r2, #11
 8008752:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2203      	movs	r2, #3
 8008758:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008768:	2200      	movs	r2, #0
 800876a:	4619      	mov	r1, r3
 800876c:	f000 fb58 	bl	8008e20 <osMessagePut>
      break;
 8008770:	e15d      	b.n	8008a2e <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6899      	ldr	r1, [r3, #8]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	899a      	ldrh	r2, [r3, #12]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	7958      	ldrb	r0, [r3, #5]
 800877e:	2301      	movs	r3, #1
 8008780:	9300      	str	r3, [sp, #0]
 8008782:	4603      	mov	r3, r0
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 f979 	bl	8008a7c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008790:	b29a      	uxth	r2, r3
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2206      	movs	r2, #6
 800879a:	761a      	strb	r2, [r3, #24]
      break;
 800879c:	e14e      	b.n	8008a3c <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	795b      	ldrb	r3, [r3, #5]
 80087a2:	4619      	mov	r1, r3
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f004 fd71 	bl	800d28c <USBH_LL_GetURBState>
 80087aa:	4603      	mov	r3, r0
 80087ac:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80087ae:	7bbb      	ldrb	r3, [r7, #14]
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d111      	bne.n	80087d8 <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2207      	movs	r2, #7
 80087b8:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2203      	movs	r2, #3
 80087be:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80087ce:	2200      	movs	r2, #0
 80087d0:	4619      	mov	r1, r3
 80087d2:	f000 fb25 	bl	8008e20 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80087d6:	e12c      	b.n	8008a32 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 80087d8:	7bbb      	ldrb	r3, [r7, #14]
 80087da:	2b05      	cmp	r3, #5
 80087dc:	d113      	bne.n	8008806 <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	220c      	movs	r2, #12
 80087e2:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80087e4:	2303      	movs	r3, #3
 80087e6:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2203      	movs	r2, #3
 80087ec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80087fc:	2200      	movs	r2, #0
 80087fe:	4619      	mov	r1, r3
 8008800:	f000 fb0e 	bl	8008e20 <osMessagePut>
      break;
 8008804:	e115      	b.n	8008a32 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008806:	7bbb      	ldrb	r3, [r7, #14]
 8008808:	2b02      	cmp	r3, #2
 800880a:	d111      	bne.n	8008830 <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2205      	movs	r2, #5
 8008810:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2203      	movs	r2, #3
 8008816:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008826:	2200      	movs	r2, #0
 8008828:	4619      	mov	r1, r3
 800882a:	f000 faf9 	bl	8008e20 <osMessagePut>
      break;
 800882e:	e100      	b.n	8008a32 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 8008830:	7bbb      	ldrb	r3, [r7, #14]
 8008832:	2b04      	cmp	r3, #4
 8008834:	f040 80fd 	bne.w	8008a32 <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	220b      	movs	r2, #11
 800883c:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800883e:	2302      	movs	r3, #2
 8008840:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2203      	movs	r2, #3
 8008846:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008856:	2200      	movs	r2, #0
 8008858:	4619      	mov	r1, r3
 800885a:	f000 fae1 	bl	8008e20 <osMessagePut>
      break;
 800885e:	e0e8      	b.n	8008a32 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	791b      	ldrb	r3, [r3, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	2100      	movs	r1, #0
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 f92c 	bl	8008ac6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008874:	b29a      	uxth	r2, r3
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2208      	movs	r2, #8
 800887e:	761a      	strb	r2, [r3, #24]

      break;
 8008880:	e0dc      	b.n	8008a3c <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	791b      	ldrb	r3, [r3, #4]
 8008886:	4619      	mov	r1, r3
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f004 fcff 	bl	800d28c <USBH_LL_GetURBState>
 800888e:	4603      	mov	r3, r0
 8008890:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008892:	7bbb      	ldrb	r3, [r7, #14]
 8008894:	2b01      	cmp	r3, #1
 8008896:	d113      	bne.n	80088c0 <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	220d      	movs	r2, #13
 800889c:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800889e:	2300      	movs	r3, #0
 80088a0:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2203      	movs	r2, #3
 80088a6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80088b6:	2200      	movs	r2, #0
 80088b8:	4619      	mov	r1, r3
 80088ba:	f000 fab1 	bl	8008e20 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80088be:	e0ba      	b.n	8008a36 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 80088c0:	7bbb      	ldrb	r3, [r7, #14]
 80088c2:	2b04      	cmp	r3, #4
 80088c4:	d111      	bne.n	80088ea <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	220b      	movs	r2, #11
 80088ca:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2203      	movs	r2, #3
 80088d0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80088e0:	2200      	movs	r2, #0
 80088e2:	4619      	mov	r1, r3
 80088e4:	f000 fa9c 	bl	8008e20 <osMessagePut>
      break;
 80088e8:	e0a5      	b.n	8008a36 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 80088ea:	7bbb      	ldrb	r3, [r7, #14]
 80088ec:	2b05      	cmp	r3, #5
 80088ee:	f040 80a2 	bne.w	8008a36 <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 80088f2:	2303      	movs	r3, #3
 80088f4:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2203      	movs	r2, #3
 80088fa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800890a:	2200      	movs	r2, #0
 800890c:	4619      	mov	r1, r3
 800890e:	f000 fa87 	bl	8008e20 <osMessagePut>
      break;
 8008912:	e090      	b.n	8008a36 <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	795a      	ldrb	r2, [r3, #5]
 8008918:	2301      	movs	r3, #1
 800891a:	9300      	str	r3, [sp, #0]
 800891c:	4613      	mov	r3, r2
 800891e:	2200      	movs	r2, #0
 8008920:	2100      	movs	r1, #0
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f000 f8aa 	bl	8008a7c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800892e:	b29a      	uxth	r2, r3
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	220a      	movs	r2, #10
 8008938:	761a      	strb	r2, [r3, #24]
      break;
 800893a:	e07f      	b.n	8008a3c <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	795b      	ldrb	r3, [r3, #5]
 8008940:	4619      	mov	r1, r3
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f004 fca2 	bl	800d28c <USBH_LL_GetURBState>
 8008948:	4603      	mov	r3, r0
 800894a:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800894c:	7bbb      	ldrb	r3, [r7, #14]
 800894e:	2b01      	cmp	r3, #1
 8008950:	d113      	bne.n	800897a <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 8008952:	2300      	movs	r3, #0
 8008954:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	220d      	movs	r2, #13
 800895a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2203      	movs	r2, #3
 8008960:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008970:	2200      	movs	r2, #0
 8008972:	4619      	mov	r1, r3
 8008974:	f000 fa54 	bl	8008e20 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008978:	e05f      	b.n	8008a3a <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 800897a:	7bbb      	ldrb	r3, [r7, #14]
 800897c:	2b02      	cmp	r3, #2
 800897e:	d111      	bne.n	80089a4 <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2209      	movs	r2, #9
 8008984:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2203      	movs	r2, #3
 800898a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800899a:	2200      	movs	r2, #0
 800899c:	4619      	mov	r1, r3
 800899e:	f000 fa3f 	bl	8008e20 <osMessagePut>
      break;
 80089a2:	e04a      	b.n	8008a3a <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 80089a4:	7bbb      	ldrb	r3, [r7, #14]
 80089a6:	2b04      	cmp	r3, #4
 80089a8:	d147      	bne.n	8008a3a <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	220b      	movs	r2, #11
 80089ae:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2203      	movs	r2, #3
 80089b4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80089c4:	2200      	movs	r2, #0
 80089c6:	4619      	mov	r1, r3
 80089c8:	f000 fa2a 	bl	8008e20 <osMessagePut>
      break;
 80089cc:	e035      	b.n	8008a3a <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	7e5b      	ldrb	r3, [r3, #25]
 80089d2:	3301      	adds	r3, #1
 80089d4:	b2da      	uxtb	r2, r3
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	765a      	strb	r2, [r3, #25]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	7e5b      	ldrb	r3, [r3, #25]
 80089de:	2b02      	cmp	r3, #2
 80089e0:	d806      	bhi.n	80089f0 <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2201      	movs	r2, #1
 80089e6:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2201      	movs	r2, #1
 80089ec:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80089ee:	e025      	b.n	8008a3c <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80089f6:	2106      	movs	r1, #6
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2200      	movs	r2, #0
 8008a00:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	795b      	ldrb	r3, [r3, #5]
 8008a06:	4619      	mov	r1, r3
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f000 f90d 	bl	8008c28 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	791b      	ldrb	r3, [r3, #4]
 8008a12:	4619      	mov	r1, r3
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f000 f907 	bl	8008c28 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008a20:	2302      	movs	r3, #2
 8008a22:	73fb      	strb	r3, [r7, #15]
      break;
 8008a24:	e00a      	b.n	8008a3c <USBH_HandleControl+0x488>

    default:
      break;
 8008a26:	bf00      	nop
 8008a28:	e008      	b.n	8008a3c <USBH_HandleControl+0x488>
      break;
 8008a2a:	bf00      	nop
 8008a2c:	e006      	b.n	8008a3c <USBH_HandleControl+0x488>
      break;
 8008a2e:	bf00      	nop
 8008a30:	e004      	b.n	8008a3c <USBH_HandleControl+0x488>
      break;
 8008a32:	bf00      	nop
 8008a34:	e002      	b.n	8008a3c <USBH_HandleControl+0x488>
      break;
 8008a36:	bf00      	nop
 8008a38:	e000      	b.n	8008a3c <USBH_HandleControl+0x488>
      break;
 8008a3a:	bf00      	nop
  }

  return status;
 8008a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3710      	adds	r7, #16
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
 8008a46:	bf00      	nop

08008a48 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b088      	sub	sp, #32
 8008a4c:	af04      	add	r7, sp, #16
 8008a4e:	60f8      	str	r0, [r7, #12]
 8008a50:	60b9      	str	r1, [r7, #8]
 8008a52:	4613      	mov	r3, r2
 8008a54:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008a56:	79f9      	ldrb	r1, [r7, #7]
 8008a58:	2300      	movs	r3, #0
 8008a5a:	9303      	str	r3, [sp, #12]
 8008a5c:	2308      	movs	r3, #8
 8008a5e:	9302      	str	r3, [sp, #8]
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	9301      	str	r3, [sp, #4]
 8008a64:	2300      	movs	r3, #0
 8008a66:	9300      	str	r3, [sp, #0]
 8008a68:	2300      	movs	r3, #0
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	68f8      	ldr	r0, [r7, #12]
 8008a6e:	f004 fbdc 	bl	800d22a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8008a72:	2300      	movs	r3, #0
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3710      	adds	r7, #16
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b088      	sub	sp, #32
 8008a80:	af04      	add	r7, sp, #16
 8008a82:	60f8      	str	r0, [r7, #12]
 8008a84:	60b9      	str	r1, [r7, #8]
 8008a86:	4611      	mov	r1, r2
 8008a88:	461a      	mov	r2, r3
 8008a8a:	460b      	mov	r3, r1
 8008a8c:	80fb      	strh	r3, [r7, #6]
 8008a8e:	4613      	mov	r3, r2
 8008a90:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d001      	beq.n	8008aa0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008aa0:	7979      	ldrb	r1, [r7, #5]
 8008aa2:	7e3b      	ldrb	r3, [r7, #24]
 8008aa4:	9303      	str	r3, [sp, #12]
 8008aa6:	88fb      	ldrh	r3, [r7, #6]
 8008aa8:	9302      	str	r3, [sp, #8]
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	9301      	str	r3, [sp, #4]
 8008aae:	2301      	movs	r3, #1
 8008ab0:	9300      	str	r3, [sp, #0]
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	68f8      	ldr	r0, [r7, #12]
 8008ab8:	f004 fbb7 	bl	800d22a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008abc:	2300      	movs	r3, #0
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3710      	adds	r7, #16
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}

08008ac6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008ac6:	b580      	push	{r7, lr}
 8008ac8:	b088      	sub	sp, #32
 8008aca:	af04      	add	r7, sp, #16
 8008acc:	60f8      	str	r0, [r7, #12]
 8008ace:	60b9      	str	r1, [r7, #8]
 8008ad0:	4611      	mov	r1, r2
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	80fb      	strh	r3, [r7, #6]
 8008ad8:	4613      	mov	r3, r2
 8008ada:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008adc:	7979      	ldrb	r1, [r7, #5]
 8008ade:	2300      	movs	r3, #0
 8008ae0:	9303      	str	r3, [sp, #12]
 8008ae2:	88fb      	ldrh	r3, [r7, #6]
 8008ae4:	9302      	str	r3, [sp, #8]
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	9301      	str	r3, [sp, #4]
 8008aea:	2301      	movs	r3, #1
 8008aec:	9300      	str	r3, [sp, #0]
 8008aee:	2300      	movs	r3, #0
 8008af0:	2201      	movs	r2, #1
 8008af2:	68f8      	ldr	r0, [r7, #12]
 8008af4:	f004 fb99 	bl	800d22a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008af8:	2300      	movs	r3, #0

}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3710      	adds	r7, #16
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}

08008b02 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008b02:	b580      	push	{r7, lr}
 8008b04:	b088      	sub	sp, #32
 8008b06:	af04      	add	r7, sp, #16
 8008b08:	60f8      	str	r0, [r7, #12]
 8008b0a:	60b9      	str	r1, [r7, #8]
 8008b0c:	4611      	mov	r1, r2
 8008b0e:	461a      	mov	r2, r3
 8008b10:	460b      	mov	r3, r1
 8008b12:	80fb      	strh	r3, [r7, #6]
 8008b14:	4613      	mov	r3, r2
 8008b16:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d001      	beq.n	8008b26 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008b22:	2300      	movs	r3, #0
 8008b24:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008b26:	7979      	ldrb	r1, [r7, #5]
 8008b28:	7e3b      	ldrb	r3, [r7, #24]
 8008b2a:	9303      	str	r3, [sp, #12]
 8008b2c:	88fb      	ldrh	r3, [r7, #6]
 8008b2e:	9302      	str	r3, [sp, #8]
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	9301      	str	r3, [sp, #4]
 8008b34:	2301      	movs	r3, #1
 8008b36:	9300      	str	r3, [sp, #0]
 8008b38:	2302      	movs	r3, #2
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	68f8      	ldr	r0, [r7, #12]
 8008b3e:	f004 fb74 	bl	800d22a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008b42:	2300      	movs	r3, #0
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3710      	adds	r7, #16
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b088      	sub	sp, #32
 8008b50:	af04      	add	r7, sp, #16
 8008b52:	60f8      	str	r0, [r7, #12]
 8008b54:	60b9      	str	r1, [r7, #8]
 8008b56:	4611      	mov	r1, r2
 8008b58:	461a      	mov	r2, r3
 8008b5a:	460b      	mov	r3, r1
 8008b5c:	80fb      	strh	r3, [r7, #6]
 8008b5e:	4613      	mov	r3, r2
 8008b60:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008b62:	7979      	ldrb	r1, [r7, #5]
 8008b64:	2300      	movs	r3, #0
 8008b66:	9303      	str	r3, [sp, #12]
 8008b68:	88fb      	ldrh	r3, [r7, #6]
 8008b6a:	9302      	str	r3, [sp, #8]
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	9301      	str	r3, [sp, #4]
 8008b70:	2301      	movs	r3, #1
 8008b72:	9300      	str	r3, [sp, #0]
 8008b74:	2302      	movs	r3, #2
 8008b76:	2201      	movs	r2, #1
 8008b78:	68f8      	ldr	r0, [r7, #12]
 8008b7a:	f004 fb56 	bl	800d22a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008b7e:	2300      	movs	r3, #0
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3710      	adds	r7, #16
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b086      	sub	sp, #24
 8008b8c:	af04      	add	r7, sp, #16
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	4608      	mov	r0, r1
 8008b92:	4611      	mov	r1, r2
 8008b94:	461a      	mov	r2, r3
 8008b96:	4603      	mov	r3, r0
 8008b98:	70fb      	strb	r3, [r7, #3]
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	70bb      	strb	r3, [r7, #2]
 8008b9e:	4613      	mov	r3, r2
 8008ba0:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008ba2:	7878      	ldrb	r0, [r7, #1]
 8008ba4:	78ba      	ldrb	r2, [r7, #2]
 8008ba6:	78f9      	ldrb	r1, [r7, #3]
 8008ba8:	8b3b      	ldrh	r3, [r7, #24]
 8008baa:	9302      	str	r3, [sp, #8]
 8008bac:	7d3b      	ldrb	r3, [r7, #20]
 8008bae:	9301      	str	r3, [sp, #4]
 8008bb0:	7c3b      	ldrb	r3, [r7, #16]
 8008bb2:	9300      	str	r3, [sp, #0]
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f004 fae9 	bl	800d18e <USBH_LL_OpenPipe>

  return USBH_OK;
 8008bbc:	2300      	movs	r3, #0
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3708      	adds	r7, #8
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}

08008bc6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008bc6:	b580      	push	{r7, lr}
 8008bc8:	b082      	sub	sp, #8
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
 8008bce:	460b      	mov	r3, r1
 8008bd0:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008bd2:	78fb      	ldrb	r3, [r7, #3]
 8008bd4:	4619      	mov	r1, r3
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f004 fb08 	bl	800d1ec <USBH_LL_ClosePipe>

  return USBH_OK;
 8008bdc:	2300      	movs	r3, #0
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3708      	adds	r7, #8
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}

08008be6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008be6:	b580      	push	{r7, lr}
 8008be8:	b084      	sub	sp, #16
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
 8008bee:	460b      	mov	r3, r1
 8008bf0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f000 f836 	bl	8008c64 <USBH_GetFreePipe>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008bfc:	89fb      	ldrh	r3, [r7, #14]
 8008bfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d00a      	beq.n	8008c1c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8008c06:	78fa      	ldrb	r2, [r7, #3]
 8008c08:	89fb      	ldrh	r3, [r7, #14]
 8008c0a:	f003 030f 	and.w	r3, r3, #15
 8008c0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008c12:	6879      	ldr	r1, [r7, #4]
 8008c14:	33e0      	adds	r3, #224	; 0xe0
 8008c16:	009b      	lsls	r3, r3, #2
 8008c18:	440b      	add	r3, r1
 8008c1a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008c1c:	89fb      	ldrh	r3, [r7, #14]
 8008c1e:	b2db      	uxtb	r3, r3
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3710      	adds	r7, #16
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b083      	sub	sp, #12
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	460b      	mov	r3, r1
 8008c32:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008c34:	78fb      	ldrb	r3, [r7, #3]
 8008c36:	2b0a      	cmp	r3, #10
 8008c38:	d80d      	bhi.n	8008c56 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008c3a:	78fb      	ldrb	r3, [r7, #3]
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	33e0      	adds	r3, #224	; 0xe0
 8008c40:	009b      	lsls	r3, r3, #2
 8008c42:	4413      	add	r3, r2
 8008c44:	685a      	ldr	r2, [r3, #4]
 8008c46:	78fb      	ldrb	r3, [r7, #3]
 8008c48:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008c4c:	6879      	ldr	r1, [r7, #4]
 8008c4e:	33e0      	adds	r3, #224	; 0xe0
 8008c50:	009b      	lsls	r3, r3, #2
 8008c52:	440b      	add	r3, r1
 8008c54:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008c56:	2300      	movs	r3, #0
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	370c      	adds	r7, #12
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c62:	4770      	bx	lr

08008c64 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b085      	sub	sp, #20
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008c70:	2300      	movs	r3, #0
 8008c72:	73fb      	strb	r3, [r7, #15]
 8008c74:	e00f      	b.n	8008c96 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008c76:	7bfb      	ldrb	r3, [r7, #15]
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	33e0      	adds	r3, #224	; 0xe0
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	4413      	add	r3, r2
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d102      	bne.n	8008c90 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008c8a:	7bfb      	ldrb	r3, [r7, #15]
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	e007      	b.n	8008ca0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008c90:	7bfb      	ldrb	r3, [r7, #15]
 8008c92:	3301      	adds	r3, #1
 8008c94:	73fb      	strb	r3, [r7, #15]
 8008c96:	7bfb      	ldrb	r3, [r7, #15]
 8008c98:	2b0a      	cmp	r3, #10
 8008c9a:	d9ec      	bls.n	8008c76 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008c9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3714      	adds	r7, #20
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b085      	sub	sp, #20
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008cba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008cbe:	2b84      	cmp	r3, #132	; 0x84
 8008cc0:	d005      	beq.n	8008cce <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008cc2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	4413      	add	r3, r2
 8008cca:	3303      	adds	r3, #3
 8008ccc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008cce:	68fb      	ldr	r3, [r7, #12]
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3714      	adds	r7, #20
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr

08008cdc <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b083      	sub	sp, #12
 8008ce0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ce2:	f3ef 8305 	mrs	r3, IPSR
 8008ce6:	607b      	str	r3, [r7, #4]
  return(result);
 8008ce8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	bf14      	ite	ne
 8008cee:	2301      	movne	r3, #1
 8008cf0:	2300      	moveq	r3, #0
 8008cf2:	b2db      	uxtb	r3, r3
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	370c      	adds	r7, #12
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr

08008d00 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008d04:	f001 fa26 	bl	800a154 <vTaskStartScheduler>
  
  return osOK;
 8008d08:	2300      	movs	r3, #0
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	bd80      	pop	{r7, pc}

08008d0e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008d0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d10:	b089      	sub	sp, #36	; 0x24
 8008d12:	af04      	add	r7, sp, #16
 8008d14:	6078      	str	r0, [r7, #4]
 8008d16:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	695b      	ldr	r3, [r3, #20]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d020      	beq.n	8008d62 <osThreadCreate+0x54>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	699b      	ldr	r3, [r3, #24]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d01c      	beq.n	8008d62 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	685c      	ldr	r4, [r3, #4]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681d      	ldr	r5, [r3, #0]
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	691e      	ldr	r6, [r3, #16]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f7ff ffb6 	bl	8008cac <makeFreeRtosPriority>
 8008d40:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	695b      	ldr	r3, [r3, #20]
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008d4a:	9202      	str	r2, [sp, #8]
 8008d4c:	9301      	str	r3, [sp, #4]
 8008d4e:	9100      	str	r1, [sp, #0]
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	4632      	mov	r2, r6
 8008d54:	4629      	mov	r1, r5
 8008d56:	4620      	mov	r0, r4
 8008d58:	f000 fefb 	bl	8009b52 <xTaskCreateStatic>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	60fb      	str	r3, [r7, #12]
 8008d60:	e01c      	b.n	8008d9c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	685c      	ldr	r4, [r3, #4]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008d6e:	b29e      	uxth	r6, r3
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008d76:	4618      	mov	r0, r3
 8008d78:	f7ff ff98 	bl	8008cac <makeFreeRtosPriority>
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	f107 030c 	add.w	r3, r7, #12
 8008d82:	9301      	str	r3, [sp, #4]
 8008d84:	9200      	str	r2, [sp, #0]
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	4632      	mov	r2, r6
 8008d8a:	4629      	mov	r1, r5
 8008d8c:	4620      	mov	r0, r4
 8008d8e:	f000 ff3a 	bl	8009c06 <xTaskCreate>
 8008d92:	4603      	mov	r3, r0
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d001      	beq.n	8008d9c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	e000      	b.n	8008d9e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3714      	adds	r7, #20
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008da6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008da6:	b580      	push	{r7, lr}
 8008da8:	b084      	sub	sp, #16
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d001      	beq.n	8008dbc <osDelay+0x16>
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	e000      	b.n	8008dbe <osDelay+0x18>
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f001 f862 	bl	8009e88 <vTaskDelay>
  
  return osOK;
 8008dc4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3710      	adds	r7, #16
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}

08008dce <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8008dce:	b590      	push	{r4, r7, lr}
 8008dd0:	b085      	sub	sp, #20
 8008dd2:	af02      	add	r7, sp, #8
 8008dd4:	6078      	str	r0, [r7, #4]
 8008dd6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	689b      	ldr	r3, [r3, #8]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d012      	beq.n	8008e06 <osMessageCreate+0x38>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	68db      	ldr	r3, [r3, #12]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d00e      	beq.n	8008e06 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6818      	ldr	r0, [r3, #0]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6859      	ldr	r1, [r3, #4]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	689a      	ldr	r2, [r3, #8]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	68dc      	ldr	r4, [r3, #12]
 8008df8:	2300      	movs	r3, #0
 8008dfa:	9300      	str	r3, [sp, #0]
 8008dfc:	4623      	mov	r3, r4
 8008dfe:	f000 f9df 	bl	80091c0 <xQueueGenericCreateStatic>
 8008e02:	4603      	mov	r3, r0
 8008e04:	e008      	b.n	8008e18 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6818      	ldr	r0, [r3, #0]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	4619      	mov	r1, r3
 8008e12:	f000 fa48 	bl	80092a6 <xQueueGenericCreate>
 8008e16:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	370c      	adds	r7, #12
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd90      	pop	{r4, r7, pc}

08008e20 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b086      	sub	sp, #24
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d101      	bne.n	8008e3e <osMessagePut+0x1e>
    ticks = 1;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8008e3e:	f7ff ff4d 	bl	8008cdc <inHandlerMode>
 8008e42:	4603      	mov	r3, r0
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d018      	beq.n	8008e7a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8008e48:	f107 0210 	add.w	r2, r7, #16
 8008e4c:	f107 0108 	add.w	r1, r7, #8
 8008e50:	2300      	movs	r3, #0
 8008e52:	68f8      	ldr	r0, [r7, #12]
 8008e54:	f000 fb80 	bl	8009558 <xQueueGenericSendFromISR>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d001      	beq.n	8008e62 <osMessagePut+0x42>
      return osErrorOS;
 8008e5e:	23ff      	movs	r3, #255	; 0xff
 8008e60:	e018      	b.n	8008e94 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d014      	beq.n	8008e92 <osMessagePut+0x72>
 8008e68:	4b0c      	ldr	r3, [pc, #48]	; (8008e9c <osMessagePut+0x7c>)
 8008e6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e6e:	601a      	str	r2, [r3, #0]
 8008e70:	f3bf 8f4f 	dsb	sy
 8008e74:	f3bf 8f6f 	isb	sy
 8008e78:	e00b      	b.n	8008e92 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8008e7a:	f107 0108 	add.w	r1, r7, #8
 8008e7e:	2300      	movs	r3, #0
 8008e80:	697a      	ldr	r2, [r7, #20]
 8008e82:	68f8      	ldr	r0, [r7, #12]
 8008e84:	f000 fa6e 	bl	8009364 <xQueueGenericSend>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d001      	beq.n	8008e92 <osMessagePut+0x72>
      return osErrorOS;
 8008e8e:	23ff      	movs	r3, #255	; 0xff
 8008e90:	e000      	b.n	8008e94 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8008e92:	2300      	movs	r3, #0
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3718      	adds	r7, #24
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}
 8008e9c:	e000ed04 	.word	0xe000ed04

08008ea0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8008ea0:	b590      	push	{r4, r7, lr}
 8008ea2:	b08b      	sub	sp, #44	; 0x2c
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	60f8      	str	r0, [r7, #12]
 8008ea8:	60b9      	str	r1, [r7, #8]
 8008eaa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d10a      	bne.n	8008ed0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8008eba:	2380      	movs	r3, #128	; 0x80
 8008ebc:	617b      	str	r3, [r7, #20]
    return event;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	461c      	mov	r4, r3
 8008ec2:	f107 0314 	add.w	r3, r7, #20
 8008ec6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008eca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008ece:	e054      	b.n	8008f7a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ede:	d103      	bne.n	8008ee8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8008ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8008ee6:	e009      	b.n	8008efc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d006      	beq.n	8008efc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8008ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d101      	bne.n	8008efc <osMessageGet+0x5c>
      ticks = 1;
 8008ef8:	2301      	movs	r3, #1
 8008efa:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8008efc:	f7ff feee 	bl	8008cdc <inHandlerMode>
 8008f00:	4603      	mov	r3, r0
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d01c      	beq.n	8008f40 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8008f06:	f107 0220 	add.w	r2, r7, #32
 8008f0a:	f107 0314 	add.w	r3, r7, #20
 8008f0e:	3304      	adds	r3, #4
 8008f10:	4619      	mov	r1, r3
 8008f12:	68b8      	ldr	r0, [r7, #8]
 8008f14:	f000 fc90 	bl	8009838 <xQueueReceiveFromISR>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d102      	bne.n	8008f24 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8008f1e:	2310      	movs	r3, #16
 8008f20:	617b      	str	r3, [r7, #20]
 8008f22:	e001      	b.n	8008f28 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8008f24:	2300      	movs	r3, #0
 8008f26:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008f28:	6a3b      	ldr	r3, [r7, #32]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d01d      	beq.n	8008f6a <osMessageGet+0xca>
 8008f2e:	4b15      	ldr	r3, [pc, #84]	; (8008f84 <osMessageGet+0xe4>)
 8008f30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f34:	601a      	str	r2, [r3, #0]
 8008f36:	f3bf 8f4f 	dsb	sy
 8008f3a:	f3bf 8f6f 	isb	sy
 8008f3e:	e014      	b.n	8008f6a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8008f40:	f107 0314 	add.w	r3, r7, #20
 8008f44:	3304      	adds	r3, #4
 8008f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f48:	4619      	mov	r1, r3
 8008f4a:	68b8      	ldr	r0, [r7, #8]
 8008f4c:	f000 fb98 	bl	8009680 <xQueueReceive>
 8008f50:	4603      	mov	r3, r0
 8008f52:	2b01      	cmp	r3, #1
 8008f54:	d102      	bne.n	8008f5c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8008f56:	2310      	movs	r3, #16
 8008f58:	617b      	str	r3, [r7, #20]
 8008f5a:	e006      	b.n	8008f6a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8008f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d101      	bne.n	8008f66 <osMessageGet+0xc6>
 8008f62:	2300      	movs	r3, #0
 8008f64:	e000      	b.n	8008f68 <osMessageGet+0xc8>
 8008f66:	2340      	movs	r3, #64	; 0x40
 8008f68:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	461c      	mov	r4, r3
 8008f6e:	f107 0314 	add.w	r3, r7, #20
 8008f72:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008f76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8008f7a:	68f8      	ldr	r0, [r7, #12]
 8008f7c:	372c      	adds	r7, #44	; 0x2c
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd90      	pop	{r4, r7, pc}
 8008f82:	bf00      	nop
 8008f84:	e000ed04 	.word	0xe000ed04

08008f88 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b083      	sub	sp, #12
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f103 0208 	add.w	r2, r3, #8
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8008fa0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f103 0208 	add.w	r2, r3, #8
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f103 0208 	add.w	r2, r3, #8
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008fbc:	bf00      	nop
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008fd6:	bf00      	nop
 8008fd8:	370c      	adds	r7, #12
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr

08008fe2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008fe2:	b480      	push	{r7}
 8008fe4:	b085      	sub	sp, #20
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	6078      	str	r0, [r7, #4]
 8008fea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	68fa      	ldr	r2, [r7, #12]
 8008ff6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	689a      	ldr	r2, [r3, #8]
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	689b      	ldr	r3, [r3, #8]
 8009004:	683a      	ldr	r2, [r7, #0]
 8009006:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	683a      	ldr	r2, [r7, #0]
 800900c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	1c5a      	adds	r2, r3, #1
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	601a      	str	r2, [r3, #0]
}
 800901e:	bf00      	nop
 8009020:	3714      	adds	r7, #20
 8009022:	46bd      	mov	sp, r7
 8009024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009028:	4770      	bx	lr

0800902a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800902a:	b480      	push	{r7}
 800902c:	b085      	sub	sp, #20
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
 8009032:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009040:	d103      	bne.n	800904a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	691b      	ldr	r3, [r3, #16]
 8009046:	60fb      	str	r3, [r7, #12]
 8009048:	e00c      	b.n	8009064 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	3308      	adds	r3, #8
 800904e:	60fb      	str	r3, [r7, #12]
 8009050:	e002      	b.n	8009058 <vListInsert+0x2e>
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	60fb      	str	r3, [r7, #12]
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	68ba      	ldr	r2, [r7, #8]
 8009060:	429a      	cmp	r2, r3
 8009062:	d2f6      	bcs.n	8009052 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	685a      	ldr	r2, [r3, #4]
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	683a      	ldr	r2, [r7, #0]
 8009072:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	68fa      	ldr	r2, [r7, #12]
 8009078:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	683a      	ldr	r2, [r7, #0]
 800907e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	687a      	ldr	r2, [r7, #4]
 8009084:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	1c5a      	adds	r2, r3, #1
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	601a      	str	r2, [r3, #0]
}
 8009090:	bf00      	nop
 8009092:	3714      	adds	r7, #20
 8009094:	46bd      	mov	sp, r7
 8009096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909a:	4770      	bx	lr

0800909c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800909c:	b480      	push	{r7}
 800909e:	b085      	sub	sp, #20
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	691b      	ldr	r3, [r3, #16]
 80090a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	6892      	ldr	r2, [r2, #8]
 80090b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	689b      	ldr	r3, [r3, #8]
 80090b8:	687a      	ldr	r2, [r7, #4]
 80090ba:	6852      	ldr	r2, [r2, #4]
 80090bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	687a      	ldr	r2, [r7, #4]
 80090c4:	429a      	cmp	r2, r3
 80090c6:	d103      	bne.n	80090d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	689a      	ldr	r2, [r3, #8]
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2200      	movs	r2, #0
 80090d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	1e5a      	subs	r2, r3, #1
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3714      	adds	r7, #20
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr

080090f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b084      	sub	sp, #16
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d109      	bne.n	8009118 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009108:	f383 8811 	msr	BASEPRI, r3
 800910c:	f3bf 8f6f 	isb	sy
 8009110:	f3bf 8f4f 	dsb	sy
 8009114:	60bb      	str	r3, [r7, #8]
 8009116:	e7fe      	b.n	8009116 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8009118:	f001 fe68 	bl	800adec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681a      	ldr	r2, [r3, #0]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009124:	68f9      	ldr	r1, [r7, #12]
 8009126:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009128:	fb01 f303 	mul.w	r3, r1, r3
 800912c:	441a      	add	r2, r3
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2200      	movs	r2, #0
 8009136:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681a      	ldr	r2, [r3, #0]
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009148:	3b01      	subs	r3, #1
 800914a:	68f9      	ldr	r1, [r7, #12]
 800914c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800914e:	fb01 f303 	mul.w	r3, r1, r3
 8009152:	441a      	add	r2, r3
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	22ff      	movs	r2, #255	; 0xff
 800915c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	22ff      	movs	r2, #255	; 0xff
 8009164:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d114      	bne.n	8009198 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	691b      	ldr	r3, [r3, #16]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d01a      	beq.n	80091ac <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	3310      	adds	r3, #16
 800917a:	4618      	mov	r0, r3
 800917c:	f001 fa4e 	bl	800a61c <xTaskRemoveFromEventList>
 8009180:	4603      	mov	r3, r0
 8009182:	2b00      	cmp	r3, #0
 8009184:	d012      	beq.n	80091ac <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009186:	4b0d      	ldr	r3, [pc, #52]	; (80091bc <xQueueGenericReset+0xcc>)
 8009188:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800918c:	601a      	str	r2, [r3, #0]
 800918e:	f3bf 8f4f 	dsb	sy
 8009192:	f3bf 8f6f 	isb	sy
 8009196:	e009      	b.n	80091ac <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	3310      	adds	r3, #16
 800919c:	4618      	mov	r0, r3
 800919e:	f7ff fef3 	bl	8008f88 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	3324      	adds	r3, #36	; 0x24
 80091a6:	4618      	mov	r0, r3
 80091a8:	f7ff feee 	bl	8008f88 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80091ac:	f001 fe4c 	bl	800ae48 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80091b0:	2301      	movs	r3, #1
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3710      	adds	r7, #16
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
 80091ba:	bf00      	nop
 80091bc:	e000ed04 	.word	0xe000ed04

080091c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b08e      	sub	sp, #56	; 0x38
 80091c4:	af02      	add	r7, sp, #8
 80091c6:	60f8      	str	r0, [r7, #12]
 80091c8:	60b9      	str	r1, [r7, #8]
 80091ca:	607a      	str	r2, [r7, #4]
 80091cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d109      	bne.n	80091e8 <xQueueGenericCreateStatic+0x28>
 80091d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d8:	f383 8811 	msr	BASEPRI, r3
 80091dc:	f3bf 8f6f 	isb	sy
 80091e0:	f3bf 8f4f 	dsb	sy
 80091e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80091e6:	e7fe      	b.n	80091e6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d109      	bne.n	8009202 <xQueueGenericCreateStatic+0x42>
 80091ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f2:	f383 8811 	msr	BASEPRI, r3
 80091f6:	f3bf 8f6f 	isb	sy
 80091fa:	f3bf 8f4f 	dsb	sy
 80091fe:	627b      	str	r3, [r7, #36]	; 0x24
 8009200:	e7fe      	b.n	8009200 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d002      	beq.n	800920e <xQueueGenericCreateStatic+0x4e>
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d001      	beq.n	8009212 <xQueueGenericCreateStatic+0x52>
 800920e:	2301      	movs	r3, #1
 8009210:	e000      	b.n	8009214 <xQueueGenericCreateStatic+0x54>
 8009212:	2300      	movs	r3, #0
 8009214:	2b00      	cmp	r3, #0
 8009216:	d109      	bne.n	800922c <xQueueGenericCreateStatic+0x6c>
 8009218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800921c:	f383 8811 	msr	BASEPRI, r3
 8009220:	f3bf 8f6f 	isb	sy
 8009224:	f3bf 8f4f 	dsb	sy
 8009228:	623b      	str	r3, [r7, #32]
 800922a:	e7fe      	b.n	800922a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d102      	bne.n	8009238 <xQueueGenericCreateStatic+0x78>
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d101      	bne.n	800923c <xQueueGenericCreateStatic+0x7c>
 8009238:	2301      	movs	r3, #1
 800923a:	e000      	b.n	800923e <xQueueGenericCreateStatic+0x7e>
 800923c:	2300      	movs	r3, #0
 800923e:	2b00      	cmp	r3, #0
 8009240:	d109      	bne.n	8009256 <xQueueGenericCreateStatic+0x96>
 8009242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009246:	f383 8811 	msr	BASEPRI, r3
 800924a:	f3bf 8f6f 	isb	sy
 800924e:	f3bf 8f4f 	dsb	sy
 8009252:	61fb      	str	r3, [r7, #28]
 8009254:	e7fe      	b.n	8009254 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009256:	2348      	movs	r3, #72	; 0x48
 8009258:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	2b48      	cmp	r3, #72	; 0x48
 800925e:	d009      	beq.n	8009274 <xQueueGenericCreateStatic+0xb4>
 8009260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009264:	f383 8811 	msr	BASEPRI, r3
 8009268:	f3bf 8f6f 	isb	sy
 800926c:	f3bf 8f4f 	dsb	sy
 8009270:	61bb      	str	r3, [r7, #24]
 8009272:	e7fe      	b.n	8009272 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009274:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800927a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800927c:	2b00      	cmp	r3, #0
 800927e:	d00d      	beq.n	800929c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009282:	2201      	movs	r2, #1
 8009284:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009288:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800928c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800928e:	9300      	str	r3, [sp, #0]
 8009290:	4613      	mov	r3, r2
 8009292:	687a      	ldr	r2, [r7, #4]
 8009294:	68b9      	ldr	r1, [r7, #8]
 8009296:	68f8      	ldr	r0, [r7, #12]
 8009298:	f000 f844 	bl	8009324 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800929c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800929e:	4618      	mov	r0, r3
 80092a0:	3730      	adds	r7, #48	; 0x30
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}

080092a6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80092a6:	b580      	push	{r7, lr}
 80092a8:	b08a      	sub	sp, #40	; 0x28
 80092aa:	af02      	add	r7, sp, #8
 80092ac:	60f8      	str	r0, [r7, #12]
 80092ae:	60b9      	str	r1, [r7, #8]
 80092b0:	4613      	mov	r3, r2
 80092b2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d109      	bne.n	80092ce <xQueueGenericCreate+0x28>
 80092ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092be:	f383 8811 	msr	BASEPRI, r3
 80092c2:	f3bf 8f6f 	isb	sy
 80092c6:	f3bf 8f4f 	dsb	sy
 80092ca:	613b      	str	r3, [r7, #16]
 80092cc:	e7fe      	b.n	80092cc <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d102      	bne.n	80092da <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80092d4:	2300      	movs	r3, #0
 80092d6:	61fb      	str	r3, [r7, #28]
 80092d8:	e004      	b.n	80092e4 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	68ba      	ldr	r2, [r7, #8]
 80092de:	fb02 f303 	mul.w	r3, r2, r3
 80092e2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80092e4:	69fb      	ldr	r3, [r7, #28]
 80092e6:	3348      	adds	r3, #72	; 0x48
 80092e8:	4618      	mov	r0, r3
 80092ea:	f001 fe99 	bl	800b020 <pvPortMalloc>
 80092ee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80092f0:	69bb      	ldr	r3, [r7, #24]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d011      	beq.n	800931a <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80092f6:	69bb      	ldr	r3, [r7, #24]
 80092f8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	3348      	adds	r3, #72	; 0x48
 80092fe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009300:	69bb      	ldr	r3, [r7, #24]
 8009302:	2200      	movs	r2, #0
 8009304:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009308:	79fa      	ldrb	r2, [r7, #7]
 800930a:	69bb      	ldr	r3, [r7, #24]
 800930c:	9300      	str	r3, [sp, #0]
 800930e:	4613      	mov	r3, r2
 8009310:	697a      	ldr	r2, [r7, #20]
 8009312:	68b9      	ldr	r1, [r7, #8]
 8009314:	68f8      	ldr	r0, [r7, #12]
 8009316:	f000 f805 	bl	8009324 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800931a:	69bb      	ldr	r3, [r7, #24]
	}
 800931c:	4618      	mov	r0, r3
 800931e:	3720      	adds	r7, #32
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b084      	sub	sp, #16
 8009328:	af00      	add	r7, sp, #0
 800932a:	60f8      	str	r0, [r7, #12]
 800932c:	60b9      	str	r1, [r7, #8]
 800932e:	607a      	str	r2, [r7, #4]
 8009330:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d103      	bne.n	8009340 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009338:	69bb      	ldr	r3, [r7, #24]
 800933a:	69ba      	ldr	r2, [r7, #24]
 800933c:	601a      	str	r2, [r3, #0]
 800933e:	e002      	b.n	8009346 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009340:	69bb      	ldr	r3, [r7, #24]
 8009342:	687a      	ldr	r2, [r7, #4]
 8009344:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009346:	69bb      	ldr	r3, [r7, #24]
 8009348:	68fa      	ldr	r2, [r7, #12]
 800934a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800934c:	69bb      	ldr	r3, [r7, #24]
 800934e:	68ba      	ldr	r2, [r7, #8]
 8009350:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009352:	2101      	movs	r1, #1
 8009354:	69b8      	ldr	r0, [r7, #24]
 8009356:	f7ff fecb 	bl	80090f0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800935a:	bf00      	nop
 800935c:	3710      	adds	r7, #16
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
	...

08009364 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b08e      	sub	sp, #56	; 0x38
 8009368:	af00      	add	r7, sp, #0
 800936a:	60f8      	str	r0, [r7, #12]
 800936c:	60b9      	str	r1, [r7, #8]
 800936e:	607a      	str	r2, [r7, #4]
 8009370:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009372:	2300      	movs	r3, #0
 8009374:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800937a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800937c:	2b00      	cmp	r3, #0
 800937e:	d109      	bne.n	8009394 <xQueueGenericSend+0x30>
 8009380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009384:	f383 8811 	msr	BASEPRI, r3
 8009388:	f3bf 8f6f 	isb	sy
 800938c:	f3bf 8f4f 	dsb	sy
 8009390:	62bb      	str	r3, [r7, #40]	; 0x28
 8009392:	e7fe      	b.n	8009392 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d103      	bne.n	80093a2 <xQueueGenericSend+0x3e>
 800939a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800939c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d101      	bne.n	80093a6 <xQueueGenericSend+0x42>
 80093a2:	2301      	movs	r3, #1
 80093a4:	e000      	b.n	80093a8 <xQueueGenericSend+0x44>
 80093a6:	2300      	movs	r3, #0
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d109      	bne.n	80093c0 <xQueueGenericSend+0x5c>
 80093ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b0:	f383 8811 	msr	BASEPRI, r3
 80093b4:	f3bf 8f6f 	isb	sy
 80093b8:	f3bf 8f4f 	dsb	sy
 80093bc:	627b      	str	r3, [r7, #36]	; 0x24
 80093be:	e7fe      	b.n	80093be <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	2b02      	cmp	r3, #2
 80093c4:	d103      	bne.n	80093ce <xQueueGenericSend+0x6a>
 80093c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d101      	bne.n	80093d2 <xQueueGenericSend+0x6e>
 80093ce:	2301      	movs	r3, #1
 80093d0:	e000      	b.n	80093d4 <xQueueGenericSend+0x70>
 80093d2:	2300      	movs	r3, #0
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d109      	bne.n	80093ec <xQueueGenericSend+0x88>
 80093d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093dc:	f383 8811 	msr	BASEPRI, r3
 80093e0:	f3bf 8f6f 	isb	sy
 80093e4:	f3bf 8f4f 	dsb	sy
 80093e8:	623b      	str	r3, [r7, #32]
 80093ea:	e7fe      	b.n	80093ea <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80093ec:	f001 face 	bl	800a98c <xTaskGetSchedulerState>
 80093f0:	4603      	mov	r3, r0
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d102      	bne.n	80093fc <xQueueGenericSend+0x98>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d101      	bne.n	8009400 <xQueueGenericSend+0x9c>
 80093fc:	2301      	movs	r3, #1
 80093fe:	e000      	b.n	8009402 <xQueueGenericSend+0x9e>
 8009400:	2300      	movs	r3, #0
 8009402:	2b00      	cmp	r3, #0
 8009404:	d109      	bne.n	800941a <xQueueGenericSend+0xb6>
 8009406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800940a:	f383 8811 	msr	BASEPRI, r3
 800940e:	f3bf 8f6f 	isb	sy
 8009412:	f3bf 8f4f 	dsb	sy
 8009416:	61fb      	str	r3, [r7, #28]
 8009418:	e7fe      	b.n	8009418 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800941a:	f001 fce7 	bl	800adec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800941e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009420:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009426:	429a      	cmp	r2, r3
 8009428:	d302      	bcc.n	8009430 <xQueueGenericSend+0xcc>
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	2b02      	cmp	r3, #2
 800942e:	d129      	bne.n	8009484 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009430:	683a      	ldr	r2, [r7, #0]
 8009432:	68b9      	ldr	r1, [r7, #8]
 8009434:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009436:	f000 fa7c 	bl	8009932 <prvCopyDataToQueue>
 800943a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800943c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800943e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009440:	2b00      	cmp	r3, #0
 8009442:	d010      	beq.n	8009466 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009446:	3324      	adds	r3, #36	; 0x24
 8009448:	4618      	mov	r0, r3
 800944a:	f001 f8e7 	bl	800a61c <xTaskRemoveFromEventList>
 800944e:	4603      	mov	r3, r0
 8009450:	2b00      	cmp	r3, #0
 8009452:	d013      	beq.n	800947c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009454:	4b3f      	ldr	r3, [pc, #252]	; (8009554 <xQueueGenericSend+0x1f0>)
 8009456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800945a:	601a      	str	r2, [r3, #0]
 800945c:	f3bf 8f4f 	dsb	sy
 8009460:	f3bf 8f6f 	isb	sy
 8009464:	e00a      	b.n	800947c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009468:	2b00      	cmp	r3, #0
 800946a:	d007      	beq.n	800947c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800946c:	4b39      	ldr	r3, [pc, #228]	; (8009554 <xQueueGenericSend+0x1f0>)
 800946e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009472:	601a      	str	r2, [r3, #0]
 8009474:	f3bf 8f4f 	dsb	sy
 8009478:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800947c:	f001 fce4 	bl	800ae48 <vPortExitCritical>
				return pdPASS;
 8009480:	2301      	movs	r3, #1
 8009482:	e063      	b.n	800954c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d103      	bne.n	8009492 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800948a:	f001 fcdd 	bl	800ae48 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800948e:	2300      	movs	r3, #0
 8009490:	e05c      	b.n	800954c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009494:	2b00      	cmp	r3, #0
 8009496:	d106      	bne.n	80094a6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009498:	f107 0314 	add.w	r3, r7, #20
 800949c:	4618      	mov	r0, r3
 800949e:	f001 f91f 	bl	800a6e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80094a2:	2301      	movs	r3, #1
 80094a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80094a6:	f001 fccf 	bl	800ae48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80094aa:	f000 feb1 	bl	800a210 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80094ae:	f001 fc9d 	bl	800adec <vPortEnterCritical>
 80094b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80094b8:	b25b      	sxtb	r3, r3
 80094ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094be:	d103      	bne.n	80094c8 <xQueueGenericSend+0x164>
 80094c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c2:	2200      	movs	r2, #0
 80094c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80094c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094ce:	b25b      	sxtb	r3, r3
 80094d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094d4:	d103      	bne.n	80094de <xQueueGenericSend+0x17a>
 80094d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d8:	2200      	movs	r2, #0
 80094da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80094de:	f001 fcb3 	bl	800ae48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80094e2:	1d3a      	adds	r2, r7, #4
 80094e4:	f107 0314 	add.w	r3, r7, #20
 80094e8:	4611      	mov	r1, r2
 80094ea:	4618      	mov	r0, r3
 80094ec:	f001 f90e 	bl	800a70c <xTaskCheckForTimeOut>
 80094f0:	4603      	mov	r3, r0
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d124      	bne.n	8009540 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80094f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80094f8:	f000 fb13 	bl	8009b22 <prvIsQueueFull>
 80094fc:	4603      	mov	r3, r0
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d018      	beq.n	8009534 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009504:	3310      	adds	r3, #16
 8009506:	687a      	ldr	r2, [r7, #4]
 8009508:	4611      	mov	r1, r2
 800950a:	4618      	mov	r0, r3
 800950c:	f001 f862 	bl	800a5d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009510:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009512:	f000 fa9e 	bl	8009a52 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009516:	f000 fe89 	bl	800a22c <xTaskResumeAll>
 800951a:	4603      	mov	r3, r0
 800951c:	2b00      	cmp	r3, #0
 800951e:	f47f af7c 	bne.w	800941a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8009522:	4b0c      	ldr	r3, [pc, #48]	; (8009554 <xQueueGenericSend+0x1f0>)
 8009524:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009528:	601a      	str	r2, [r3, #0]
 800952a:	f3bf 8f4f 	dsb	sy
 800952e:	f3bf 8f6f 	isb	sy
 8009532:	e772      	b.n	800941a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009534:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009536:	f000 fa8c 	bl	8009a52 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800953a:	f000 fe77 	bl	800a22c <xTaskResumeAll>
 800953e:	e76c      	b.n	800941a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009540:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009542:	f000 fa86 	bl	8009a52 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009546:	f000 fe71 	bl	800a22c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800954a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800954c:	4618      	mov	r0, r3
 800954e:	3738      	adds	r7, #56	; 0x38
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}
 8009554:	e000ed04 	.word	0xe000ed04

08009558 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b08e      	sub	sp, #56	; 0x38
 800955c:	af00      	add	r7, sp, #0
 800955e:	60f8      	str	r0, [r7, #12]
 8009560:	60b9      	str	r1, [r7, #8]
 8009562:	607a      	str	r2, [r7, #4]
 8009564:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800956a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800956c:	2b00      	cmp	r3, #0
 800956e:	d109      	bne.n	8009584 <xQueueGenericSendFromISR+0x2c>
 8009570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009574:	f383 8811 	msr	BASEPRI, r3
 8009578:	f3bf 8f6f 	isb	sy
 800957c:	f3bf 8f4f 	dsb	sy
 8009580:	627b      	str	r3, [r7, #36]	; 0x24
 8009582:	e7fe      	b.n	8009582 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d103      	bne.n	8009592 <xQueueGenericSendFromISR+0x3a>
 800958a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800958c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800958e:	2b00      	cmp	r3, #0
 8009590:	d101      	bne.n	8009596 <xQueueGenericSendFromISR+0x3e>
 8009592:	2301      	movs	r3, #1
 8009594:	e000      	b.n	8009598 <xQueueGenericSendFromISR+0x40>
 8009596:	2300      	movs	r3, #0
 8009598:	2b00      	cmp	r3, #0
 800959a:	d109      	bne.n	80095b0 <xQueueGenericSendFromISR+0x58>
 800959c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a0:	f383 8811 	msr	BASEPRI, r3
 80095a4:	f3bf 8f6f 	isb	sy
 80095a8:	f3bf 8f4f 	dsb	sy
 80095ac:	623b      	str	r3, [r7, #32]
 80095ae:	e7fe      	b.n	80095ae <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	2b02      	cmp	r3, #2
 80095b4:	d103      	bne.n	80095be <xQueueGenericSendFromISR+0x66>
 80095b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095ba:	2b01      	cmp	r3, #1
 80095bc:	d101      	bne.n	80095c2 <xQueueGenericSendFromISR+0x6a>
 80095be:	2301      	movs	r3, #1
 80095c0:	e000      	b.n	80095c4 <xQueueGenericSendFromISR+0x6c>
 80095c2:	2300      	movs	r3, #0
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d109      	bne.n	80095dc <xQueueGenericSendFromISR+0x84>
 80095c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095cc:	f383 8811 	msr	BASEPRI, r3
 80095d0:	f3bf 8f6f 	isb	sy
 80095d4:	f3bf 8f4f 	dsb	sy
 80095d8:	61fb      	str	r3, [r7, #28]
 80095da:	e7fe      	b.n	80095da <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80095dc:	f001 fce2 	bl	800afa4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80095e0:	f3ef 8211 	mrs	r2, BASEPRI
 80095e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e8:	f383 8811 	msr	BASEPRI, r3
 80095ec:	f3bf 8f6f 	isb	sy
 80095f0:	f3bf 8f4f 	dsb	sy
 80095f4:	61ba      	str	r2, [r7, #24]
 80095f6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80095f8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80095fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80095fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009604:	429a      	cmp	r2, r3
 8009606:	d302      	bcc.n	800960e <xQueueGenericSendFromISR+0xb6>
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	2b02      	cmp	r3, #2
 800960c:	d12c      	bne.n	8009668 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800960e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009610:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009614:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009618:	683a      	ldr	r2, [r7, #0]
 800961a:	68b9      	ldr	r1, [r7, #8]
 800961c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800961e:	f000 f988 	bl	8009932 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009622:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800962a:	d112      	bne.n	8009652 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800962c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800962e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009630:	2b00      	cmp	r3, #0
 8009632:	d016      	beq.n	8009662 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009636:	3324      	adds	r3, #36	; 0x24
 8009638:	4618      	mov	r0, r3
 800963a:	f000 ffef 	bl	800a61c <xTaskRemoveFromEventList>
 800963e:	4603      	mov	r3, r0
 8009640:	2b00      	cmp	r3, #0
 8009642:	d00e      	beq.n	8009662 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d00b      	beq.n	8009662 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2201      	movs	r2, #1
 800964e:	601a      	str	r2, [r3, #0]
 8009650:	e007      	b.n	8009662 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009652:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009656:	3301      	adds	r3, #1
 8009658:	b2db      	uxtb	r3, r3
 800965a:	b25a      	sxtb	r2, r3
 800965c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800965e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009662:	2301      	movs	r3, #1
 8009664:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009666:	e001      	b.n	800966c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009668:	2300      	movs	r3, #0
 800966a:	637b      	str	r3, [r7, #52]	; 0x34
 800966c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800966e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009678:	4618      	mov	r0, r3
 800967a:	3738      	adds	r7, #56	; 0x38
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}

08009680 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b08c      	sub	sp, #48	; 0x30
 8009684:	af00      	add	r7, sp, #0
 8009686:	60f8      	str	r0, [r7, #12]
 8009688:	60b9      	str	r1, [r7, #8]
 800968a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800968c:	2300      	movs	r3, #0
 800968e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009696:	2b00      	cmp	r3, #0
 8009698:	d109      	bne.n	80096ae <xQueueReceive+0x2e>
	__asm volatile
 800969a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800969e:	f383 8811 	msr	BASEPRI, r3
 80096a2:	f3bf 8f6f 	isb	sy
 80096a6:	f3bf 8f4f 	dsb	sy
 80096aa:	623b      	str	r3, [r7, #32]
 80096ac:	e7fe      	b.n	80096ac <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d103      	bne.n	80096bc <xQueueReceive+0x3c>
 80096b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d101      	bne.n	80096c0 <xQueueReceive+0x40>
 80096bc:	2301      	movs	r3, #1
 80096be:	e000      	b.n	80096c2 <xQueueReceive+0x42>
 80096c0:	2300      	movs	r3, #0
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d109      	bne.n	80096da <xQueueReceive+0x5a>
 80096c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ca:	f383 8811 	msr	BASEPRI, r3
 80096ce:	f3bf 8f6f 	isb	sy
 80096d2:	f3bf 8f4f 	dsb	sy
 80096d6:	61fb      	str	r3, [r7, #28]
 80096d8:	e7fe      	b.n	80096d8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80096da:	f001 f957 	bl	800a98c <xTaskGetSchedulerState>
 80096de:	4603      	mov	r3, r0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d102      	bne.n	80096ea <xQueueReceive+0x6a>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d101      	bne.n	80096ee <xQueueReceive+0x6e>
 80096ea:	2301      	movs	r3, #1
 80096ec:	e000      	b.n	80096f0 <xQueueReceive+0x70>
 80096ee:	2300      	movs	r3, #0
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d109      	bne.n	8009708 <xQueueReceive+0x88>
 80096f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f8:	f383 8811 	msr	BASEPRI, r3
 80096fc:	f3bf 8f6f 	isb	sy
 8009700:	f3bf 8f4f 	dsb	sy
 8009704:	61bb      	str	r3, [r7, #24]
 8009706:	e7fe      	b.n	8009706 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009708:	f001 fb70 	bl	800adec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800970c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800970e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009710:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009714:	2b00      	cmp	r3, #0
 8009716:	d01f      	beq.n	8009758 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009718:	68b9      	ldr	r1, [r7, #8]
 800971a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800971c:	f000 f973 	bl	8009a06 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009722:	1e5a      	subs	r2, r3, #1
 8009724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009726:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800972a:	691b      	ldr	r3, [r3, #16]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d00f      	beq.n	8009750 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009732:	3310      	adds	r3, #16
 8009734:	4618      	mov	r0, r3
 8009736:	f000 ff71 	bl	800a61c <xTaskRemoveFromEventList>
 800973a:	4603      	mov	r3, r0
 800973c:	2b00      	cmp	r3, #0
 800973e:	d007      	beq.n	8009750 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009740:	4b3c      	ldr	r3, [pc, #240]	; (8009834 <xQueueReceive+0x1b4>)
 8009742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009746:	601a      	str	r2, [r3, #0]
 8009748:	f3bf 8f4f 	dsb	sy
 800974c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009750:	f001 fb7a 	bl	800ae48 <vPortExitCritical>
				return pdPASS;
 8009754:	2301      	movs	r3, #1
 8009756:	e069      	b.n	800982c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d103      	bne.n	8009766 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800975e:	f001 fb73 	bl	800ae48 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009762:	2300      	movs	r3, #0
 8009764:	e062      	b.n	800982c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009768:	2b00      	cmp	r3, #0
 800976a:	d106      	bne.n	800977a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800976c:	f107 0310 	add.w	r3, r7, #16
 8009770:	4618      	mov	r0, r3
 8009772:	f000 ffb5 	bl	800a6e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009776:	2301      	movs	r3, #1
 8009778:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800977a:	f001 fb65 	bl	800ae48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800977e:	f000 fd47 	bl	800a210 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009782:	f001 fb33 	bl	800adec <vPortEnterCritical>
 8009786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009788:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800978c:	b25b      	sxtb	r3, r3
 800978e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009792:	d103      	bne.n	800979c <xQueueReceive+0x11c>
 8009794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009796:	2200      	movs	r2, #0
 8009798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800979c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800979e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80097a2:	b25b      	sxtb	r3, r3
 80097a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097a8:	d103      	bne.n	80097b2 <xQueueReceive+0x132>
 80097aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ac:	2200      	movs	r2, #0
 80097ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80097b2:	f001 fb49 	bl	800ae48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80097b6:	1d3a      	adds	r2, r7, #4
 80097b8:	f107 0310 	add.w	r3, r7, #16
 80097bc:	4611      	mov	r1, r2
 80097be:	4618      	mov	r0, r3
 80097c0:	f000 ffa4 	bl	800a70c <xTaskCheckForTimeOut>
 80097c4:	4603      	mov	r3, r0
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d123      	bne.n	8009812 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80097ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097cc:	f000 f993 	bl	8009af6 <prvIsQueueEmpty>
 80097d0:	4603      	mov	r3, r0
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d017      	beq.n	8009806 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80097d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097d8:	3324      	adds	r3, #36	; 0x24
 80097da:	687a      	ldr	r2, [r7, #4]
 80097dc:	4611      	mov	r1, r2
 80097de:	4618      	mov	r0, r3
 80097e0:	f000 fef8 	bl	800a5d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80097e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097e6:	f000 f934 	bl	8009a52 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80097ea:	f000 fd1f 	bl	800a22c <xTaskResumeAll>
 80097ee:	4603      	mov	r3, r0
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d189      	bne.n	8009708 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80097f4:	4b0f      	ldr	r3, [pc, #60]	; (8009834 <xQueueReceive+0x1b4>)
 80097f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097fa:	601a      	str	r2, [r3, #0]
 80097fc:	f3bf 8f4f 	dsb	sy
 8009800:	f3bf 8f6f 	isb	sy
 8009804:	e780      	b.n	8009708 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009806:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009808:	f000 f923 	bl	8009a52 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800980c:	f000 fd0e 	bl	800a22c <xTaskResumeAll>
 8009810:	e77a      	b.n	8009708 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009812:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009814:	f000 f91d 	bl	8009a52 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009818:	f000 fd08 	bl	800a22c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800981c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800981e:	f000 f96a 	bl	8009af6 <prvIsQueueEmpty>
 8009822:	4603      	mov	r3, r0
 8009824:	2b00      	cmp	r3, #0
 8009826:	f43f af6f 	beq.w	8009708 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800982a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800982c:	4618      	mov	r0, r3
 800982e:	3730      	adds	r7, #48	; 0x30
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}
 8009834:	e000ed04 	.word	0xe000ed04

08009838 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b08e      	sub	sp, #56	; 0x38
 800983c:	af00      	add	r7, sp, #0
 800983e:	60f8      	str	r0, [r7, #12]
 8009840:	60b9      	str	r1, [r7, #8]
 8009842:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800984a:	2b00      	cmp	r3, #0
 800984c:	d109      	bne.n	8009862 <xQueueReceiveFromISR+0x2a>
 800984e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009852:	f383 8811 	msr	BASEPRI, r3
 8009856:	f3bf 8f6f 	isb	sy
 800985a:	f3bf 8f4f 	dsb	sy
 800985e:	623b      	str	r3, [r7, #32]
 8009860:	e7fe      	b.n	8009860 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d103      	bne.n	8009870 <xQueueReceiveFromISR+0x38>
 8009868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800986a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800986c:	2b00      	cmp	r3, #0
 800986e:	d101      	bne.n	8009874 <xQueueReceiveFromISR+0x3c>
 8009870:	2301      	movs	r3, #1
 8009872:	e000      	b.n	8009876 <xQueueReceiveFromISR+0x3e>
 8009874:	2300      	movs	r3, #0
 8009876:	2b00      	cmp	r3, #0
 8009878:	d109      	bne.n	800988e <xQueueReceiveFromISR+0x56>
 800987a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800987e:	f383 8811 	msr	BASEPRI, r3
 8009882:	f3bf 8f6f 	isb	sy
 8009886:	f3bf 8f4f 	dsb	sy
 800988a:	61fb      	str	r3, [r7, #28]
 800988c:	e7fe      	b.n	800988c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800988e:	f001 fb89 	bl	800afa4 <vPortValidateInterruptPriority>
	__asm volatile
 8009892:	f3ef 8211 	mrs	r2, BASEPRI
 8009896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800989a:	f383 8811 	msr	BASEPRI, r3
 800989e:	f3bf 8f6f 	isb	sy
 80098a2:	f3bf 8f4f 	dsb	sy
 80098a6:	61ba      	str	r2, [r7, #24]
 80098a8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80098aa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80098ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80098ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098b2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80098b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d02f      	beq.n	800991a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80098ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80098c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80098c4:	68b9      	ldr	r1, [r7, #8]
 80098c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098c8:	f000 f89d 	bl	8009a06 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80098cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ce:	1e5a      	subs	r2, r3, #1
 80098d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80098d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80098d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098dc:	d112      	bne.n	8009904 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e0:	691b      	ldr	r3, [r3, #16]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d016      	beq.n	8009914 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e8:	3310      	adds	r3, #16
 80098ea:	4618      	mov	r0, r3
 80098ec:	f000 fe96 	bl	800a61c <xTaskRemoveFromEventList>
 80098f0:	4603      	mov	r3, r0
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d00e      	beq.n	8009914 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d00b      	beq.n	8009914 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2201      	movs	r2, #1
 8009900:	601a      	str	r2, [r3, #0]
 8009902:	e007      	b.n	8009914 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009904:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009908:	3301      	adds	r3, #1
 800990a:	b2db      	uxtb	r3, r3
 800990c:	b25a      	sxtb	r2, r3
 800990e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009914:	2301      	movs	r3, #1
 8009916:	637b      	str	r3, [r7, #52]	; 0x34
 8009918:	e001      	b.n	800991e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800991a:	2300      	movs	r3, #0
 800991c:	637b      	str	r3, [r7, #52]	; 0x34
 800991e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009920:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800992a:	4618      	mov	r0, r3
 800992c:	3738      	adds	r7, #56	; 0x38
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}

08009932 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009932:	b580      	push	{r7, lr}
 8009934:	b086      	sub	sp, #24
 8009936:	af00      	add	r7, sp, #0
 8009938:	60f8      	str	r0, [r7, #12]
 800993a:	60b9      	str	r1, [r7, #8]
 800993c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800993e:	2300      	movs	r3, #0
 8009940:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009946:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800994c:	2b00      	cmp	r3, #0
 800994e:	d10d      	bne.n	800996c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d14d      	bne.n	80099f4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	689b      	ldr	r3, [r3, #8]
 800995c:	4618      	mov	r0, r3
 800995e:	f001 f833 	bl	800a9c8 <xTaskPriorityDisinherit>
 8009962:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	2200      	movs	r2, #0
 8009968:	609a      	str	r2, [r3, #8]
 800996a:	e043      	b.n	80099f4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d119      	bne.n	80099a6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	6858      	ldr	r0, [r3, #4]
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800997a:	461a      	mov	r2, r3
 800997c:	68b9      	ldr	r1, [r7, #8]
 800997e:	f003 fd99 	bl	800d4b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	685a      	ldr	r2, [r3, #4]
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800998a:	441a      	add	r2, r3
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	685a      	ldr	r2, [r3, #4]
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	689b      	ldr	r3, [r3, #8]
 8009998:	429a      	cmp	r2, r3
 800999a:	d32b      	bcc.n	80099f4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681a      	ldr	r2, [r3, #0]
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	605a      	str	r2, [r3, #4]
 80099a4:	e026      	b.n	80099f4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	68d8      	ldr	r0, [r3, #12]
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ae:	461a      	mov	r2, r3
 80099b0:	68b9      	ldr	r1, [r7, #8]
 80099b2:	f003 fd7f 	bl	800d4b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	68da      	ldr	r2, [r3, #12]
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099be:	425b      	negs	r3, r3
 80099c0:	441a      	add	r2, r3
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	68da      	ldr	r2, [r3, #12]
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d207      	bcs.n	80099e2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	689a      	ldr	r2, [r3, #8]
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099da:	425b      	negs	r3, r3
 80099dc:	441a      	add	r2, r3
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2b02      	cmp	r3, #2
 80099e6:	d105      	bne.n	80099f4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d002      	beq.n	80099f4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	3b01      	subs	r3, #1
 80099f2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	1c5a      	adds	r2, r3, #1
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80099fc:	697b      	ldr	r3, [r7, #20]
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3718      	adds	r7, #24
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}

08009a06 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009a06:	b580      	push	{r7, lr}
 8009a08:	b082      	sub	sp, #8
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	6078      	str	r0, [r7, #4]
 8009a0e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d018      	beq.n	8009a4a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	68da      	ldr	r2, [r3, #12]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a20:	441a      	add	r2, r3
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	68da      	ldr	r2, [r3, #12]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	689b      	ldr	r3, [r3, #8]
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	d303      	bcc.n	8009a3a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681a      	ldr	r2, [r3, #0]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	68d9      	ldr	r1, [r3, #12]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a42:	461a      	mov	r2, r3
 8009a44:	6838      	ldr	r0, [r7, #0]
 8009a46:	f003 fd35 	bl	800d4b4 <memcpy>
	}
}
 8009a4a:	bf00      	nop
 8009a4c:	3708      	adds	r7, #8
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}

08009a52 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009a52:	b580      	push	{r7, lr}
 8009a54:	b084      	sub	sp, #16
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009a5a:	f001 f9c7 	bl	800adec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a64:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009a66:	e011      	b.n	8009a8c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d012      	beq.n	8009a96 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	3324      	adds	r3, #36	; 0x24
 8009a74:	4618      	mov	r0, r3
 8009a76:	f000 fdd1 	bl	800a61c <xTaskRemoveFromEventList>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d001      	beq.n	8009a84 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009a80:	f000 fea4 	bl	800a7cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009a84:	7bfb      	ldrb	r3, [r7, #15]
 8009a86:	3b01      	subs	r3, #1
 8009a88:	b2db      	uxtb	r3, r3
 8009a8a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009a8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	dce9      	bgt.n	8009a68 <prvUnlockQueue+0x16>
 8009a94:	e000      	b.n	8009a98 <prvUnlockQueue+0x46>
					break;
 8009a96:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	22ff      	movs	r2, #255	; 0xff
 8009a9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009aa0:	f001 f9d2 	bl	800ae48 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009aa4:	f001 f9a2 	bl	800adec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009aae:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009ab0:	e011      	b.n	8009ad6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	691b      	ldr	r3, [r3, #16]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d012      	beq.n	8009ae0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	3310      	adds	r3, #16
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f000 fdac 	bl	800a61c <xTaskRemoveFromEventList>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d001      	beq.n	8009ace <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009aca:	f000 fe7f 	bl	800a7cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009ace:	7bbb      	ldrb	r3, [r7, #14]
 8009ad0:	3b01      	subs	r3, #1
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009ad6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	dce9      	bgt.n	8009ab2 <prvUnlockQueue+0x60>
 8009ade:	e000      	b.n	8009ae2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009ae0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	22ff      	movs	r2, #255	; 0xff
 8009ae6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009aea:	f001 f9ad 	bl	800ae48 <vPortExitCritical>
}
 8009aee:	bf00      	nop
 8009af0:	3710      	adds	r7, #16
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}

08009af6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009af6:	b580      	push	{r7, lr}
 8009af8:	b084      	sub	sp, #16
 8009afa:	af00      	add	r7, sp, #0
 8009afc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009afe:	f001 f975 	bl	800adec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d102      	bne.n	8009b10 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	60fb      	str	r3, [r7, #12]
 8009b0e:	e001      	b.n	8009b14 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009b10:	2300      	movs	r3, #0
 8009b12:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009b14:	f001 f998 	bl	800ae48 <vPortExitCritical>

	return xReturn;
 8009b18:	68fb      	ldr	r3, [r7, #12]
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3710      	adds	r7, #16
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}

08009b22 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009b22:	b580      	push	{r7, lr}
 8009b24:	b084      	sub	sp, #16
 8009b26:	af00      	add	r7, sp, #0
 8009b28:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009b2a:	f001 f95f 	bl	800adec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d102      	bne.n	8009b40 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	60fb      	str	r3, [r7, #12]
 8009b3e:	e001      	b.n	8009b44 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009b40:	2300      	movs	r3, #0
 8009b42:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009b44:	f001 f980 	bl	800ae48 <vPortExitCritical>

	return xReturn;
 8009b48:	68fb      	ldr	r3, [r7, #12]
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3710      	adds	r7, #16
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}

08009b52 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009b52:	b580      	push	{r7, lr}
 8009b54:	b08e      	sub	sp, #56	; 0x38
 8009b56:	af04      	add	r7, sp, #16
 8009b58:	60f8      	str	r0, [r7, #12]
 8009b5a:	60b9      	str	r1, [r7, #8]
 8009b5c:	607a      	str	r2, [r7, #4]
 8009b5e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d109      	bne.n	8009b7a <xTaskCreateStatic+0x28>
	__asm volatile
 8009b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b6a:	f383 8811 	msr	BASEPRI, r3
 8009b6e:	f3bf 8f6f 	isb	sy
 8009b72:	f3bf 8f4f 	dsb	sy
 8009b76:	623b      	str	r3, [r7, #32]
 8009b78:	e7fe      	b.n	8009b78 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8009b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d109      	bne.n	8009b94 <xTaskCreateStatic+0x42>
 8009b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b84:	f383 8811 	msr	BASEPRI, r3
 8009b88:	f3bf 8f6f 	isb	sy
 8009b8c:	f3bf 8f4f 	dsb	sy
 8009b90:	61fb      	str	r3, [r7, #28]
 8009b92:	e7fe      	b.n	8009b92 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009b94:	2358      	movs	r3, #88	; 0x58
 8009b96:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	2b58      	cmp	r3, #88	; 0x58
 8009b9c:	d009      	beq.n	8009bb2 <xTaskCreateStatic+0x60>
 8009b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba2:	f383 8811 	msr	BASEPRI, r3
 8009ba6:	f3bf 8f6f 	isb	sy
 8009baa:	f3bf 8f4f 	dsb	sy
 8009bae:	61bb      	str	r3, [r7, #24]
 8009bb0:	e7fe      	b.n	8009bb0 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009bb2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d01e      	beq.n	8009bf8 <xTaskCreateStatic+0xa6>
 8009bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d01b      	beq.n	8009bf8 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bc2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009bc8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bcc:	2202      	movs	r2, #2
 8009bce:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	9303      	str	r3, [sp, #12]
 8009bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd8:	9302      	str	r3, [sp, #8]
 8009bda:	f107 0314 	add.w	r3, r7, #20
 8009bde:	9301      	str	r3, [sp, #4]
 8009be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be2:	9300      	str	r3, [sp, #0]
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	687a      	ldr	r2, [r7, #4]
 8009be8:	68b9      	ldr	r1, [r7, #8]
 8009bea:	68f8      	ldr	r0, [r7, #12]
 8009bec:	f000 f850 	bl	8009c90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009bf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009bf2:	f000 f8df 	bl	8009db4 <prvAddNewTaskToReadyList>
 8009bf6:	e001      	b.n	8009bfc <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009bfc:	697b      	ldr	r3, [r7, #20]
	}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3728      	adds	r7, #40	; 0x28
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}

08009c06 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009c06:	b580      	push	{r7, lr}
 8009c08:	b08c      	sub	sp, #48	; 0x30
 8009c0a:	af04      	add	r7, sp, #16
 8009c0c:	60f8      	str	r0, [r7, #12]
 8009c0e:	60b9      	str	r1, [r7, #8]
 8009c10:	603b      	str	r3, [r7, #0]
 8009c12:	4613      	mov	r3, r2
 8009c14:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009c16:	88fb      	ldrh	r3, [r7, #6]
 8009c18:	009b      	lsls	r3, r3, #2
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f001 fa00 	bl	800b020 <pvPortMalloc>
 8009c20:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d00e      	beq.n	8009c46 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009c28:	2058      	movs	r0, #88	; 0x58
 8009c2a:	f001 f9f9 	bl	800b020 <pvPortMalloc>
 8009c2e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009c30:	69fb      	ldr	r3, [r7, #28]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d003      	beq.n	8009c3e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009c36:	69fb      	ldr	r3, [r7, #28]
 8009c38:	697a      	ldr	r2, [r7, #20]
 8009c3a:	631a      	str	r2, [r3, #48]	; 0x30
 8009c3c:	e005      	b.n	8009c4a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009c3e:	6978      	ldr	r0, [r7, #20]
 8009c40:	f001 fab4 	bl	800b1ac <vPortFree>
 8009c44:	e001      	b.n	8009c4a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009c46:	2300      	movs	r3, #0
 8009c48:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009c4a:	69fb      	ldr	r3, [r7, #28]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d017      	beq.n	8009c80 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009c50:	69fb      	ldr	r3, [r7, #28]
 8009c52:	2200      	movs	r2, #0
 8009c54:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009c58:	88fa      	ldrh	r2, [r7, #6]
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	9303      	str	r3, [sp, #12]
 8009c5e:	69fb      	ldr	r3, [r7, #28]
 8009c60:	9302      	str	r3, [sp, #8]
 8009c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c64:	9301      	str	r3, [sp, #4]
 8009c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c68:	9300      	str	r3, [sp, #0]
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	68b9      	ldr	r1, [r7, #8]
 8009c6e:	68f8      	ldr	r0, [r7, #12]
 8009c70:	f000 f80e 	bl	8009c90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009c74:	69f8      	ldr	r0, [r7, #28]
 8009c76:	f000 f89d 	bl	8009db4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	61bb      	str	r3, [r7, #24]
 8009c7e:	e002      	b.n	8009c86 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009c80:	f04f 33ff 	mov.w	r3, #4294967295
 8009c84:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009c86:	69bb      	ldr	r3, [r7, #24]
	}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3720      	adds	r7, #32
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b088      	sub	sp, #32
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	60f8      	str	r0, [r7, #12]
 8009c98:	60b9      	str	r1, [r7, #8]
 8009c9a:	607a      	str	r2, [r7, #4]
 8009c9c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	009b      	lsls	r3, r3, #2
 8009ca6:	461a      	mov	r2, r3
 8009ca8:	21a5      	movs	r1, #165	; 0xa5
 8009caa:	f003 fc0e 	bl	800d4ca <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009cb8:	3b01      	subs	r3, #1
 8009cba:	009b      	lsls	r3, r3, #2
 8009cbc:	4413      	add	r3, r2
 8009cbe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009cc0:	69bb      	ldr	r3, [r7, #24]
 8009cc2:	f023 0307 	bic.w	r3, r3, #7
 8009cc6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009cc8:	69bb      	ldr	r3, [r7, #24]
 8009cca:	f003 0307 	and.w	r3, r3, #7
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d009      	beq.n	8009ce6 <prvInitialiseNewTask+0x56>
 8009cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd6:	f383 8811 	msr	BASEPRI, r3
 8009cda:	f3bf 8f6f 	isb	sy
 8009cde:	f3bf 8f4f 	dsb	sy
 8009ce2:	617b      	str	r3, [r7, #20]
 8009ce4:	e7fe      	b.n	8009ce4 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d01f      	beq.n	8009d2c <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009cec:	2300      	movs	r3, #0
 8009cee:	61fb      	str	r3, [r7, #28]
 8009cf0:	e012      	b.n	8009d18 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009cf2:	68ba      	ldr	r2, [r7, #8]
 8009cf4:	69fb      	ldr	r3, [r7, #28]
 8009cf6:	4413      	add	r3, r2
 8009cf8:	7819      	ldrb	r1, [r3, #0]
 8009cfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cfc:	69fb      	ldr	r3, [r7, #28]
 8009cfe:	4413      	add	r3, r2
 8009d00:	3334      	adds	r3, #52	; 0x34
 8009d02:	460a      	mov	r2, r1
 8009d04:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009d06:	68ba      	ldr	r2, [r7, #8]
 8009d08:	69fb      	ldr	r3, [r7, #28]
 8009d0a:	4413      	add	r3, r2
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d006      	beq.n	8009d20 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009d12:	69fb      	ldr	r3, [r7, #28]
 8009d14:	3301      	adds	r3, #1
 8009d16:	61fb      	str	r3, [r7, #28]
 8009d18:	69fb      	ldr	r3, [r7, #28]
 8009d1a:	2b0f      	cmp	r3, #15
 8009d1c:	d9e9      	bls.n	8009cf2 <prvInitialiseNewTask+0x62>
 8009d1e:	e000      	b.n	8009d22 <prvInitialiseNewTask+0x92>
			{
				break;
 8009d20:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d24:	2200      	movs	r2, #0
 8009d26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009d2a:	e003      	b.n	8009d34 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d2e:	2200      	movs	r2, #0
 8009d30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d36:	2b06      	cmp	r3, #6
 8009d38:	d901      	bls.n	8009d3e <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009d3a:	2306      	movs	r3, #6
 8009d3c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d42:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d48:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d52:	3304      	adds	r3, #4
 8009d54:	4618      	mov	r0, r3
 8009d56:	f7ff f937 	bl	8008fc8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d5c:	3318      	adds	r3, #24
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f7ff f932 	bl	8008fc8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d68:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d6c:	f1c3 0207 	rsb	r2, r3, #7
 8009d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d72:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d78:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8009d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d82:	2200      	movs	r2, #0
 8009d84:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d88:	2200      	movs	r2, #0
 8009d8a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009d8e:	683a      	ldr	r2, [r7, #0]
 8009d90:	68f9      	ldr	r1, [r7, #12]
 8009d92:	69b8      	ldr	r0, [r7, #24]
 8009d94:	f000 ff02 	bl	800ab9c <pxPortInitialiseStack>
 8009d98:	4602      	mov	r2, r0
 8009d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d9c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d002      	beq.n	8009daa <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009da6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009da8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009daa:	bf00      	nop
 8009dac:	3720      	adds	r7, #32
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}
	...

08009db4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b082      	sub	sp, #8
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009dbc:	f001 f816 	bl	800adec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009dc0:	4b2a      	ldr	r3, [pc, #168]	; (8009e6c <prvAddNewTaskToReadyList+0xb8>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	3301      	adds	r3, #1
 8009dc6:	4a29      	ldr	r2, [pc, #164]	; (8009e6c <prvAddNewTaskToReadyList+0xb8>)
 8009dc8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009dca:	4b29      	ldr	r3, [pc, #164]	; (8009e70 <prvAddNewTaskToReadyList+0xbc>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d109      	bne.n	8009de6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009dd2:	4a27      	ldr	r2, [pc, #156]	; (8009e70 <prvAddNewTaskToReadyList+0xbc>)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009dd8:	4b24      	ldr	r3, [pc, #144]	; (8009e6c <prvAddNewTaskToReadyList+0xb8>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	2b01      	cmp	r3, #1
 8009dde:	d110      	bne.n	8009e02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009de0:	f000 fd1a 	bl	800a818 <prvInitialiseTaskLists>
 8009de4:	e00d      	b.n	8009e02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009de6:	4b23      	ldr	r3, [pc, #140]	; (8009e74 <prvAddNewTaskToReadyList+0xc0>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d109      	bne.n	8009e02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009dee:	4b20      	ldr	r3, [pc, #128]	; (8009e70 <prvAddNewTaskToReadyList+0xbc>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df8:	429a      	cmp	r2, r3
 8009dfa:	d802      	bhi.n	8009e02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009dfc:	4a1c      	ldr	r2, [pc, #112]	; (8009e70 <prvAddNewTaskToReadyList+0xbc>)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009e02:	4b1d      	ldr	r3, [pc, #116]	; (8009e78 <prvAddNewTaskToReadyList+0xc4>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	3301      	adds	r3, #1
 8009e08:	4a1b      	ldr	r2, [pc, #108]	; (8009e78 <prvAddNewTaskToReadyList+0xc4>)
 8009e0a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e10:	2201      	movs	r2, #1
 8009e12:	409a      	lsls	r2, r3
 8009e14:	4b19      	ldr	r3, [pc, #100]	; (8009e7c <prvAddNewTaskToReadyList+0xc8>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	4a18      	ldr	r2, [pc, #96]	; (8009e7c <prvAddNewTaskToReadyList+0xc8>)
 8009e1c:	6013      	str	r3, [r2, #0]
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e22:	4613      	mov	r3, r2
 8009e24:	009b      	lsls	r3, r3, #2
 8009e26:	4413      	add	r3, r2
 8009e28:	009b      	lsls	r3, r3, #2
 8009e2a:	4a15      	ldr	r2, [pc, #84]	; (8009e80 <prvAddNewTaskToReadyList+0xcc>)
 8009e2c:	441a      	add	r2, r3
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	3304      	adds	r3, #4
 8009e32:	4619      	mov	r1, r3
 8009e34:	4610      	mov	r0, r2
 8009e36:	f7ff f8d4 	bl	8008fe2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009e3a:	f001 f805 	bl	800ae48 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009e3e:	4b0d      	ldr	r3, [pc, #52]	; (8009e74 <prvAddNewTaskToReadyList+0xc0>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d00e      	beq.n	8009e64 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009e46:	4b0a      	ldr	r3, [pc, #40]	; (8009e70 <prvAddNewTaskToReadyList+0xbc>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d207      	bcs.n	8009e64 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009e54:	4b0b      	ldr	r3, [pc, #44]	; (8009e84 <prvAddNewTaskToReadyList+0xd0>)
 8009e56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e5a:	601a      	str	r2, [r3, #0]
 8009e5c:	f3bf 8f4f 	dsb	sy
 8009e60:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e64:	bf00      	nop
 8009e66:	3708      	adds	r7, #8
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}
 8009e6c:	200001c8 	.word	0x200001c8
 8009e70:	200000c8 	.word	0x200000c8
 8009e74:	200001d4 	.word	0x200001d4
 8009e78:	200001e4 	.word	0x200001e4
 8009e7c:	200001d0 	.word	0x200001d0
 8009e80:	200000cc 	.word	0x200000cc
 8009e84:	e000ed04 	.word	0xe000ed04

08009e88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009e90:	2300      	movs	r3, #0
 8009e92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d016      	beq.n	8009ec8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009e9a:	4b13      	ldr	r3, [pc, #76]	; (8009ee8 <vTaskDelay+0x60>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d009      	beq.n	8009eb6 <vTaskDelay+0x2e>
 8009ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea6:	f383 8811 	msr	BASEPRI, r3
 8009eaa:	f3bf 8f6f 	isb	sy
 8009eae:	f3bf 8f4f 	dsb	sy
 8009eb2:	60bb      	str	r3, [r7, #8]
 8009eb4:	e7fe      	b.n	8009eb4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8009eb6:	f000 f9ab 	bl	800a210 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009eba:	2100      	movs	r1, #0
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f000 fe07 	bl	800aad0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009ec2:	f000 f9b3 	bl	800a22c <xTaskResumeAll>
 8009ec6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d107      	bne.n	8009ede <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8009ece:	4b07      	ldr	r3, [pc, #28]	; (8009eec <vTaskDelay+0x64>)
 8009ed0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ed4:	601a      	str	r2, [r3, #0]
 8009ed6:	f3bf 8f4f 	dsb	sy
 8009eda:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009ede:	bf00      	nop
 8009ee0:	3710      	adds	r7, #16
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}
 8009ee6:	bf00      	nop
 8009ee8:	200001f0 	.word	0x200001f0
 8009eec:	e000ed04 	.word	0xe000ed04

08009ef0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b084      	sub	sp, #16
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8009ef8:	f000 ff78 	bl	800adec <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d102      	bne.n	8009f08 <vTaskSuspend+0x18>
 8009f02:	4b3c      	ldr	r3, [pc, #240]	; (8009ff4 <vTaskSuspend+0x104>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	e000      	b.n	8009f0a <vTaskSuspend+0x1a>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	3304      	adds	r3, #4
 8009f10:	4618      	mov	r0, r3
 8009f12:	f7ff f8c3 	bl	800909c <uxListRemove>
 8009f16:	4603      	mov	r3, r0
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d115      	bne.n	8009f48 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f20:	4935      	ldr	r1, [pc, #212]	; (8009ff8 <vTaskSuspend+0x108>)
 8009f22:	4613      	mov	r3, r2
 8009f24:	009b      	lsls	r3, r3, #2
 8009f26:	4413      	add	r3, r2
 8009f28:	009b      	lsls	r3, r3, #2
 8009f2a:	440b      	add	r3, r1
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d10a      	bne.n	8009f48 <vTaskSuspend+0x58>
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f36:	2201      	movs	r2, #1
 8009f38:	fa02 f303 	lsl.w	r3, r2, r3
 8009f3c:	43da      	mvns	r2, r3
 8009f3e:	4b2f      	ldr	r3, [pc, #188]	; (8009ffc <vTaskSuspend+0x10c>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	4013      	ands	r3, r2
 8009f44:	4a2d      	ldr	r2, [pc, #180]	; (8009ffc <vTaskSuspend+0x10c>)
 8009f46:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d004      	beq.n	8009f5a <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	3318      	adds	r3, #24
 8009f54:	4618      	mov	r0, r3
 8009f56:	f7ff f8a1 	bl	800909c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	3304      	adds	r3, #4
 8009f5e:	4619      	mov	r1, r3
 8009f60:	4827      	ldr	r0, [pc, #156]	; (800a000 <vTaskSuspend+0x110>)
 8009f62:	f7ff f83e 	bl	8008fe2 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8009f6c:	b2db      	uxtb	r3, r3
 8009f6e:	2b01      	cmp	r3, #1
 8009f70:	d103      	bne.n	8009f7a <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	2200      	movs	r2, #0
 8009f76:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8009f7a:	f000 ff65 	bl	800ae48 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8009f7e:	4b21      	ldr	r3, [pc, #132]	; (800a004 <vTaskSuspend+0x114>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d005      	beq.n	8009f92 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8009f86:	f000 ff31 	bl	800adec <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8009f8a:	f000 fcdf 	bl	800a94c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8009f8e:	f000 ff5b 	bl	800ae48 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8009f92:	4b18      	ldr	r3, [pc, #96]	; (8009ff4 <vTaskSuspend+0x104>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	68fa      	ldr	r2, [r7, #12]
 8009f98:	429a      	cmp	r2, r3
 8009f9a:	d126      	bne.n	8009fea <vTaskSuspend+0xfa>
		{
			if( xSchedulerRunning != pdFALSE )
 8009f9c:	4b19      	ldr	r3, [pc, #100]	; (800a004 <vTaskSuspend+0x114>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d016      	beq.n	8009fd2 <vTaskSuspend+0xe2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8009fa4:	4b18      	ldr	r3, [pc, #96]	; (800a008 <vTaskSuspend+0x118>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d009      	beq.n	8009fc0 <vTaskSuspend+0xd0>
 8009fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb0:	f383 8811 	msr	BASEPRI, r3
 8009fb4:	f3bf 8f6f 	isb	sy
 8009fb8:	f3bf 8f4f 	dsb	sy
 8009fbc:	60bb      	str	r3, [r7, #8]
 8009fbe:	e7fe      	b.n	8009fbe <vTaskSuspend+0xce>
				portYIELD_WITHIN_API();
 8009fc0:	4b12      	ldr	r3, [pc, #72]	; (800a00c <vTaskSuspend+0x11c>)
 8009fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fc6:	601a      	str	r2, [r3, #0]
 8009fc8:	f3bf 8f4f 	dsb	sy
 8009fcc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009fd0:	e00b      	b.n	8009fea <vTaskSuspend+0xfa>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8009fd2:	4b0b      	ldr	r3, [pc, #44]	; (800a000 <vTaskSuspend+0x110>)
 8009fd4:	681a      	ldr	r2, [r3, #0]
 8009fd6:	4b0e      	ldr	r3, [pc, #56]	; (800a010 <vTaskSuspend+0x120>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d103      	bne.n	8009fe6 <vTaskSuspend+0xf6>
					pxCurrentTCB = NULL;
 8009fde:	4b05      	ldr	r3, [pc, #20]	; (8009ff4 <vTaskSuspend+0x104>)
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	601a      	str	r2, [r3, #0]
	}
 8009fe4:	e001      	b.n	8009fea <vTaskSuspend+0xfa>
					vTaskSwitchContext();
 8009fe6:	f000 fa75 	bl	800a4d4 <vTaskSwitchContext>
	}
 8009fea:	bf00      	nop
 8009fec:	3710      	adds	r7, #16
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}
 8009ff2:	bf00      	nop
 8009ff4:	200000c8 	.word	0x200000c8
 8009ff8:	200000cc 	.word	0x200000cc
 8009ffc:	200001d0 	.word	0x200001d0
 800a000:	200001b4 	.word	0x200001b4
 800a004:	200001d4 	.word	0x200001d4
 800a008:	200001f0 	.word	0x200001f0
 800a00c:	e000ed04 	.word	0xe000ed04
 800a010:	200001c8 	.word	0x200001c8

0800a014 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800a014:	b480      	push	{r7}
 800a016:	b087      	sub	sp, #28
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800a01c:	2300      	movs	r3, #0
 800a01e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d109      	bne.n	800a03e <prvTaskIsTaskSuspended+0x2a>
 800a02a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a02e:	f383 8811 	msr	BASEPRI, r3
 800a032:	f3bf 8f6f 	isb	sy
 800a036:	f3bf 8f4f 	dsb	sy
 800a03a:	60fb      	str	r3, [r7, #12]
 800a03c:	e7fe      	b.n	800a03c <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a03e:	693b      	ldr	r3, [r7, #16]
 800a040:	695b      	ldr	r3, [r3, #20]
 800a042:	4a0a      	ldr	r2, [pc, #40]	; (800a06c <prvTaskIsTaskSuspended+0x58>)
 800a044:	4293      	cmp	r3, r2
 800a046:	d10a      	bne.n	800a05e <prvTaskIsTaskSuspended+0x4a>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a04c:	4a08      	ldr	r2, [pc, #32]	; (800a070 <prvTaskIsTaskSuspended+0x5c>)
 800a04e:	4293      	cmp	r3, r2
 800a050:	d005      	beq.n	800a05e <prvTaskIsTaskSuspended+0x4a>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a056:	2b00      	cmp	r3, #0
 800a058:	d101      	bne.n	800a05e <prvTaskIsTaskSuspended+0x4a>
				{
					xReturn = pdTRUE;
 800a05a:	2301      	movs	r3, #1
 800a05c:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a05e:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800a060:	4618      	mov	r0, r3
 800a062:	371c      	adds	r7, #28
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr
 800a06c:	200001b4 	.word	0x200001b4
 800a070:	20000188 	.word	0x20000188

0800a074 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 800a074:	b580      	push	{r7, lr}
 800a076:	b08a      	sub	sp, #40	; 0x28
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 800a07c:	2300      	movs	r3, #0
 800a07e:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d109      	bne.n	800a09e <xTaskResumeFromISR+0x2a>
 800a08a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a08e:	f383 8811 	msr	BASEPRI, r3
 800a092:	f3bf 8f6f 	isb	sy
 800a096:	f3bf 8f4f 	dsb	sy
 800a09a:	61bb      	str	r3, [r7, #24]
 800a09c:	e7fe      	b.n	800a09c <xTaskResumeFromISR+0x28>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a09e:	f000 ff81 	bl	800afa4 <vPortValidateInterruptPriority>
	__asm volatile
 800a0a2:	f3ef 8211 	mrs	r2, BASEPRI
 800a0a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0aa:	f383 8811 	msr	BASEPRI, r3
 800a0ae:	f3bf 8f6f 	isb	sy
 800a0b2:	f3bf 8f4f 	dsb	sy
 800a0b6:	617a      	str	r2, [r7, #20]
 800a0b8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a0ba:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a0bc:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800a0be:	6a38      	ldr	r0, [r7, #32]
 800a0c0:	f7ff ffa8 	bl	800a014 <prvTaskIsTaskSuspended>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d02f      	beq.n	800a12a <xTaskResumeFromISR+0xb6>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0ca:	4b1d      	ldr	r3, [pc, #116]	; (800a140 <xTaskResumeFromISR+0xcc>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d125      	bne.n	800a11e <xTaskResumeFromISR+0xaa>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a0d2:	6a3b      	ldr	r3, [r7, #32]
 800a0d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0d6:	4b1b      	ldr	r3, [pc, #108]	; (800a144 <xTaskResumeFromISR+0xd0>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d301      	bcc.n	800a0e4 <xTaskResumeFromISR+0x70>
					{
						xYieldRequired = pdTRUE;
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a0e4:	6a3b      	ldr	r3, [r7, #32]
 800a0e6:	3304      	adds	r3, #4
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f7fe ffd7 	bl	800909c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a0ee:	6a3b      	ldr	r3, [r7, #32]
 800a0f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	409a      	lsls	r2, r3
 800a0f6:	4b14      	ldr	r3, [pc, #80]	; (800a148 <xTaskResumeFromISR+0xd4>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	4313      	orrs	r3, r2
 800a0fc:	4a12      	ldr	r2, [pc, #72]	; (800a148 <xTaskResumeFromISR+0xd4>)
 800a0fe:	6013      	str	r3, [r2, #0]
 800a100:	6a3b      	ldr	r3, [r7, #32]
 800a102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a104:	4613      	mov	r3, r2
 800a106:	009b      	lsls	r3, r3, #2
 800a108:	4413      	add	r3, r2
 800a10a:	009b      	lsls	r3, r3, #2
 800a10c:	4a0f      	ldr	r2, [pc, #60]	; (800a14c <xTaskResumeFromISR+0xd8>)
 800a10e:	441a      	add	r2, r3
 800a110:	6a3b      	ldr	r3, [r7, #32]
 800a112:	3304      	adds	r3, #4
 800a114:	4619      	mov	r1, r3
 800a116:	4610      	mov	r0, r2
 800a118:	f7fe ff63 	bl	8008fe2 <vListInsertEnd>
 800a11c:	e005      	b.n	800a12a <xTaskResumeFromISR+0xb6>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800a11e:	6a3b      	ldr	r3, [r7, #32]
 800a120:	3318      	adds	r3, #24
 800a122:	4619      	mov	r1, r3
 800a124:	480a      	ldr	r0, [pc, #40]	; (800a150 <xTaskResumeFromISR+0xdc>)
 800a126:	f7fe ff5c 	bl	8008fe2 <vListInsertEnd>
 800a12a:	69fb      	ldr	r3, [r7, #28]
 800a12c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	f383 8811 	msr	BASEPRI, r3
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 800a134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800a136:	4618      	mov	r0, r3
 800a138:	3728      	adds	r7, #40	; 0x28
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	bf00      	nop
 800a140:	200001f0 	.word	0x200001f0
 800a144:	200000c8 	.word	0x200000c8
 800a148:	200001d0 	.word	0x200001d0
 800a14c:	200000cc 	.word	0x200000cc
 800a150:	20000188 	.word	0x20000188

0800a154 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b08a      	sub	sp, #40	; 0x28
 800a158:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a15a:	2300      	movs	r3, #0
 800a15c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a15e:	2300      	movs	r3, #0
 800a160:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a162:	463a      	mov	r2, r7
 800a164:	1d39      	adds	r1, r7, #4
 800a166:	f107 0308 	add.w	r3, r7, #8
 800a16a:	4618      	mov	r0, r3
 800a16c:	f001 f94c 	bl	800b408 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a170:	6839      	ldr	r1, [r7, #0]
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	68ba      	ldr	r2, [r7, #8]
 800a176:	9202      	str	r2, [sp, #8]
 800a178:	9301      	str	r3, [sp, #4]
 800a17a:	2300      	movs	r3, #0
 800a17c:	9300      	str	r3, [sp, #0]
 800a17e:	2300      	movs	r3, #0
 800a180:	460a      	mov	r2, r1
 800a182:	491d      	ldr	r1, [pc, #116]	; (800a1f8 <vTaskStartScheduler+0xa4>)
 800a184:	481d      	ldr	r0, [pc, #116]	; (800a1fc <vTaskStartScheduler+0xa8>)
 800a186:	f7ff fce4 	bl	8009b52 <xTaskCreateStatic>
 800a18a:	4602      	mov	r2, r0
 800a18c:	4b1c      	ldr	r3, [pc, #112]	; (800a200 <vTaskStartScheduler+0xac>)
 800a18e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a190:	4b1b      	ldr	r3, [pc, #108]	; (800a200 <vTaskStartScheduler+0xac>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d002      	beq.n	800a19e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a198:	2301      	movs	r3, #1
 800a19a:	617b      	str	r3, [r7, #20]
 800a19c:	e001      	b.n	800a1a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	2b01      	cmp	r3, #1
 800a1a6:	d115      	bne.n	800a1d4 <vTaskStartScheduler+0x80>
	__asm volatile
 800a1a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ac:	f383 8811 	msr	BASEPRI, r3
 800a1b0:	f3bf 8f6f 	isb	sy
 800a1b4:	f3bf 8f4f 	dsb	sy
 800a1b8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a1ba:	4b12      	ldr	r3, [pc, #72]	; (800a204 <vTaskStartScheduler+0xb0>)
 800a1bc:	f04f 32ff 	mov.w	r2, #4294967295
 800a1c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a1c2:	4b11      	ldr	r3, [pc, #68]	; (800a208 <vTaskStartScheduler+0xb4>)
 800a1c4:	2201      	movs	r2, #1
 800a1c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a1c8:	4b10      	ldr	r3, [pc, #64]	; (800a20c <vTaskStartScheduler+0xb8>)
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a1ce:	f000 fd6f 	bl	800acb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a1d2:	e00d      	b.n	800a1f0 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1da:	d109      	bne.n	800a1f0 <vTaskStartScheduler+0x9c>
 800a1dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e0:	f383 8811 	msr	BASEPRI, r3
 800a1e4:	f3bf 8f6f 	isb	sy
 800a1e8:	f3bf 8f4f 	dsb	sy
 800a1ec:	60fb      	str	r3, [r7, #12]
 800a1ee:	e7fe      	b.n	800a1ee <vTaskStartScheduler+0x9a>
}
 800a1f0:	bf00      	nop
 800a1f2:	3718      	adds	r7, #24
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}
 800a1f8:	0800d6a4 	.word	0x0800d6a4
 800a1fc:	0800a7e5 	.word	0x0800a7e5
 800a200:	200001ec 	.word	0x200001ec
 800a204:	200001e8 	.word	0x200001e8
 800a208:	200001d4 	.word	0x200001d4
 800a20c:	200001cc 	.word	0x200001cc

0800a210 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a210:	b480      	push	{r7}
 800a212:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a214:	4b04      	ldr	r3, [pc, #16]	; (800a228 <vTaskSuspendAll+0x18>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	3301      	adds	r3, #1
 800a21a:	4a03      	ldr	r2, [pc, #12]	; (800a228 <vTaskSuspendAll+0x18>)
 800a21c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a21e:	bf00      	nop
 800a220:	46bd      	mov	sp, r7
 800a222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a226:	4770      	bx	lr
 800a228:	200001f0 	.word	0x200001f0

0800a22c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b084      	sub	sp, #16
 800a230:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a232:	2300      	movs	r3, #0
 800a234:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a236:	2300      	movs	r3, #0
 800a238:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a23a:	4b41      	ldr	r3, [pc, #260]	; (800a340 <xTaskResumeAll+0x114>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d109      	bne.n	800a256 <xTaskResumeAll+0x2a>
 800a242:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a246:	f383 8811 	msr	BASEPRI, r3
 800a24a:	f3bf 8f6f 	isb	sy
 800a24e:	f3bf 8f4f 	dsb	sy
 800a252:	603b      	str	r3, [r7, #0]
 800a254:	e7fe      	b.n	800a254 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a256:	f000 fdc9 	bl	800adec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a25a:	4b39      	ldr	r3, [pc, #228]	; (800a340 <xTaskResumeAll+0x114>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	3b01      	subs	r3, #1
 800a260:	4a37      	ldr	r2, [pc, #220]	; (800a340 <xTaskResumeAll+0x114>)
 800a262:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a264:	4b36      	ldr	r3, [pc, #216]	; (800a340 <xTaskResumeAll+0x114>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d161      	bne.n	800a330 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a26c:	4b35      	ldr	r3, [pc, #212]	; (800a344 <xTaskResumeAll+0x118>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d05d      	beq.n	800a330 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a274:	e02e      	b.n	800a2d4 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a276:	4b34      	ldr	r3, [pc, #208]	; (800a348 <xTaskResumeAll+0x11c>)
 800a278:	68db      	ldr	r3, [r3, #12]
 800a27a:	68db      	ldr	r3, [r3, #12]
 800a27c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	3318      	adds	r3, #24
 800a282:	4618      	mov	r0, r3
 800a284:	f7fe ff0a 	bl	800909c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	3304      	adds	r3, #4
 800a28c:	4618      	mov	r0, r3
 800a28e:	f7fe ff05 	bl	800909c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a296:	2201      	movs	r2, #1
 800a298:	409a      	lsls	r2, r3
 800a29a:	4b2c      	ldr	r3, [pc, #176]	; (800a34c <xTaskResumeAll+0x120>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	4313      	orrs	r3, r2
 800a2a0:	4a2a      	ldr	r2, [pc, #168]	; (800a34c <xTaskResumeAll+0x120>)
 800a2a2:	6013      	str	r3, [r2, #0]
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2a8:	4613      	mov	r3, r2
 800a2aa:	009b      	lsls	r3, r3, #2
 800a2ac:	4413      	add	r3, r2
 800a2ae:	009b      	lsls	r3, r3, #2
 800a2b0:	4a27      	ldr	r2, [pc, #156]	; (800a350 <xTaskResumeAll+0x124>)
 800a2b2:	441a      	add	r2, r3
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	3304      	adds	r3, #4
 800a2b8:	4619      	mov	r1, r3
 800a2ba:	4610      	mov	r0, r2
 800a2bc:	f7fe fe91 	bl	8008fe2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2c4:	4b23      	ldr	r3, [pc, #140]	; (800a354 <xTaskResumeAll+0x128>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ca:	429a      	cmp	r2, r3
 800a2cc:	d302      	bcc.n	800a2d4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800a2ce:	4b22      	ldr	r3, [pc, #136]	; (800a358 <xTaskResumeAll+0x12c>)
 800a2d0:	2201      	movs	r2, #1
 800a2d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a2d4:	4b1c      	ldr	r3, [pc, #112]	; (800a348 <xTaskResumeAll+0x11c>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d1cc      	bne.n	800a276 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d001      	beq.n	800a2e6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a2e2:	f000 fb33 	bl	800a94c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a2e6:	4b1d      	ldr	r3, [pc, #116]	; (800a35c <xTaskResumeAll+0x130>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d010      	beq.n	800a314 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a2f2:	f000 f837 	bl	800a364 <xTaskIncrementTick>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d002      	beq.n	800a302 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800a2fc:	4b16      	ldr	r3, [pc, #88]	; (800a358 <xTaskResumeAll+0x12c>)
 800a2fe:	2201      	movs	r2, #1
 800a300:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	3b01      	subs	r3, #1
 800a306:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d1f1      	bne.n	800a2f2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800a30e:	4b13      	ldr	r3, [pc, #76]	; (800a35c <xTaskResumeAll+0x130>)
 800a310:	2200      	movs	r2, #0
 800a312:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a314:	4b10      	ldr	r3, [pc, #64]	; (800a358 <xTaskResumeAll+0x12c>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d009      	beq.n	800a330 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a31c:	2301      	movs	r3, #1
 800a31e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a320:	4b0f      	ldr	r3, [pc, #60]	; (800a360 <xTaskResumeAll+0x134>)
 800a322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a326:	601a      	str	r2, [r3, #0]
 800a328:	f3bf 8f4f 	dsb	sy
 800a32c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a330:	f000 fd8a 	bl	800ae48 <vPortExitCritical>

	return xAlreadyYielded;
 800a334:	68bb      	ldr	r3, [r7, #8]
}
 800a336:	4618      	mov	r0, r3
 800a338:	3710      	adds	r7, #16
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
 800a33e:	bf00      	nop
 800a340:	200001f0 	.word	0x200001f0
 800a344:	200001c8 	.word	0x200001c8
 800a348:	20000188 	.word	0x20000188
 800a34c:	200001d0 	.word	0x200001d0
 800a350:	200000cc 	.word	0x200000cc
 800a354:	200000c8 	.word	0x200000c8
 800a358:	200001dc 	.word	0x200001dc
 800a35c:	200001d8 	.word	0x200001d8
 800a360:	e000ed04 	.word	0xe000ed04

0800a364 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b086      	sub	sp, #24
 800a368:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a36a:	2300      	movs	r3, #0
 800a36c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a36e:	4b4e      	ldr	r3, [pc, #312]	; (800a4a8 <xTaskIncrementTick+0x144>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	2b00      	cmp	r3, #0
 800a374:	f040 8087 	bne.w	800a486 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a378:	4b4c      	ldr	r3, [pc, #304]	; (800a4ac <xTaskIncrementTick+0x148>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	3301      	adds	r3, #1
 800a37e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a380:	4a4a      	ldr	r2, [pc, #296]	; (800a4ac <xTaskIncrementTick+0x148>)
 800a382:	693b      	ldr	r3, [r7, #16]
 800a384:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d11f      	bne.n	800a3cc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800a38c:	4b48      	ldr	r3, [pc, #288]	; (800a4b0 <xTaskIncrementTick+0x14c>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d009      	beq.n	800a3aa <xTaskIncrementTick+0x46>
 800a396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a39a:	f383 8811 	msr	BASEPRI, r3
 800a39e:	f3bf 8f6f 	isb	sy
 800a3a2:	f3bf 8f4f 	dsb	sy
 800a3a6:	603b      	str	r3, [r7, #0]
 800a3a8:	e7fe      	b.n	800a3a8 <xTaskIncrementTick+0x44>
 800a3aa:	4b41      	ldr	r3, [pc, #260]	; (800a4b0 <xTaskIncrementTick+0x14c>)
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	60fb      	str	r3, [r7, #12]
 800a3b0:	4b40      	ldr	r3, [pc, #256]	; (800a4b4 <xTaskIncrementTick+0x150>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	4a3e      	ldr	r2, [pc, #248]	; (800a4b0 <xTaskIncrementTick+0x14c>)
 800a3b6:	6013      	str	r3, [r2, #0]
 800a3b8:	4a3e      	ldr	r2, [pc, #248]	; (800a4b4 <xTaskIncrementTick+0x150>)
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	6013      	str	r3, [r2, #0]
 800a3be:	4b3e      	ldr	r3, [pc, #248]	; (800a4b8 <xTaskIncrementTick+0x154>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	3301      	adds	r3, #1
 800a3c4:	4a3c      	ldr	r2, [pc, #240]	; (800a4b8 <xTaskIncrementTick+0x154>)
 800a3c6:	6013      	str	r3, [r2, #0]
 800a3c8:	f000 fac0 	bl	800a94c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a3cc:	4b3b      	ldr	r3, [pc, #236]	; (800a4bc <xTaskIncrementTick+0x158>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	693a      	ldr	r2, [r7, #16]
 800a3d2:	429a      	cmp	r2, r3
 800a3d4:	d348      	bcc.n	800a468 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a3d6:	4b36      	ldr	r3, [pc, #216]	; (800a4b0 <xTaskIncrementTick+0x14c>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d104      	bne.n	800a3ea <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3e0:	4b36      	ldr	r3, [pc, #216]	; (800a4bc <xTaskIncrementTick+0x158>)
 800a3e2:	f04f 32ff 	mov.w	r2, #4294967295
 800a3e6:	601a      	str	r2, [r3, #0]
					break;
 800a3e8:	e03e      	b.n	800a468 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3ea:	4b31      	ldr	r3, [pc, #196]	; (800a4b0 <xTaskIncrementTick+0x14c>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	68db      	ldr	r3, [r3, #12]
 800a3f0:	68db      	ldr	r3, [r3, #12]
 800a3f2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	685b      	ldr	r3, [r3, #4]
 800a3f8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a3fa:	693a      	ldr	r2, [r7, #16]
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	429a      	cmp	r2, r3
 800a400:	d203      	bcs.n	800a40a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a402:	4a2e      	ldr	r2, [pc, #184]	; (800a4bc <xTaskIncrementTick+0x158>)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a408:	e02e      	b.n	800a468 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	3304      	adds	r3, #4
 800a40e:	4618      	mov	r0, r3
 800a410:	f7fe fe44 	bl	800909c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d004      	beq.n	800a426 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	3318      	adds	r3, #24
 800a420:	4618      	mov	r0, r3
 800a422:	f7fe fe3b 	bl	800909c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a42a:	2201      	movs	r2, #1
 800a42c:	409a      	lsls	r2, r3
 800a42e:	4b24      	ldr	r3, [pc, #144]	; (800a4c0 <xTaskIncrementTick+0x15c>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	4313      	orrs	r3, r2
 800a434:	4a22      	ldr	r2, [pc, #136]	; (800a4c0 <xTaskIncrementTick+0x15c>)
 800a436:	6013      	str	r3, [r2, #0]
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a43c:	4613      	mov	r3, r2
 800a43e:	009b      	lsls	r3, r3, #2
 800a440:	4413      	add	r3, r2
 800a442:	009b      	lsls	r3, r3, #2
 800a444:	4a1f      	ldr	r2, [pc, #124]	; (800a4c4 <xTaskIncrementTick+0x160>)
 800a446:	441a      	add	r2, r3
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	3304      	adds	r3, #4
 800a44c:	4619      	mov	r1, r3
 800a44e:	4610      	mov	r0, r2
 800a450:	f7fe fdc7 	bl	8008fe2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a458:	4b1b      	ldr	r3, [pc, #108]	; (800a4c8 <xTaskIncrementTick+0x164>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a45e:	429a      	cmp	r2, r3
 800a460:	d3b9      	bcc.n	800a3d6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800a462:	2301      	movs	r3, #1
 800a464:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a466:	e7b6      	b.n	800a3d6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a468:	4b17      	ldr	r3, [pc, #92]	; (800a4c8 <xTaskIncrementTick+0x164>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a46e:	4915      	ldr	r1, [pc, #84]	; (800a4c4 <xTaskIncrementTick+0x160>)
 800a470:	4613      	mov	r3, r2
 800a472:	009b      	lsls	r3, r3, #2
 800a474:	4413      	add	r3, r2
 800a476:	009b      	lsls	r3, r3, #2
 800a478:	440b      	add	r3, r1
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	2b01      	cmp	r3, #1
 800a47e:	d907      	bls.n	800a490 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800a480:	2301      	movs	r3, #1
 800a482:	617b      	str	r3, [r7, #20]
 800a484:	e004      	b.n	800a490 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a486:	4b11      	ldr	r3, [pc, #68]	; (800a4cc <xTaskIncrementTick+0x168>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	3301      	adds	r3, #1
 800a48c:	4a0f      	ldr	r2, [pc, #60]	; (800a4cc <xTaskIncrementTick+0x168>)
 800a48e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a490:	4b0f      	ldr	r3, [pc, #60]	; (800a4d0 <xTaskIncrementTick+0x16c>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d001      	beq.n	800a49c <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800a498:	2301      	movs	r3, #1
 800a49a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a49c:	697b      	ldr	r3, [r7, #20]
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3718      	adds	r7, #24
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
 800a4a6:	bf00      	nop
 800a4a8:	200001f0 	.word	0x200001f0
 800a4ac:	200001cc 	.word	0x200001cc
 800a4b0:	20000180 	.word	0x20000180
 800a4b4:	20000184 	.word	0x20000184
 800a4b8:	200001e0 	.word	0x200001e0
 800a4bc:	200001e8 	.word	0x200001e8
 800a4c0:	200001d0 	.word	0x200001d0
 800a4c4:	200000cc 	.word	0x200000cc
 800a4c8:	200000c8 	.word	0x200000c8
 800a4cc:	200001d8 	.word	0x200001d8
 800a4d0:	200001dc 	.word	0x200001dc

0800a4d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b088      	sub	sp, #32
 800a4d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a4da:	4b39      	ldr	r3, [pc, #228]	; (800a5c0 <vTaskSwitchContext+0xec>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d003      	beq.n	800a4ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a4e2:	4b38      	ldr	r3, [pc, #224]	; (800a5c4 <vTaskSwitchContext+0xf0>)
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a4e8:	e065      	b.n	800a5b6 <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 800a4ea:	4b36      	ldr	r3, [pc, #216]	; (800a5c4 <vTaskSwitchContext+0xf0>)
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800a4f0:	4b35      	ldr	r3, [pc, #212]	; (800a5c8 <vTaskSwitchContext+0xf4>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4f6:	61fb      	str	r3, [r7, #28]
 800a4f8:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800a4fc:	61bb      	str	r3, [r7, #24]
 800a4fe:	69fb      	ldr	r3, [r7, #28]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	69ba      	ldr	r2, [r7, #24]
 800a504:	429a      	cmp	r2, r3
 800a506:	d111      	bne.n	800a52c <vTaskSwitchContext+0x58>
 800a508:	69fb      	ldr	r3, [r7, #28]
 800a50a:	3304      	adds	r3, #4
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	69ba      	ldr	r2, [r7, #24]
 800a510:	429a      	cmp	r2, r3
 800a512:	d10b      	bne.n	800a52c <vTaskSwitchContext+0x58>
 800a514:	69fb      	ldr	r3, [r7, #28]
 800a516:	3308      	adds	r3, #8
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	69ba      	ldr	r2, [r7, #24]
 800a51c:	429a      	cmp	r2, r3
 800a51e:	d105      	bne.n	800a52c <vTaskSwitchContext+0x58>
 800a520:	69fb      	ldr	r3, [r7, #28]
 800a522:	330c      	adds	r3, #12
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	69ba      	ldr	r2, [r7, #24]
 800a528:	429a      	cmp	r2, r3
 800a52a:	d008      	beq.n	800a53e <vTaskSwitchContext+0x6a>
 800a52c:	4b26      	ldr	r3, [pc, #152]	; (800a5c8 <vTaskSwitchContext+0xf4>)
 800a52e:	681a      	ldr	r2, [r3, #0]
 800a530:	4b25      	ldr	r3, [pc, #148]	; (800a5c8 <vTaskSwitchContext+0xf4>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	3334      	adds	r3, #52	; 0x34
 800a536:	4619      	mov	r1, r3
 800a538:	4610      	mov	r0, r2
 800a53a:	f000 ff52 	bl	800b3e2 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a53e:	4b23      	ldr	r3, [pc, #140]	; (800a5cc <vTaskSwitchContext+0xf8>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	fab3 f383 	clz	r3, r3
 800a54a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a54c:	7afb      	ldrb	r3, [r7, #11]
 800a54e:	f1c3 031f 	rsb	r3, r3, #31
 800a552:	617b      	str	r3, [r7, #20]
 800a554:	491e      	ldr	r1, [pc, #120]	; (800a5d0 <vTaskSwitchContext+0xfc>)
 800a556:	697a      	ldr	r2, [r7, #20]
 800a558:	4613      	mov	r3, r2
 800a55a:	009b      	lsls	r3, r3, #2
 800a55c:	4413      	add	r3, r2
 800a55e:	009b      	lsls	r3, r3, #2
 800a560:	440b      	add	r3, r1
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d109      	bne.n	800a57c <vTaskSwitchContext+0xa8>
	__asm volatile
 800a568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a56c:	f383 8811 	msr	BASEPRI, r3
 800a570:	f3bf 8f6f 	isb	sy
 800a574:	f3bf 8f4f 	dsb	sy
 800a578:	607b      	str	r3, [r7, #4]
 800a57a:	e7fe      	b.n	800a57a <vTaskSwitchContext+0xa6>
 800a57c:	697a      	ldr	r2, [r7, #20]
 800a57e:	4613      	mov	r3, r2
 800a580:	009b      	lsls	r3, r3, #2
 800a582:	4413      	add	r3, r2
 800a584:	009b      	lsls	r3, r3, #2
 800a586:	4a12      	ldr	r2, [pc, #72]	; (800a5d0 <vTaskSwitchContext+0xfc>)
 800a588:	4413      	add	r3, r2
 800a58a:	613b      	str	r3, [r7, #16]
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	685b      	ldr	r3, [r3, #4]
 800a590:	685a      	ldr	r2, [r3, #4]
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	605a      	str	r2, [r3, #4]
 800a596:	693b      	ldr	r3, [r7, #16]
 800a598:	685a      	ldr	r2, [r3, #4]
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	3308      	adds	r3, #8
 800a59e:	429a      	cmp	r2, r3
 800a5a0:	d104      	bne.n	800a5ac <vTaskSwitchContext+0xd8>
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	685b      	ldr	r3, [r3, #4]
 800a5a6:	685a      	ldr	r2, [r3, #4]
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	605a      	str	r2, [r3, #4]
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	68db      	ldr	r3, [r3, #12]
 800a5b2:	4a05      	ldr	r2, [pc, #20]	; (800a5c8 <vTaskSwitchContext+0xf4>)
 800a5b4:	6013      	str	r3, [r2, #0]
}
 800a5b6:	bf00      	nop
 800a5b8:	3720      	adds	r7, #32
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}
 800a5be:	bf00      	nop
 800a5c0:	200001f0 	.word	0x200001f0
 800a5c4:	200001dc 	.word	0x200001dc
 800a5c8:	200000c8 	.word	0x200000c8
 800a5cc:	200001d0 	.word	0x200001d0
 800a5d0:	200000cc 	.word	0x200000cc

0800a5d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b084      	sub	sp, #16
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d109      	bne.n	800a5f8 <vTaskPlaceOnEventList+0x24>
 800a5e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e8:	f383 8811 	msr	BASEPRI, r3
 800a5ec:	f3bf 8f6f 	isb	sy
 800a5f0:	f3bf 8f4f 	dsb	sy
 800a5f4:	60fb      	str	r3, [r7, #12]
 800a5f6:	e7fe      	b.n	800a5f6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a5f8:	4b07      	ldr	r3, [pc, #28]	; (800a618 <vTaskPlaceOnEventList+0x44>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	3318      	adds	r3, #24
 800a5fe:	4619      	mov	r1, r3
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f7fe fd12 	bl	800902a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a606:	2101      	movs	r1, #1
 800a608:	6838      	ldr	r0, [r7, #0]
 800a60a:	f000 fa61 	bl	800aad0 <prvAddCurrentTaskToDelayedList>
}
 800a60e:	bf00      	nop
 800a610:	3710      	adds	r7, #16
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}
 800a616:	bf00      	nop
 800a618:	200000c8 	.word	0x200000c8

0800a61c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b086      	sub	sp, #24
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	68db      	ldr	r3, [r3, #12]
 800a628:	68db      	ldr	r3, [r3, #12]
 800a62a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d109      	bne.n	800a646 <xTaskRemoveFromEventList+0x2a>
 800a632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a636:	f383 8811 	msr	BASEPRI, r3
 800a63a:	f3bf 8f6f 	isb	sy
 800a63e:	f3bf 8f4f 	dsb	sy
 800a642:	60fb      	str	r3, [r7, #12]
 800a644:	e7fe      	b.n	800a644 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	3318      	adds	r3, #24
 800a64a:	4618      	mov	r0, r3
 800a64c:	f7fe fd26 	bl	800909c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a650:	4b1d      	ldr	r3, [pc, #116]	; (800a6c8 <xTaskRemoveFromEventList+0xac>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d11c      	bne.n	800a692 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a658:	693b      	ldr	r3, [r7, #16]
 800a65a:	3304      	adds	r3, #4
 800a65c:	4618      	mov	r0, r3
 800a65e:	f7fe fd1d 	bl	800909c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a666:	2201      	movs	r2, #1
 800a668:	409a      	lsls	r2, r3
 800a66a:	4b18      	ldr	r3, [pc, #96]	; (800a6cc <xTaskRemoveFromEventList+0xb0>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	4313      	orrs	r3, r2
 800a670:	4a16      	ldr	r2, [pc, #88]	; (800a6cc <xTaskRemoveFromEventList+0xb0>)
 800a672:	6013      	str	r3, [r2, #0]
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a678:	4613      	mov	r3, r2
 800a67a:	009b      	lsls	r3, r3, #2
 800a67c:	4413      	add	r3, r2
 800a67e:	009b      	lsls	r3, r3, #2
 800a680:	4a13      	ldr	r2, [pc, #76]	; (800a6d0 <xTaskRemoveFromEventList+0xb4>)
 800a682:	441a      	add	r2, r3
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	3304      	adds	r3, #4
 800a688:	4619      	mov	r1, r3
 800a68a:	4610      	mov	r0, r2
 800a68c:	f7fe fca9 	bl	8008fe2 <vListInsertEnd>
 800a690:	e005      	b.n	800a69e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	3318      	adds	r3, #24
 800a696:	4619      	mov	r1, r3
 800a698:	480e      	ldr	r0, [pc, #56]	; (800a6d4 <xTaskRemoveFromEventList+0xb8>)
 800a69a:	f7fe fca2 	bl	8008fe2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a69e:	693b      	ldr	r3, [r7, #16]
 800a6a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6a2:	4b0d      	ldr	r3, [pc, #52]	; (800a6d8 <xTaskRemoveFromEventList+0xbc>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6a8:	429a      	cmp	r2, r3
 800a6aa:	d905      	bls.n	800a6b8 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a6b0:	4b0a      	ldr	r3, [pc, #40]	; (800a6dc <xTaskRemoveFromEventList+0xc0>)
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	601a      	str	r2, [r3, #0]
 800a6b6:	e001      	b.n	800a6bc <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a6bc:	697b      	ldr	r3, [r7, #20]
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3718      	adds	r7, #24
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}
 800a6c6:	bf00      	nop
 800a6c8:	200001f0 	.word	0x200001f0
 800a6cc:	200001d0 	.word	0x200001d0
 800a6d0:	200000cc 	.word	0x200000cc
 800a6d4:	20000188 	.word	0x20000188
 800a6d8:	200000c8 	.word	0x200000c8
 800a6dc:	200001dc 	.word	0x200001dc

0800a6e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b083      	sub	sp, #12
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a6e8:	4b06      	ldr	r3, [pc, #24]	; (800a704 <vTaskInternalSetTimeOutState+0x24>)
 800a6ea:	681a      	ldr	r2, [r3, #0]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a6f0:	4b05      	ldr	r3, [pc, #20]	; (800a708 <vTaskInternalSetTimeOutState+0x28>)
 800a6f2:	681a      	ldr	r2, [r3, #0]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	605a      	str	r2, [r3, #4]
}
 800a6f8:	bf00      	nop
 800a6fa:	370c      	adds	r7, #12
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a702:	4770      	bx	lr
 800a704:	200001e0 	.word	0x200001e0
 800a708:	200001cc 	.word	0x200001cc

0800a70c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b088      	sub	sp, #32
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
 800a714:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d109      	bne.n	800a730 <xTaskCheckForTimeOut+0x24>
 800a71c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a720:	f383 8811 	msr	BASEPRI, r3
 800a724:	f3bf 8f6f 	isb	sy
 800a728:	f3bf 8f4f 	dsb	sy
 800a72c:	613b      	str	r3, [r7, #16]
 800a72e:	e7fe      	b.n	800a72e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d109      	bne.n	800a74a <xTaskCheckForTimeOut+0x3e>
 800a736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a73a:	f383 8811 	msr	BASEPRI, r3
 800a73e:	f3bf 8f6f 	isb	sy
 800a742:	f3bf 8f4f 	dsb	sy
 800a746:	60fb      	str	r3, [r7, #12]
 800a748:	e7fe      	b.n	800a748 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800a74a:	f000 fb4f 	bl	800adec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a74e:	4b1d      	ldr	r3, [pc, #116]	; (800a7c4 <xTaskCheckForTimeOut+0xb8>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	685b      	ldr	r3, [r3, #4]
 800a758:	69ba      	ldr	r2, [r7, #24]
 800a75a:	1ad3      	subs	r3, r2, r3
 800a75c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a766:	d102      	bne.n	800a76e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a768:	2300      	movs	r3, #0
 800a76a:	61fb      	str	r3, [r7, #28]
 800a76c:	e023      	b.n	800a7b6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681a      	ldr	r2, [r3, #0]
 800a772:	4b15      	ldr	r3, [pc, #84]	; (800a7c8 <xTaskCheckForTimeOut+0xbc>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	429a      	cmp	r2, r3
 800a778:	d007      	beq.n	800a78a <xTaskCheckForTimeOut+0x7e>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	685b      	ldr	r3, [r3, #4]
 800a77e:	69ba      	ldr	r2, [r7, #24]
 800a780:	429a      	cmp	r2, r3
 800a782:	d302      	bcc.n	800a78a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a784:	2301      	movs	r3, #1
 800a786:	61fb      	str	r3, [r7, #28]
 800a788:	e015      	b.n	800a7b6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	697a      	ldr	r2, [r7, #20]
 800a790:	429a      	cmp	r2, r3
 800a792:	d20b      	bcs.n	800a7ac <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	681a      	ldr	r2, [r3, #0]
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	1ad2      	subs	r2, r2, r3
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	f7ff ff9d 	bl	800a6e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	61fb      	str	r3, [r7, #28]
 800a7aa:	e004      	b.n	800a7b6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a7b6:	f000 fb47 	bl	800ae48 <vPortExitCritical>

	return xReturn;
 800a7ba:	69fb      	ldr	r3, [r7, #28]
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3720      	adds	r7, #32
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}
 800a7c4:	200001cc 	.word	0x200001cc
 800a7c8:	200001e0 	.word	0x200001e0

0800a7cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a7d0:	4b03      	ldr	r3, [pc, #12]	; (800a7e0 <vTaskMissedYield+0x14>)
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	601a      	str	r2, [r3, #0]
}
 800a7d6:	bf00      	nop
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr
 800a7e0:	200001dc 	.word	0x200001dc

0800a7e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b082      	sub	sp, #8
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a7ec:	f000 f854 	bl	800a898 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a7f0:	4b07      	ldr	r3, [pc, #28]	; (800a810 <prvIdleTask+0x2c>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	d907      	bls.n	800a808 <prvIdleTask+0x24>
			{
				taskYIELD();
 800a7f8:	4b06      	ldr	r3, [pc, #24]	; (800a814 <prvIdleTask+0x30>)
 800a7fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7fe:	601a      	str	r2, [r3, #0]
 800a800:	f3bf 8f4f 	dsb	sy
 800a804:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800a808:	f000 fde4 	bl	800b3d4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800a80c:	e7ee      	b.n	800a7ec <prvIdleTask+0x8>
 800a80e:	bf00      	nop
 800a810:	200000cc 	.word	0x200000cc
 800a814:	e000ed04 	.word	0xe000ed04

0800a818 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b082      	sub	sp, #8
 800a81c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a81e:	2300      	movs	r3, #0
 800a820:	607b      	str	r3, [r7, #4]
 800a822:	e00c      	b.n	800a83e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a824:	687a      	ldr	r2, [r7, #4]
 800a826:	4613      	mov	r3, r2
 800a828:	009b      	lsls	r3, r3, #2
 800a82a:	4413      	add	r3, r2
 800a82c:	009b      	lsls	r3, r3, #2
 800a82e:	4a12      	ldr	r2, [pc, #72]	; (800a878 <prvInitialiseTaskLists+0x60>)
 800a830:	4413      	add	r3, r2
 800a832:	4618      	mov	r0, r3
 800a834:	f7fe fba8 	bl	8008f88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	3301      	adds	r3, #1
 800a83c:	607b      	str	r3, [r7, #4]
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2b06      	cmp	r3, #6
 800a842:	d9ef      	bls.n	800a824 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a844:	480d      	ldr	r0, [pc, #52]	; (800a87c <prvInitialiseTaskLists+0x64>)
 800a846:	f7fe fb9f 	bl	8008f88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a84a:	480d      	ldr	r0, [pc, #52]	; (800a880 <prvInitialiseTaskLists+0x68>)
 800a84c:	f7fe fb9c 	bl	8008f88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a850:	480c      	ldr	r0, [pc, #48]	; (800a884 <prvInitialiseTaskLists+0x6c>)
 800a852:	f7fe fb99 	bl	8008f88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a856:	480c      	ldr	r0, [pc, #48]	; (800a888 <prvInitialiseTaskLists+0x70>)
 800a858:	f7fe fb96 	bl	8008f88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a85c:	480b      	ldr	r0, [pc, #44]	; (800a88c <prvInitialiseTaskLists+0x74>)
 800a85e:	f7fe fb93 	bl	8008f88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a862:	4b0b      	ldr	r3, [pc, #44]	; (800a890 <prvInitialiseTaskLists+0x78>)
 800a864:	4a05      	ldr	r2, [pc, #20]	; (800a87c <prvInitialiseTaskLists+0x64>)
 800a866:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a868:	4b0a      	ldr	r3, [pc, #40]	; (800a894 <prvInitialiseTaskLists+0x7c>)
 800a86a:	4a05      	ldr	r2, [pc, #20]	; (800a880 <prvInitialiseTaskLists+0x68>)
 800a86c:	601a      	str	r2, [r3, #0]
}
 800a86e:	bf00      	nop
 800a870:	3708      	adds	r7, #8
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}
 800a876:	bf00      	nop
 800a878:	200000cc 	.word	0x200000cc
 800a87c:	20000158 	.word	0x20000158
 800a880:	2000016c 	.word	0x2000016c
 800a884:	20000188 	.word	0x20000188
 800a888:	2000019c 	.word	0x2000019c
 800a88c:	200001b4 	.word	0x200001b4
 800a890:	20000180 	.word	0x20000180
 800a894:	20000184 	.word	0x20000184

0800a898 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b082      	sub	sp, #8
 800a89c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a89e:	e019      	b.n	800a8d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a8a0:	f000 faa4 	bl	800adec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8a4:	4b0f      	ldr	r3, [pc, #60]	; (800a8e4 <prvCheckTasksWaitingTermination+0x4c>)
 800a8a6:	68db      	ldr	r3, [r3, #12]
 800a8a8:	68db      	ldr	r3, [r3, #12]
 800a8aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	3304      	adds	r3, #4
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f7fe fbf3 	bl	800909c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a8b6:	4b0c      	ldr	r3, [pc, #48]	; (800a8e8 <prvCheckTasksWaitingTermination+0x50>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	3b01      	subs	r3, #1
 800a8bc:	4a0a      	ldr	r2, [pc, #40]	; (800a8e8 <prvCheckTasksWaitingTermination+0x50>)
 800a8be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a8c0:	4b0a      	ldr	r3, [pc, #40]	; (800a8ec <prvCheckTasksWaitingTermination+0x54>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	3b01      	subs	r3, #1
 800a8c6:	4a09      	ldr	r2, [pc, #36]	; (800a8ec <prvCheckTasksWaitingTermination+0x54>)
 800a8c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a8ca:	f000 fabd 	bl	800ae48 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f000 f80e 	bl	800a8f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a8d4:	4b05      	ldr	r3, [pc, #20]	; (800a8ec <prvCheckTasksWaitingTermination+0x54>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d1e1      	bne.n	800a8a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a8dc:	bf00      	nop
 800a8de:	3708      	adds	r7, #8
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}
 800a8e4:	2000019c 	.word	0x2000019c
 800a8e8:	200001c8 	.word	0x200001c8
 800a8ec:	200001b0 	.word	0x200001b0

0800a8f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b084      	sub	sp, #16
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d108      	bne.n	800a914 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a906:	4618      	mov	r0, r3
 800a908:	f000 fc50 	bl	800b1ac <vPortFree>
				vPortFree( pxTCB );
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f000 fc4d 	bl	800b1ac <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a912:	e017      	b.n	800a944 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800a91a:	2b01      	cmp	r3, #1
 800a91c:	d103      	bne.n	800a926 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f000 fc44 	bl	800b1ac <vPortFree>
	}
 800a924:	e00e      	b.n	800a944 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800a92c:	2b02      	cmp	r3, #2
 800a92e:	d009      	beq.n	800a944 <prvDeleteTCB+0x54>
 800a930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a934:	f383 8811 	msr	BASEPRI, r3
 800a938:	f3bf 8f6f 	isb	sy
 800a93c:	f3bf 8f4f 	dsb	sy
 800a940:	60fb      	str	r3, [r7, #12]
 800a942:	e7fe      	b.n	800a942 <prvDeleteTCB+0x52>
	}
 800a944:	bf00      	nop
 800a946:	3710      	adds	r7, #16
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}

0800a94c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a94c:	b480      	push	{r7}
 800a94e:	b083      	sub	sp, #12
 800a950:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a952:	4b0c      	ldr	r3, [pc, #48]	; (800a984 <prvResetNextTaskUnblockTime+0x38>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d104      	bne.n	800a966 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a95c:	4b0a      	ldr	r3, [pc, #40]	; (800a988 <prvResetNextTaskUnblockTime+0x3c>)
 800a95e:	f04f 32ff 	mov.w	r2, #4294967295
 800a962:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a964:	e008      	b.n	800a978 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a966:	4b07      	ldr	r3, [pc, #28]	; (800a984 <prvResetNextTaskUnblockTime+0x38>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	68db      	ldr	r3, [r3, #12]
 800a96c:	68db      	ldr	r3, [r3, #12]
 800a96e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	685b      	ldr	r3, [r3, #4]
 800a974:	4a04      	ldr	r2, [pc, #16]	; (800a988 <prvResetNextTaskUnblockTime+0x3c>)
 800a976:	6013      	str	r3, [r2, #0]
}
 800a978:	bf00      	nop
 800a97a:	370c      	adds	r7, #12
 800a97c:	46bd      	mov	sp, r7
 800a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a982:	4770      	bx	lr
 800a984:	20000180 	.word	0x20000180
 800a988:	200001e8 	.word	0x200001e8

0800a98c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a98c:	b480      	push	{r7}
 800a98e:	b083      	sub	sp, #12
 800a990:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a992:	4b0b      	ldr	r3, [pc, #44]	; (800a9c0 <xTaskGetSchedulerState+0x34>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d102      	bne.n	800a9a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a99a:	2301      	movs	r3, #1
 800a99c:	607b      	str	r3, [r7, #4]
 800a99e:	e008      	b.n	800a9b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a9a0:	4b08      	ldr	r3, [pc, #32]	; (800a9c4 <xTaskGetSchedulerState+0x38>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d102      	bne.n	800a9ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a9a8:	2302      	movs	r3, #2
 800a9aa:	607b      	str	r3, [r7, #4]
 800a9ac:	e001      	b.n	800a9b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a9b2:	687b      	ldr	r3, [r7, #4]
	}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	370c      	adds	r7, #12
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9be:	4770      	bx	lr
 800a9c0:	200001d4 	.word	0x200001d4
 800a9c4:	200001f0 	.word	0x200001f0

0800a9c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b086      	sub	sp, #24
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d06c      	beq.n	800aab8 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a9de:	4b39      	ldr	r3, [pc, #228]	; (800aac4 <xTaskPriorityDisinherit+0xfc>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	693a      	ldr	r2, [r7, #16]
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	d009      	beq.n	800a9fc <xTaskPriorityDisinherit+0x34>
 800a9e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ec:	f383 8811 	msr	BASEPRI, r3
 800a9f0:	f3bf 8f6f 	isb	sy
 800a9f4:	f3bf 8f4f 	dsb	sy
 800a9f8:	60fb      	str	r3, [r7, #12]
 800a9fa:	e7fe      	b.n	800a9fa <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d109      	bne.n	800aa18 <xTaskPriorityDisinherit+0x50>
 800aa04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa08:	f383 8811 	msr	BASEPRI, r3
 800aa0c:	f3bf 8f6f 	isb	sy
 800aa10:	f3bf 8f4f 	dsb	sy
 800aa14:	60bb      	str	r3, [r7, #8]
 800aa16:	e7fe      	b.n	800aa16 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa1c:	1e5a      	subs	r2, r3, #1
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa26:	693b      	ldr	r3, [r7, #16]
 800aa28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d044      	beq.n	800aab8 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800aa2e:	693b      	ldr	r3, [r7, #16]
 800aa30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d140      	bne.n	800aab8 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa36:	693b      	ldr	r3, [r7, #16]
 800aa38:	3304      	adds	r3, #4
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f7fe fb2e 	bl	800909c <uxListRemove>
 800aa40:	4603      	mov	r3, r0
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d115      	bne.n	800aa72 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800aa46:	693b      	ldr	r3, [r7, #16]
 800aa48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa4a:	491f      	ldr	r1, [pc, #124]	; (800aac8 <xTaskPriorityDisinherit+0x100>)
 800aa4c:	4613      	mov	r3, r2
 800aa4e:	009b      	lsls	r3, r3, #2
 800aa50:	4413      	add	r3, r2
 800aa52:	009b      	lsls	r3, r3, #2
 800aa54:	440b      	add	r3, r1
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d10a      	bne.n	800aa72 <xTaskPriorityDisinherit+0xaa>
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa60:	2201      	movs	r2, #1
 800aa62:	fa02 f303 	lsl.w	r3, r2, r3
 800aa66:	43da      	mvns	r2, r3
 800aa68:	4b18      	ldr	r3, [pc, #96]	; (800aacc <xTaskPriorityDisinherit+0x104>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	4013      	ands	r3, r2
 800aa6e:	4a17      	ldr	r2, [pc, #92]	; (800aacc <xTaskPriorityDisinherit+0x104>)
 800aa70:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa7a:	693b      	ldr	r3, [r7, #16]
 800aa7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa7e:	f1c3 0207 	rsb	r2, r3, #7
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	409a      	lsls	r2, r3
 800aa8e:	4b0f      	ldr	r3, [pc, #60]	; (800aacc <xTaskPriorityDisinherit+0x104>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	4313      	orrs	r3, r2
 800aa94:	4a0d      	ldr	r2, [pc, #52]	; (800aacc <xTaskPriorityDisinherit+0x104>)
 800aa96:	6013      	str	r3, [r2, #0]
 800aa98:	693b      	ldr	r3, [r7, #16]
 800aa9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa9c:	4613      	mov	r3, r2
 800aa9e:	009b      	lsls	r3, r3, #2
 800aaa0:	4413      	add	r3, r2
 800aaa2:	009b      	lsls	r3, r3, #2
 800aaa4:	4a08      	ldr	r2, [pc, #32]	; (800aac8 <xTaskPriorityDisinherit+0x100>)
 800aaa6:	441a      	add	r2, r3
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	3304      	adds	r3, #4
 800aaac:	4619      	mov	r1, r3
 800aaae:	4610      	mov	r0, r2
 800aab0:	f7fe fa97 	bl	8008fe2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800aab4:	2301      	movs	r3, #1
 800aab6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aab8:	697b      	ldr	r3, [r7, #20]
	}
 800aaba:	4618      	mov	r0, r3
 800aabc:	3718      	adds	r7, #24
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}
 800aac2:	bf00      	nop
 800aac4:	200000c8 	.word	0x200000c8
 800aac8:	200000cc 	.word	0x200000cc
 800aacc:	200001d0 	.word	0x200001d0

0800aad0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b084      	sub	sp, #16
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800aada:	4b29      	ldr	r3, [pc, #164]	; (800ab80 <prvAddCurrentTaskToDelayedList+0xb0>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aae0:	4b28      	ldr	r3, [pc, #160]	; (800ab84 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	3304      	adds	r3, #4
 800aae6:	4618      	mov	r0, r3
 800aae8:	f7fe fad8 	bl	800909c <uxListRemove>
 800aaec:	4603      	mov	r3, r0
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d10b      	bne.n	800ab0a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800aaf2:	4b24      	ldr	r3, [pc, #144]	; (800ab84 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaf8:	2201      	movs	r2, #1
 800aafa:	fa02 f303 	lsl.w	r3, r2, r3
 800aafe:	43da      	mvns	r2, r3
 800ab00:	4b21      	ldr	r3, [pc, #132]	; (800ab88 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	4013      	ands	r3, r2
 800ab06:	4a20      	ldr	r2, [pc, #128]	; (800ab88 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ab08:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab10:	d10a      	bne.n	800ab28 <prvAddCurrentTaskToDelayedList+0x58>
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d007      	beq.n	800ab28 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab18:	4b1a      	ldr	r3, [pc, #104]	; (800ab84 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	3304      	adds	r3, #4
 800ab1e:	4619      	mov	r1, r3
 800ab20:	481a      	ldr	r0, [pc, #104]	; (800ab8c <prvAddCurrentTaskToDelayedList+0xbc>)
 800ab22:	f7fe fa5e 	bl	8008fe2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ab26:	e026      	b.n	800ab76 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ab28:	68fa      	ldr	r2, [r7, #12]
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	4413      	add	r3, r2
 800ab2e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ab30:	4b14      	ldr	r3, [pc, #80]	; (800ab84 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	68ba      	ldr	r2, [r7, #8]
 800ab36:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ab38:	68ba      	ldr	r2, [r7, #8]
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	d209      	bcs.n	800ab54 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab40:	4b13      	ldr	r3, [pc, #76]	; (800ab90 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ab42:	681a      	ldr	r2, [r3, #0]
 800ab44:	4b0f      	ldr	r3, [pc, #60]	; (800ab84 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	3304      	adds	r3, #4
 800ab4a:	4619      	mov	r1, r3
 800ab4c:	4610      	mov	r0, r2
 800ab4e:	f7fe fa6c 	bl	800902a <vListInsert>
}
 800ab52:	e010      	b.n	800ab76 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab54:	4b0f      	ldr	r3, [pc, #60]	; (800ab94 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ab56:	681a      	ldr	r2, [r3, #0]
 800ab58:	4b0a      	ldr	r3, [pc, #40]	; (800ab84 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	3304      	adds	r3, #4
 800ab5e:	4619      	mov	r1, r3
 800ab60:	4610      	mov	r0, r2
 800ab62:	f7fe fa62 	bl	800902a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ab66:	4b0c      	ldr	r3, [pc, #48]	; (800ab98 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	68ba      	ldr	r2, [r7, #8]
 800ab6c:	429a      	cmp	r2, r3
 800ab6e:	d202      	bcs.n	800ab76 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ab70:	4a09      	ldr	r2, [pc, #36]	; (800ab98 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	6013      	str	r3, [r2, #0]
}
 800ab76:	bf00      	nop
 800ab78:	3710      	adds	r7, #16
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}
 800ab7e:	bf00      	nop
 800ab80:	200001cc 	.word	0x200001cc
 800ab84:	200000c8 	.word	0x200000c8
 800ab88:	200001d0 	.word	0x200001d0
 800ab8c:	200001b4 	.word	0x200001b4
 800ab90:	20000184 	.word	0x20000184
 800ab94:	20000180 	.word	0x20000180
 800ab98:	200001e8 	.word	0x200001e8

0800ab9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b085      	sub	sp, #20
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	60f8      	str	r0, [r7, #12]
 800aba4:	60b9      	str	r1, [r7, #8]
 800aba6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	3b04      	subs	r3, #4
 800abac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800abb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	3b04      	subs	r3, #4
 800abba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	f023 0201 	bic.w	r2, r3, #1
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	3b04      	subs	r3, #4
 800abca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800abcc:	4a0c      	ldr	r2, [pc, #48]	; (800ac00 <pxPortInitialiseStack+0x64>)
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	3b14      	subs	r3, #20
 800abd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800abd8:	687a      	ldr	r2, [r7, #4]
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	3b04      	subs	r3, #4
 800abe2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	f06f 0202 	mvn.w	r2, #2
 800abea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	3b20      	subs	r3, #32
 800abf0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800abf2:	68fb      	ldr	r3, [r7, #12]
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3714      	adds	r7, #20
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr
 800ac00:	0800ac05 	.word	0x0800ac05

0800ac04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ac04:	b480      	push	{r7}
 800ac06:	b085      	sub	sp, #20
 800ac08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ac0e:	4b11      	ldr	r3, [pc, #68]	; (800ac54 <prvTaskExitError+0x50>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac16:	d009      	beq.n	800ac2c <prvTaskExitError+0x28>
 800ac18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac1c:	f383 8811 	msr	BASEPRI, r3
 800ac20:	f3bf 8f6f 	isb	sy
 800ac24:	f3bf 8f4f 	dsb	sy
 800ac28:	60fb      	str	r3, [r7, #12]
 800ac2a:	e7fe      	b.n	800ac2a <prvTaskExitError+0x26>
 800ac2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac30:	f383 8811 	msr	BASEPRI, r3
 800ac34:	f3bf 8f6f 	isb	sy
 800ac38:	f3bf 8f4f 	dsb	sy
 800ac3c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ac3e:	bf00      	nop
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d0fc      	beq.n	800ac40 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ac46:	bf00      	nop
 800ac48:	3714      	adds	r7, #20
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac50:	4770      	bx	lr
 800ac52:	bf00      	nop
 800ac54:	20000028 	.word	0x20000028
	...

0800ac60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ac60:	4b07      	ldr	r3, [pc, #28]	; (800ac80 <pxCurrentTCBConst2>)
 800ac62:	6819      	ldr	r1, [r3, #0]
 800ac64:	6808      	ldr	r0, [r1, #0]
 800ac66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac6a:	f380 8809 	msr	PSP, r0
 800ac6e:	f3bf 8f6f 	isb	sy
 800ac72:	f04f 0000 	mov.w	r0, #0
 800ac76:	f380 8811 	msr	BASEPRI, r0
 800ac7a:	4770      	bx	lr
 800ac7c:	f3af 8000 	nop.w

0800ac80 <pxCurrentTCBConst2>:
 800ac80:	200000c8 	.word	0x200000c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ac84:	bf00      	nop
 800ac86:	bf00      	nop

0800ac88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ac88:	4808      	ldr	r0, [pc, #32]	; (800acac <prvPortStartFirstTask+0x24>)
 800ac8a:	6800      	ldr	r0, [r0, #0]
 800ac8c:	6800      	ldr	r0, [r0, #0]
 800ac8e:	f380 8808 	msr	MSP, r0
 800ac92:	f04f 0000 	mov.w	r0, #0
 800ac96:	f380 8814 	msr	CONTROL, r0
 800ac9a:	b662      	cpsie	i
 800ac9c:	b661      	cpsie	f
 800ac9e:	f3bf 8f4f 	dsb	sy
 800aca2:	f3bf 8f6f 	isb	sy
 800aca6:	df00      	svc	0
 800aca8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800acaa:	bf00      	nop
 800acac:	e000ed08 	.word	0xe000ed08

0800acb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b086      	sub	sp, #24
 800acb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800acb6:	4b44      	ldr	r3, [pc, #272]	; (800adc8 <xPortStartScheduler+0x118>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	4a44      	ldr	r2, [pc, #272]	; (800adcc <xPortStartScheduler+0x11c>)
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d109      	bne.n	800acd4 <xPortStartScheduler+0x24>
 800acc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc4:	f383 8811 	msr	BASEPRI, r3
 800acc8:	f3bf 8f6f 	isb	sy
 800accc:	f3bf 8f4f 	dsb	sy
 800acd0:	613b      	str	r3, [r7, #16]
 800acd2:	e7fe      	b.n	800acd2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800acd4:	4b3c      	ldr	r3, [pc, #240]	; (800adc8 <xPortStartScheduler+0x118>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	4a3d      	ldr	r2, [pc, #244]	; (800add0 <xPortStartScheduler+0x120>)
 800acda:	4293      	cmp	r3, r2
 800acdc:	d109      	bne.n	800acf2 <xPortStartScheduler+0x42>
 800acde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace2:	f383 8811 	msr	BASEPRI, r3
 800ace6:	f3bf 8f6f 	isb	sy
 800acea:	f3bf 8f4f 	dsb	sy
 800acee:	60fb      	str	r3, [r7, #12]
 800acf0:	e7fe      	b.n	800acf0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800acf2:	4b38      	ldr	r3, [pc, #224]	; (800add4 <xPortStartScheduler+0x124>)
 800acf4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	781b      	ldrb	r3, [r3, #0]
 800acfa:	b2db      	uxtb	r3, r3
 800acfc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	22ff      	movs	r2, #255	; 0xff
 800ad02:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	781b      	ldrb	r3, [r3, #0]
 800ad08:	b2db      	uxtb	r3, r3
 800ad0a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ad0c:	78fb      	ldrb	r3, [r7, #3]
 800ad0e:	b2db      	uxtb	r3, r3
 800ad10:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ad14:	b2da      	uxtb	r2, r3
 800ad16:	4b30      	ldr	r3, [pc, #192]	; (800add8 <xPortStartScheduler+0x128>)
 800ad18:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ad1a:	4b30      	ldr	r3, [pc, #192]	; (800addc <xPortStartScheduler+0x12c>)
 800ad1c:	2207      	movs	r2, #7
 800ad1e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ad20:	e009      	b.n	800ad36 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800ad22:	4b2e      	ldr	r3, [pc, #184]	; (800addc <xPortStartScheduler+0x12c>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	3b01      	subs	r3, #1
 800ad28:	4a2c      	ldr	r2, [pc, #176]	; (800addc <xPortStartScheduler+0x12c>)
 800ad2a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ad2c:	78fb      	ldrb	r3, [r7, #3]
 800ad2e:	b2db      	uxtb	r3, r3
 800ad30:	005b      	lsls	r3, r3, #1
 800ad32:	b2db      	uxtb	r3, r3
 800ad34:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ad36:	78fb      	ldrb	r3, [r7, #3]
 800ad38:	b2db      	uxtb	r3, r3
 800ad3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad3e:	2b80      	cmp	r3, #128	; 0x80
 800ad40:	d0ef      	beq.n	800ad22 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ad42:	4b26      	ldr	r3, [pc, #152]	; (800addc <xPortStartScheduler+0x12c>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f1c3 0307 	rsb	r3, r3, #7
 800ad4a:	2b04      	cmp	r3, #4
 800ad4c:	d009      	beq.n	800ad62 <xPortStartScheduler+0xb2>
 800ad4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad52:	f383 8811 	msr	BASEPRI, r3
 800ad56:	f3bf 8f6f 	isb	sy
 800ad5a:	f3bf 8f4f 	dsb	sy
 800ad5e:	60bb      	str	r3, [r7, #8]
 800ad60:	e7fe      	b.n	800ad60 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ad62:	4b1e      	ldr	r3, [pc, #120]	; (800addc <xPortStartScheduler+0x12c>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	021b      	lsls	r3, r3, #8
 800ad68:	4a1c      	ldr	r2, [pc, #112]	; (800addc <xPortStartScheduler+0x12c>)
 800ad6a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ad6c:	4b1b      	ldr	r3, [pc, #108]	; (800addc <xPortStartScheduler+0x12c>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ad74:	4a19      	ldr	r2, [pc, #100]	; (800addc <xPortStartScheduler+0x12c>)
 800ad76:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	b2da      	uxtb	r2, r3
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ad80:	4b17      	ldr	r3, [pc, #92]	; (800ade0 <xPortStartScheduler+0x130>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	4a16      	ldr	r2, [pc, #88]	; (800ade0 <xPortStartScheduler+0x130>)
 800ad86:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ad8a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ad8c:	4b14      	ldr	r3, [pc, #80]	; (800ade0 <xPortStartScheduler+0x130>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	4a13      	ldr	r2, [pc, #76]	; (800ade0 <xPortStartScheduler+0x130>)
 800ad92:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ad96:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ad98:	f000 f8d6 	bl	800af48 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ad9c:	4b11      	ldr	r3, [pc, #68]	; (800ade4 <xPortStartScheduler+0x134>)
 800ad9e:	2200      	movs	r2, #0
 800ada0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ada2:	f000 f8f5 	bl	800af90 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ada6:	4b10      	ldr	r3, [pc, #64]	; (800ade8 <xPortStartScheduler+0x138>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	4a0f      	ldr	r2, [pc, #60]	; (800ade8 <xPortStartScheduler+0x138>)
 800adac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800adb0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800adb2:	f7ff ff69 	bl	800ac88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800adb6:	f7ff fb8d 	bl	800a4d4 <vTaskSwitchContext>
	prvTaskExitError();
 800adba:	f7ff ff23 	bl	800ac04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800adbe:	2300      	movs	r3, #0
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3718      	adds	r7, #24
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}
 800adc8:	e000ed00 	.word	0xe000ed00
 800adcc:	410fc271 	.word	0x410fc271
 800add0:	410fc270 	.word	0x410fc270
 800add4:	e000e400 	.word	0xe000e400
 800add8:	200001f4 	.word	0x200001f4
 800addc:	200001f8 	.word	0x200001f8
 800ade0:	e000ed20 	.word	0xe000ed20
 800ade4:	20000028 	.word	0x20000028
 800ade8:	e000ef34 	.word	0xe000ef34

0800adec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800adec:	b480      	push	{r7}
 800adee:	b083      	sub	sp, #12
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf6:	f383 8811 	msr	BASEPRI, r3
 800adfa:	f3bf 8f6f 	isb	sy
 800adfe:	f3bf 8f4f 	dsb	sy
 800ae02:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ae04:	4b0e      	ldr	r3, [pc, #56]	; (800ae40 <vPortEnterCritical+0x54>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	3301      	adds	r3, #1
 800ae0a:	4a0d      	ldr	r2, [pc, #52]	; (800ae40 <vPortEnterCritical+0x54>)
 800ae0c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ae0e:	4b0c      	ldr	r3, [pc, #48]	; (800ae40 <vPortEnterCritical+0x54>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	2b01      	cmp	r3, #1
 800ae14:	d10e      	bne.n	800ae34 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ae16:	4b0b      	ldr	r3, [pc, #44]	; (800ae44 <vPortEnterCritical+0x58>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	b2db      	uxtb	r3, r3
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d009      	beq.n	800ae34 <vPortEnterCritical+0x48>
 800ae20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae24:	f383 8811 	msr	BASEPRI, r3
 800ae28:	f3bf 8f6f 	isb	sy
 800ae2c:	f3bf 8f4f 	dsb	sy
 800ae30:	603b      	str	r3, [r7, #0]
 800ae32:	e7fe      	b.n	800ae32 <vPortEnterCritical+0x46>
	}
}
 800ae34:	bf00      	nop
 800ae36:	370c      	adds	r7, #12
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3e:	4770      	bx	lr
 800ae40:	20000028 	.word	0x20000028
 800ae44:	e000ed04 	.word	0xe000ed04

0800ae48 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b083      	sub	sp, #12
 800ae4c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ae4e:	4b11      	ldr	r3, [pc, #68]	; (800ae94 <vPortExitCritical+0x4c>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d109      	bne.n	800ae6a <vPortExitCritical+0x22>
 800ae56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae5a:	f383 8811 	msr	BASEPRI, r3
 800ae5e:	f3bf 8f6f 	isb	sy
 800ae62:	f3bf 8f4f 	dsb	sy
 800ae66:	607b      	str	r3, [r7, #4]
 800ae68:	e7fe      	b.n	800ae68 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800ae6a:	4b0a      	ldr	r3, [pc, #40]	; (800ae94 <vPortExitCritical+0x4c>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	3b01      	subs	r3, #1
 800ae70:	4a08      	ldr	r2, [pc, #32]	; (800ae94 <vPortExitCritical+0x4c>)
 800ae72:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ae74:	4b07      	ldr	r3, [pc, #28]	; (800ae94 <vPortExitCritical+0x4c>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d104      	bne.n	800ae86 <vPortExitCritical+0x3e>
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800ae86:	bf00      	nop
 800ae88:	370c      	adds	r7, #12
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae90:	4770      	bx	lr
 800ae92:	bf00      	nop
 800ae94:	20000028 	.word	0x20000028
	...

0800aea0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aea0:	f3ef 8009 	mrs	r0, PSP
 800aea4:	f3bf 8f6f 	isb	sy
 800aea8:	4b15      	ldr	r3, [pc, #84]	; (800af00 <pxCurrentTCBConst>)
 800aeaa:	681a      	ldr	r2, [r3, #0]
 800aeac:	f01e 0f10 	tst.w	lr, #16
 800aeb0:	bf08      	it	eq
 800aeb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aeb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeba:	6010      	str	r0, [r2, #0]
 800aebc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aec0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aec4:	f380 8811 	msr	BASEPRI, r0
 800aec8:	f3bf 8f4f 	dsb	sy
 800aecc:	f3bf 8f6f 	isb	sy
 800aed0:	f7ff fb00 	bl	800a4d4 <vTaskSwitchContext>
 800aed4:	f04f 0000 	mov.w	r0, #0
 800aed8:	f380 8811 	msr	BASEPRI, r0
 800aedc:	bc09      	pop	{r0, r3}
 800aede:	6819      	ldr	r1, [r3, #0]
 800aee0:	6808      	ldr	r0, [r1, #0]
 800aee2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aee6:	f01e 0f10 	tst.w	lr, #16
 800aeea:	bf08      	it	eq
 800aeec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aef0:	f380 8809 	msr	PSP, r0
 800aef4:	f3bf 8f6f 	isb	sy
 800aef8:	4770      	bx	lr
 800aefa:	bf00      	nop
 800aefc:	f3af 8000 	nop.w

0800af00 <pxCurrentTCBConst>:
 800af00:	200000c8 	.word	0x200000c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800af04:	bf00      	nop
 800af06:	bf00      	nop

0800af08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b082      	sub	sp, #8
 800af0c:	af00      	add	r7, sp, #0
	__asm volatile
 800af0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af12:	f383 8811 	msr	BASEPRI, r3
 800af16:	f3bf 8f6f 	isb	sy
 800af1a:	f3bf 8f4f 	dsb	sy
 800af1e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800af20:	f7ff fa20 	bl	800a364 <xTaskIncrementTick>
 800af24:	4603      	mov	r3, r0
 800af26:	2b00      	cmp	r3, #0
 800af28:	d003      	beq.n	800af32 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800af2a:	4b06      	ldr	r3, [pc, #24]	; (800af44 <SysTick_Handler+0x3c>)
 800af2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af30:	601a      	str	r2, [r3, #0]
 800af32:	2300      	movs	r3, #0
 800af34:	603b      	str	r3, [r7, #0]
	__asm volatile
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800af3c:	bf00      	nop
 800af3e:	3708      	adds	r7, #8
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}
 800af44:	e000ed04 	.word	0xe000ed04

0800af48 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800af48:	b480      	push	{r7}
 800af4a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800af4c:	4b0b      	ldr	r3, [pc, #44]	; (800af7c <vPortSetupTimerInterrupt+0x34>)
 800af4e:	2200      	movs	r2, #0
 800af50:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800af52:	4b0b      	ldr	r3, [pc, #44]	; (800af80 <vPortSetupTimerInterrupt+0x38>)
 800af54:	2200      	movs	r2, #0
 800af56:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800af58:	4b0a      	ldr	r3, [pc, #40]	; (800af84 <vPortSetupTimerInterrupt+0x3c>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	4a0a      	ldr	r2, [pc, #40]	; (800af88 <vPortSetupTimerInterrupt+0x40>)
 800af5e:	fba2 2303 	umull	r2, r3, r2, r3
 800af62:	099b      	lsrs	r3, r3, #6
 800af64:	4a09      	ldr	r2, [pc, #36]	; (800af8c <vPortSetupTimerInterrupt+0x44>)
 800af66:	3b01      	subs	r3, #1
 800af68:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800af6a:	4b04      	ldr	r3, [pc, #16]	; (800af7c <vPortSetupTimerInterrupt+0x34>)
 800af6c:	2207      	movs	r2, #7
 800af6e:	601a      	str	r2, [r3, #0]
}
 800af70:	bf00      	nop
 800af72:	46bd      	mov	sp, r7
 800af74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af78:	4770      	bx	lr
 800af7a:	bf00      	nop
 800af7c:	e000e010 	.word	0xe000e010
 800af80:	e000e018 	.word	0xe000e018
 800af84:	20000040 	.word	0x20000040
 800af88:	10624dd3 	.word	0x10624dd3
 800af8c:	e000e014 	.word	0xe000e014

0800af90 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800af90:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800afa0 <vPortEnableVFP+0x10>
 800af94:	6801      	ldr	r1, [r0, #0]
 800af96:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800af9a:	6001      	str	r1, [r0, #0]
 800af9c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800af9e:	bf00      	nop
 800afa0:	e000ed88 	.word	0xe000ed88

0800afa4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800afa4:	b480      	push	{r7}
 800afa6:	b085      	sub	sp, #20
 800afa8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800afaa:	f3ef 8305 	mrs	r3, IPSR
 800afae:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	2b0f      	cmp	r3, #15
 800afb4:	d913      	bls.n	800afde <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800afb6:	4a16      	ldr	r2, [pc, #88]	; (800b010 <vPortValidateInterruptPriority+0x6c>)
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	4413      	add	r3, r2
 800afbc:	781b      	ldrb	r3, [r3, #0]
 800afbe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800afc0:	4b14      	ldr	r3, [pc, #80]	; (800b014 <vPortValidateInterruptPriority+0x70>)
 800afc2:	781b      	ldrb	r3, [r3, #0]
 800afc4:	7afa      	ldrb	r2, [r7, #11]
 800afc6:	429a      	cmp	r2, r3
 800afc8:	d209      	bcs.n	800afde <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800afca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afce:	f383 8811 	msr	BASEPRI, r3
 800afd2:	f3bf 8f6f 	isb	sy
 800afd6:	f3bf 8f4f 	dsb	sy
 800afda:	607b      	str	r3, [r7, #4]
 800afdc:	e7fe      	b.n	800afdc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800afde:	4b0e      	ldr	r3, [pc, #56]	; (800b018 <vPortValidateInterruptPriority+0x74>)
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800afe6:	4b0d      	ldr	r3, [pc, #52]	; (800b01c <vPortValidateInterruptPriority+0x78>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	429a      	cmp	r2, r3
 800afec:	d909      	bls.n	800b002 <vPortValidateInterruptPriority+0x5e>
 800afee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff2:	f383 8811 	msr	BASEPRI, r3
 800aff6:	f3bf 8f6f 	isb	sy
 800affa:	f3bf 8f4f 	dsb	sy
 800affe:	603b      	str	r3, [r7, #0]
 800b000:	e7fe      	b.n	800b000 <vPortValidateInterruptPriority+0x5c>
	}
 800b002:	bf00      	nop
 800b004:	3714      	adds	r7, #20
 800b006:	46bd      	mov	sp, r7
 800b008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00c:	4770      	bx	lr
 800b00e:	bf00      	nop
 800b010:	e000e3f0 	.word	0xe000e3f0
 800b014:	200001f4 	.word	0x200001f4
 800b018:	e000ed0c 	.word	0xe000ed0c
 800b01c:	200001f8 	.word	0x200001f8

0800b020 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b08a      	sub	sp, #40	; 0x28
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b028:	2300      	movs	r3, #0
 800b02a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b02c:	f7ff f8f0 	bl	800a210 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b030:	4b59      	ldr	r3, [pc, #356]	; (800b198 <pvPortMalloc+0x178>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d101      	bne.n	800b03c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b038:	f000 f910 	bl	800b25c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b03c:	4b57      	ldr	r3, [pc, #348]	; (800b19c <pvPortMalloc+0x17c>)
 800b03e:	681a      	ldr	r2, [r3, #0]
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	4013      	ands	r3, r2
 800b044:	2b00      	cmp	r3, #0
 800b046:	f040 808c 	bne.w	800b162 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d01c      	beq.n	800b08a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800b050:	2208      	movs	r2, #8
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	4413      	add	r3, r2
 800b056:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f003 0307 	and.w	r3, r3, #7
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d013      	beq.n	800b08a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f023 0307 	bic.w	r3, r3, #7
 800b068:	3308      	adds	r3, #8
 800b06a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f003 0307 	and.w	r3, r3, #7
 800b072:	2b00      	cmp	r3, #0
 800b074:	d009      	beq.n	800b08a <pvPortMalloc+0x6a>
 800b076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b07a:	f383 8811 	msr	BASEPRI, r3
 800b07e:	f3bf 8f6f 	isb	sy
 800b082:	f3bf 8f4f 	dsb	sy
 800b086:	617b      	str	r3, [r7, #20]
 800b088:	e7fe      	b.n	800b088 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d068      	beq.n	800b162 <pvPortMalloc+0x142>
 800b090:	4b43      	ldr	r3, [pc, #268]	; (800b1a0 <pvPortMalloc+0x180>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	687a      	ldr	r2, [r7, #4]
 800b096:	429a      	cmp	r2, r3
 800b098:	d863      	bhi.n	800b162 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b09a:	4b42      	ldr	r3, [pc, #264]	; (800b1a4 <pvPortMalloc+0x184>)
 800b09c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b09e:	4b41      	ldr	r3, [pc, #260]	; (800b1a4 <pvPortMalloc+0x184>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b0a4:	e004      	b.n	800b0b0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800b0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0b2:	685b      	ldr	r3, [r3, #4]
 800b0b4:	687a      	ldr	r2, [r7, #4]
 800b0b6:	429a      	cmp	r2, r3
 800b0b8:	d903      	bls.n	800b0c2 <pvPortMalloc+0xa2>
 800b0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d1f1      	bne.n	800b0a6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b0c2:	4b35      	ldr	r3, [pc, #212]	; (800b198 <pvPortMalloc+0x178>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	d04a      	beq.n	800b162 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b0cc:	6a3b      	ldr	r3, [r7, #32]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	2208      	movs	r2, #8
 800b0d2:	4413      	add	r3, r2
 800b0d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d8:	681a      	ldr	r2, [r3, #0]
 800b0da:	6a3b      	ldr	r3, [r7, #32]
 800b0dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e0:	685a      	ldr	r2, [r3, #4]
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	1ad2      	subs	r2, r2, r3
 800b0e6:	2308      	movs	r3, #8
 800b0e8:	005b      	lsls	r3, r3, #1
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	d91e      	bls.n	800b12c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b0ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	4413      	add	r3, r2
 800b0f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b0f6:	69bb      	ldr	r3, [r7, #24]
 800b0f8:	f003 0307 	and.w	r3, r3, #7
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d009      	beq.n	800b114 <pvPortMalloc+0xf4>
 800b100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b104:	f383 8811 	msr	BASEPRI, r3
 800b108:	f3bf 8f6f 	isb	sy
 800b10c:	f3bf 8f4f 	dsb	sy
 800b110:	613b      	str	r3, [r7, #16]
 800b112:	e7fe      	b.n	800b112 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b116:	685a      	ldr	r2, [r3, #4]
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	1ad2      	subs	r2, r2, r3
 800b11c:	69bb      	ldr	r3, [r7, #24]
 800b11e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b122:	687a      	ldr	r2, [r7, #4]
 800b124:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b126:	69b8      	ldr	r0, [r7, #24]
 800b128:	f000 f8fa 	bl	800b320 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b12c:	4b1c      	ldr	r3, [pc, #112]	; (800b1a0 <pvPortMalloc+0x180>)
 800b12e:	681a      	ldr	r2, [r3, #0]
 800b130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b132:	685b      	ldr	r3, [r3, #4]
 800b134:	1ad3      	subs	r3, r2, r3
 800b136:	4a1a      	ldr	r2, [pc, #104]	; (800b1a0 <pvPortMalloc+0x180>)
 800b138:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b13a:	4b19      	ldr	r3, [pc, #100]	; (800b1a0 <pvPortMalloc+0x180>)
 800b13c:	681a      	ldr	r2, [r3, #0]
 800b13e:	4b1a      	ldr	r3, [pc, #104]	; (800b1a8 <pvPortMalloc+0x188>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	429a      	cmp	r2, r3
 800b144:	d203      	bcs.n	800b14e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b146:	4b16      	ldr	r3, [pc, #88]	; (800b1a0 <pvPortMalloc+0x180>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	4a17      	ldr	r2, [pc, #92]	; (800b1a8 <pvPortMalloc+0x188>)
 800b14c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b150:	685a      	ldr	r2, [r3, #4]
 800b152:	4b12      	ldr	r3, [pc, #72]	; (800b19c <pvPortMalloc+0x17c>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	431a      	orrs	r2, r3
 800b158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b15a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b15e:	2200      	movs	r2, #0
 800b160:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b162:	f7ff f863 	bl	800a22c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800b166:	69fb      	ldr	r3, [r7, #28]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d101      	bne.n	800b170 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800b16c:	f000 f944 	bl	800b3f8 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b170:	69fb      	ldr	r3, [r7, #28]
 800b172:	f003 0307 	and.w	r3, r3, #7
 800b176:	2b00      	cmp	r3, #0
 800b178:	d009      	beq.n	800b18e <pvPortMalloc+0x16e>
 800b17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b17e:	f383 8811 	msr	BASEPRI, r3
 800b182:	f3bf 8f6f 	isb	sy
 800b186:	f3bf 8f4f 	dsb	sy
 800b18a:	60fb      	str	r3, [r7, #12]
 800b18c:	e7fe      	b.n	800b18c <pvPortMalloc+0x16c>
	return pvReturn;
 800b18e:	69fb      	ldr	r3, [r7, #28]
}
 800b190:	4618      	mov	r0, r3
 800b192:	3728      	adds	r7, #40	; 0x28
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}
 800b198:	20008204 	.word	0x20008204
 800b19c:	20008210 	.word	0x20008210
 800b1a0:	20008208 	.word	0x20008208
 800b1a4:	200081fc 	.word	0x200081fc
 800b1a8:	2000820c 	.word	0x2000820c

0800b1ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b086      	sub	sp, #24
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d046      	beq.n	800b24c <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b1be:	2308      	movs	r3, #8
 800b1c0:	425b      	negs	r3, r3
 800b1c2:	697a      	ldr	r2, [r7, #20]
 800b1c4:	4413      	add	r3, r2
 800b1c6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b1c8:	697b      	ldr	r3, [r7, #20]
 800b1ca:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b1cc:	693b      	ldr	r3, [r7, #16]
 800b1ce:	685a      	ldr	r2, [r3, #4]
 800b1d0:	4b20      	ldr	r3, [pc, #128]	; (800b254 <vPortFree+0xa8>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	4013      	ands	r3, r2
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d109      	bne.n	800b1ee <vPortFree+0x42>
 800b1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1de:	f383 8811 	msr	BASEPRI, r3
 800b1e2:	f3bf 8f6f 	isb	sy
 800b1e6:	f3bf 8f4f 	dsb	sy
 800b1ea:	60fb      	str	r3, [r7, #12]
 800b1ec:	e7fe      	b.n	800b1ec <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d009      	beq.n	800b20a <vPortFree+0x5e>
 800b1f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1fa:	f383 8811 	msr	BASEPRI, r3
 800b1fe:	f3bf 8f6f 	isb	sy
 800b202:	f3bf 8f4f 	dsb	sy
 800b206:	60bb      	str	r3, [r7, #8]
 800b208:	e7fe      	b.n	800b208 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	685a      	ldr	r2, [r3, #4]
 800b20e:	4b11      	ldr	r3, [pc, #68]	; (800b254 <vPortFree+0xa8>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	4013      	ands	r3, r2
 800b214:	2b00      	cmp	r3, #0
 800b216:	d019      	beq.n	800b24c <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d115      	bne.n	800b24c <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	685a      	ldr	r2, [r3, #4]
 800b224:	4b0b      	ldr	r3, [pc, #44]	; (800b254 <vPortFree+0xa8>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	43db      	mvns	r3, r3
 800b22a:	401a      	ands	r2, r3
 800b22c:	693b      	ldr	r3, [r7, #16]
 800b22e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b230:	f7fe ffee 	bl	800a210 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	685a      	ldr	r2, [r3, #4]
 800b238:	4b07      	ldr	r3, [pc, #28]	; (800b258 <vPortFree+0xac>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	4413      	add	r3, r2
 800b23e:	4a06      	ldr	r2, [pc, #24]	; (800b258 <vPortFree+0xac>)
 800b240:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b242:	6938      	ldr	r0, [r7, #16]
 800b244:	f000 f86c 	bl	800b320 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b248:	f7fe fff0 	bl	800a22c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b24c:	bf00      	nop
 800b24e:	3718      	adds	r7, #24
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}
 800b254:	20008210 	.word	0x20008210
 800b258:	20008208 	.word	0x20008208

0800b25c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b25c:	b480      	push	{r7}
 800b25e:	b085      	sub	sp, #20
 800b260:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b266:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b268:	4b27      	ldr	r3, [pc, #156]	; (800b308 <prvHeapInit+0xac>)
 800b26a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	f003 0307 	and.w	r3, r3, #7
 800b272:	2b00      	cmp	r3, #0
 800b274:	d00c      	beq.n	800b290 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	3307      	adds	r3, #7
 800b27a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	f023 0307 	bic.w	r3, r3, #7
 800b282:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b284:	68ba      	ldr	r2, [r7, #8]
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	1ad3      	subs	r3, r2, r3
 800b28a:	4a1f      	ldr	r2, [pc, #124]	; (800b308 <prvHeapInit+0xac>)
 800b28c:	4413      	add	r3, r2
 800b28e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b294:	4a1d      	ldr	r2, [pc, #116]	; (800b30c <prvHeapInit+0xb0>)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b29a:	4b1c      	ldr	r3, [pc, #112]	; (800b30c <prvHeapInit+0xb0>)
 800b29c:	2200      	movs	r2, #0
 800b29e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	68ba      	ldr	r2, [r7, #8]
 800b2a4:	4413      	add	r3, r2
 800b2a6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b2a8:	2208      	movs	r2, #8
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	1a9b      	subs	r3, r3, r2
 800b2ae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	f023 0307 	bic.w	r3, r3, #7
 800b2b6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	4a15      	ldr	r2, [pc, #84]	; (800b310 <prvHeapInit+0xb4>)
 800b2bc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b2be:	4b14      	ldr	r3, [pc, #80]	; (800b310 <prvHeapInit+0xb4>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b2c6:	4b12      	ldr	r3, [pc, #72]	; (800b310 <prvHeapInit+0xb4>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	68fa      	ldr	r2, [r7, #12]
 800b2d6:	1ad2      	subs	r2, r2, r3
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b2dc:	4b0c      	ldr	r3, [pc, #48]	; (800b310 <prvHeapInit+0xb4>)
 800b2de:	681a      	ldr	r2, [r3, #0]
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	685b      	ldr	r3, [r3, #4]
 800b2e8:	4a0a      	ldr	r2, [pc, #40]	; (800b314 <prvHeapInit+0xb8>)
 800b2ea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	685b      	ldr	r3, [r3, #4]
 800b2f0:	4a09      	ldr	r2, [pc, #36]	; (800b318 <prvHeapInit+0xbc>)
 800b2f2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b2f4:	4b09      	ldr	r3, [pc, #36]	; (800b31c <prvHeapInit+0xc0>)
 800b2f6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b2fa:	601a      	str	r2, [r3, #0]
}
 800b2fc:	bf00      	nop
 800b2fe:	3714      	adds	r7, #20
 800b300:	46bd      	mov	sp, r7
 800b302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b306:	4770      	bx	lr
 800b308:	200001fc 	.word	0x200001fc
 800b30c:	200081fc 	.word	0x200081fc
 800b310:	20008204 	.word	0x20008204
 800b314:	2000820c 	.word	0x2000820c
 800b318:	20008208 	.word	0x20008208
 800b31c:	20008210 	.word	0x20008210

0800b320 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b320:	b480      	push	{r7}
 800b322:	b085      	sub	sp, #20
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b328:	4b28      	ldr	r3, [pc, #160]	; (800b3cc <prvInsertBlockIntoFreeList+0xac>)
 800b32a:	60fb      	str	r3, [r7, #12]
 800b32c:	e002      	b.n	800b334 <prvInsertBlockIntoFreeList+0x14>
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	60fb      	str	r3, [r7, #12]
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	687a      	ldr	r2, [r7, #4]
 800b33a:	429a      	cmp	r2, r3
 800b33c:	d8f7      	bhi.n	800b32e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	685b      	ldr	r3, [r3, #4]
 800b346:	68ba      	ldr	r2, [r7, #8]
 800b348:	4413      	add	r3, r2
 800b34a:	687a      	ldr	r2, [r7, #4]
 800b34c:	429a      	cmp	r2, r3
 800b34e:	d108      	bne.n	800b362 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	685a      	ldr	r2, [r3, #4]
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	685b      	ldr	r3, [r3, #4]
 800b358:	441a      	add	r2, r3
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	685b      	ldr	r3, [r3, #4]
 800b36a:	68ba      	ldr	r2, [r7, #8]
 800b36c:	441a      	add	r2, r3
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	429a      	cmp	r2, r3
 800b374:	d118      	bne.n	800b3a8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	681a      	ldr	r2, [r3, #0]
 800b37a:	4b15      	ldr	r3, [pc, #84]	; (800b3d0 <prvInsertBlockIntoFreeList+0xb0>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	429a      	cmp	r2, r3
 800b380:	d00d      	beq.n	800b39e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	685a      	ldr	r2, [r3, #4]
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	685b      	ldr	r3, [r3, #4]
 800b38c:	441a      	add	r2, r3
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	681a      	ldr	r2, [r3, #0]
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	601a      	str	r2, [r3, #0]
 800b39c:	e008      	b.n	800b3b0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b39e:	4b0c      	ldr	r3, [pc, #48]	; (800b3d0 <prvInsertBlockIntoFreeList+0xb0>)
 800b3a0:	681a      	ldr	r2, [r3, #0]
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	601a      	str	r2, [r3, #0]
 800b3a6:	e003      	b.n	800b3b0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	681a      	ldr	r2, [r3, #0]
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b3b0:	68fa      	ldr	r2, [r7, #12]
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	429a      	cmp	r2, r3
 800b3b6:	d002      	beq.n	800b3be <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	687a      	ldr	r2, [r7, #4]
 800b3bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b3be:	bf00      	nop
 800b3c0:	3714      	adds	r7, #20
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c8:	4770      	bx	lr
 800b3ca:	bf00      	nop
 800b3cc:	200081fc 	.word	0x200081fc
 800b3d0:	20008204 	.word	0x20008204

0800b3d4 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800b3d8:	bf00      	nop
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e0:	4770      	bx	lr

0800b3e2 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800b3e2:	b480      	push	{r7}
 800b3e4:	b083      	sub	sp, #12
 800b3e6:	af00      	add	r7, sp, #0
 800b3e8:	6078      	str	r0, [r7, #4]
 800b3ea:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800b3ec:	bf00      	nop
 800b3ee:	370c      	adds	r7, #12
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f6:	4770      	bx	lr

0800b3f8 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 800b3fc:	bf00      	nop
 800b3fe:	46bd      	mov	sp, r7
 800b400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b404:	4770      	bx	lr
	...

0800b408 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800b408:	b480      	push	{r7}
 800b40a:	b085      	sub	sp, #20
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	60f8      	str	r0, [r7, #12]
 800b410:	60b9      	str	r1, [r7, #8]
 800b412:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	4a07      	ldr	r2, [pc, #28]	; (800b434 <vApplicationGetIdleTaskMemory+0x2c>)
 800b418:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	4a06      	ldr	r2, [pc, #24]	; (800b438 <vApplicationGetIdleTaskMemory+0x30>)
 800b41e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2280      	movs	r2, #128	; 0x80
 800b424:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800b426:	bf00      	nop
 800b428:	3714      	adds	r7, #20
 800b42a:	46bd      	mov	sp, r7
 800b42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b430:	4770      	bx	lr
 800b432:	bf00      	nop
 800b434:	20008214 	.word	0x20008214
 800b438:	2000826c 	.word	0x2000826c

0800b43c <LCD_i2cDeviceCheck>:
/**
*@brief: LCD I2C device check
*@retval: None
*/
void LCD_i2cDeviceCheck(void)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	af00      	add	r7, sp, #0
    /* Checks if target device is ready for communication. */
    HAL_Delay(50);
 800b440:	2032      	movs	r0, #50	; 0x32
 800b442:	f7f5 f89f 	bl	8000584 <HAL_Delay>
    HAL_I2C_IsDeviceReady(hi2cx, i2cDeviceAddr, 3, 1000);
 800b446:	4b06      	ldr	r3, [pc, #24]	; (800b460 <LCD_i2cDeviceCheck+0x24>)
 800b448:	6818      	ldr	r0, [r3, #0]
 800b44a:	4b06      	ldr	r3, [pc, #24]	; (800b464 <LCD_i2cDeviceCheck+0x28>)
 800b44c:	781b      	ldrb	r3, [r3, #0]
 800b44e:	b299      	uxth	r1, r3
 800b450:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b454:	2203      	movs	r2, #3
 800b456:	f7f7 fcc7 	bl	8002de8 <HAL_I2C_IsDeviceReady>
}
 800b45a:	bf00      	nop
 800b45c:	bd80      	pop	{r7, pc}
 800b45e:	bf00      	nop
 800b460:	20000030 	.word	0x20000030
 800b464:	2000002c 	.word	0x2000002c

0800b468 <LCD_Set_Command>:
/**
*@brief: Send commands to LCD
*@retval: None
*/
void LCD_Set_Command(uint8_t cmd)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b084      	sub	sp, #16
 800b46c:	af02      	add	r7, sp, #8
 800b46e:	4603      	mov	r3, r0
 800b470:	71fb      	strb	r3, [r7, #7]
    data_M = cmd & Mask_Data;        //Most significant bit
 800b472:	4b23      	ldr	r3, [pc, #140]	; (800b500 <LCD_Set_Command+0x98>)
 800b474:	781a      	ldrb	r2, [r3, #0]
 800b476:	79fb      	ldrb	r3, [r7, #7]
 800b478:	4013      	ands	r3, r2
 800b47a:	b2da      	uxtb	r2, r3
 800b47c:	4b21      	ldr	r3, [pc, #132]	; (800b504 <LCD_Set_Command+0x9c>)
 800b47e:	701a      	strb	r2, [r3, #0]
    data_L = (cmd << 4) & Mask_Data; //Least significant bit
 800b480:	79fb      	ldrb	r3, [r7, #7]
 800b482:	011b      	lsls	r3, r3, #4
 800b484:	b25a      	sxtb	r2, r3
 800b486:	4b1e      	ldr	r3, [pc, #120]	; (800b500 <LCD_Set_Command+0x98>)
 800b488:	781b      	ldrb	r3, [r3, #0]
 800b48a:	b25b      	sxtb	r3, r3
 800b48c:	4013      	ands	r3, r2
 800b48e:	b25b      	sxtb	r3, r3
 800b490:	b2da      	uxtb	r2, r3
 800b492:	4b1d      	ldr	r3, [pc, #116]	; (800b508 <LCD_Set_Command+0xa0>)
 800b494:	701a      	strb	r2, [r3, #0]

    //For backlight On/off
    data_M |= data_BL;
 800b496:	4b1b      	ldr	r3, [pc, #108]	; (800b504 <LCD_Set_Command+0x9c>)
 800b498:	781a      	ldrb	r2, [r3, #0]
 800b49a:	4b1c      	ldr	r3, [pc, #112]	; (800b50c <LCD_Set_Command+0xa4>)
 800b49c:	781b      	ldrb	r3, [r3, #0]
 800b49e:	4313      	orrs	r3, r2
 800b4a0:	b2da      	uxtb	r2, r3
 800b4a2:	4b18      	ldr	r3, [pc, #96]	; (800b504 <LCD_Set_Command+0x9c>)
 800b4a4:	701a      	strb	r2, [r3, #0]
    data_L |= data_BL;
 800b4a6:	4b18      	ldr	r3, [pc, #96]	; (800b508 <LCD_Set_Command+0xa0>)
 800b4a8:	781a      	ldrb	r2, [r3, #0]
 800b4aa:	4b18      	ldr	r3, [pc, #96]	; (800b50c <LCD_Set_Command+0xa4>)
 800b4ac:	781b      	ldrb	r3, [r3, #0]
 800b4ae:	4313      	orrs	r3, r2
 800b4b0:	b2da      	uxtb	r2, r3
 800b4b2:	4b15      	ldr	r3, [pc, #84]	; (800b508 <LCD_Set_Command+0xa0>)
 800b4b4:	701a      	strb	r2, [r3, #0]

    data[0] = data_M | LCD_E; //Enable E pin, RS=0
 800b4b6:	4b13      	ldr	r3, [pc, #76]	; (800b504 <LCD_Set_Command+0x9c>)
 800b4b8:	781b      	ldrb	r3, [r3, #0]
 800b4ba:	f043 0304 	orr.w	r3, r3, #4
 800b4be:	b2da      	uxtb	r2, r3
 800b4c0:	4b13      	ldr	r3, [pc, #76]	; (800b510 <LCD_Set_Command+0xa8>)
 800b4c2:	701a      	strb	r2, [r3, #0]
    data[1] = data_M;         //Disable E pin, RS=0
 800b4c4:	4b0f      	ldr	r3, [pc, #60]	; (800b504 <LCD_Set_Command+0x9c>)
 800b4c6:	781a      	ldrb	r2, [r3, #0]
 800b4c8:	4b11      	ldr	r3, [pc, #68]	; (800b510 <LCD_Set_Command+0xa8>)
 800b4ca:	705a      	strb	r2, [r3, #1]
    data[2] = data_L | LCD_E;
 800b4cc:	4b0e      	ldr	r3, [pc, #56]	; (800b508 <LCD_Set_Command+0xa0>)
 800b4ce:	781b      	ldrb	r3, [r3, #0]
 800b4d0:	f043 0304 	orr.w	r3, r3, #4
 800b4d4:	b2da      	uxtb	r2, r3
 800b4d6:	4b0e      	ldr	r3, [pc, #56]	; (800b510 <LCD_Set_Command+0xa8>)
 800b4d8:	709a      	strb	r2, [r3, #2]
    data[3] = data_L;
 800b4da:	4b0b      	ldr	r3, [pc, #44]	; (800b508 <LCD_Set_Command+0xa0>)
 800b4dc:	781a      	ldrb	r2, [r3, #0]
 800b4de:	4b0c      	ldr	r3, [pc, #48]	; (800b510 <LCD_Set_Command+0xa8>)
 800b4e0:	70da      	strb	r2, [r3, #3]

    HAL_I2C_Master_Transmit(hi2cx, i2cDeviceAddr, (uint8_t*)data, 4, 200);
 800b4e2:	4b0c      	ldr	r3, [pc, #48]	; (800b514 <LCD_Set_Command+0xac>)
 800b4e4:	6818      	ldr	r0, [r3, #0]
 800b4e6:	4b0c      	ldr	r3, [pc, #48]	; (800b518 <LCD_Set_Command+0xb0>)
 800b4e8:	781b      	ldrb	r3, [r3, #0]
 800b4ea:	b299      	uxth	r1, r3
 800b4ec:	23c8      	movs	r3, #200	; 0xc8
 800b4ee:	9300      	str	r3, [sp, #0]
 800b4f0:	2304      	movs	r3, #4
 800b4f2:	4a07      	ldr	r2, [pc, #28]	; (800b510 <LCD_Set_Command+0xa8>)
 800b4f4:	f7f7 fb7a 	bl	8002bec <HAL_I2C_Master_Transmit>
}
 800b4f8:	bf00      	nop
 800b4fa:	3708      	adds	r7, #8
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd80      	pop	{r7, pc}
 800b500:	20000034 	.word	0x20000034
 800b504:	20008470 	.word	0x20008470
 800b508:	20008471 	.word	0x20008471
 800b50c:	20008472 	.word	0x20008472
 800b510:	2000846c 	.word	0x2000846c
 800b514:	20000030 	.word	0x20000030
 800b518:	2000002c 	.word	0x2000002c

0800b51c <LCD_Write_Data>:
/**
*@brief: Write data to LCD
*@retval: None
*/
void LCD_Write_Data(uint8_t datax)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b084      	sub	sp, #16
 800b520:	af02      	add	r7, sp, #8
 800b522:	4603      	mov	r3, r0
 800b524:	71fb      	strb	r3, [r7, #7]
    data_M = datax & Mask_Data;        //Most significant bit
 800b526:	4b26      	ldr	r3, [pc, #152]	; (800b5c0 <LCD_Write_Data+0xa4>)
 800b528:	781a      	ldrb	r2, [r3, #0]
 800b52a:	79fb      	ldrb	r3, [r7, #7]
 800b52c:	4013      	ands	r3, r2
 800b52e:	b2da      	uxtb	r2, r3
 800b530:	4b24      	ldr	r3, [pc, #144]	; (800b5c4 <LCD_Write_Data+0xa8>)
 800b532:	701a      	strb	r2, [r3, #0]
    data_L = (datax << 4) & Mask_Data; //Least significant bit
 800b534:	79fb      	ldrb	r3, [r7, #7]
 800b536:	011b      	lsls	r3, r3, #4
 800b538:	b25a      	sxtb	r2, r3
 800b53a:	4b21      	ldr	r3, [pc, #132]	; (800b5c0 <LCD_Write_Data+0xa4>)
 800b53c:	781b      	ldrb	r3, [r3, #0]
 800b53e:	b25b      	sxtb	r3, r3
 800b540:	4013      	ands	r3, r2
 800b542:	b25b      	sxtb	r3, r3
 800b544:	b2da      	uxtb	r2, r3
 800b546:	4b20      	ldr	r3, [pc, #128]	; (800b5c8 <LCD_Write_Data+0xac>)
 800b548:	701a      	strb	r2, [r3, #0]

    //For backlight On/off
    data_M |= data_BL;
 800b54a:	4b1e      	ldr	r3, [pc, #120]	; (800b5c4 <LCD_Write_Data+0xa8>)
 800b54c:	781a      	ldrb	r2, [r3, #0]
 800b54e:	4b1f      	ldr	r3, [pc, #124]	; (800b5cc <LCD_Write_Data+0xb0>)
 800b550:	781b      	ldrb	r3, [r3, #0]
 800b552:	4313      	orrs	r3, r2
 800b554:	b2da      	uxtb	r2, r3
 800b556:	4b1b      	ldr	r3, [pc, #108]	; (800b5c4 <LCD_Write_Data+0xa8>)
 800b558:	701a      	strb	r2, [r3, #0]
    data_L |= data_BL;
 800b55a:	4b1b      	ldr	r3, [pc, #108]	; (800b5c8 <LCD_Write_Data+0xac>)
 800b55c:	781a      	ldrb	r2, [r3, #0]
 800b55e:	4b1b      	ldr	r3, [pc, #108]	; (800b5cc <LCD_Write_Data+0xb0>)
 800b560:	781b      	ldrb	r3, [r3, #0]
 800b562:	4313      	orrs	r3, r2
 800b564:	b2da      	uxtb	r2, r3
 800b566:	4b18      	ldr	r3, [pc, #96]	; (800b5c8 <LCD_Write_Data+0xac>)
 800b568:	701a      	strb	r2, [r3, #0]

    data[0] = data_M | LCD_E | LCD_RS; //Enable E pin, RS=1
 800b56a:	4b16      	ldr	r3, [pc, #88]	; (800b5c4 <LCD_Write_Data+0xa8>)
 800b56c:	781b      	ldrb	r3, [r3, #0]
 800b56e:	f043 0305 	orr.w	r3, r3, #5
 800b572:	b2da      	uxtb	r2, r3
 800b574:	4b16      	ldr	r3, [pc, #88]	; (800b5d0 <LCD_Write_Data+0xb4>)
 800b576:	701a      	strb	r2, [r3, #0]
    data[1] = data_M | LCD_RS;         //Disable E pin, RS=1
 800b578:	4b12      	ldr	r3, [pc, #72]	; (800b5c4 <LCD_Write_Data+0xa8>)
 800b57a:	781b      	ldrb	r3, [r3, #0]
 800b57c:	f043 0301 	orr.w	r3, r3, #1
 800b580:	b2da      	uxtb	r2, r3
 800b582:	4b13      	ldr	r3, [pc, #76]	; (800b5d0 <LCD_Write_Data+0xb4>)
 800b584:	705a      	strb	r2, [r3, #1]
    data[2] = data_L | LCD_E | LCD_RS;
 800b586:	4b10      	ldr	r3, [pc, #64]	; (800b5c8 <LCD_Write_Data+0xac>)
 800b588:	781b      	ldrb	r3, [r3, #0]
 800b58a:	f043 0305 	orr.w	r3, r3, #5
 800b58e:	b2da      	uxtb	r2, r3
 800b590:	4b0f      	ldr	r3, [pc, #60]	; (800b5d0 <LCD_Write_Data+0xb4>)
 800b592:	709a      	strb	r2, [r3, #2]
    data[3] = data_L | LCD_RS;
 800b594:	4b0c      	ldr	r3, [pc, #48]	; (800b5c8 <LCD_Write_Data+0xac>)
 800b596:	781b      	ldrb	r3, [r3, #0]
 800b598:	f043 0301 	orr.w	r3, r3, #1
 800b59c:	b2da      	uxtb	r2, r3
 800b59e:	4b0c      	ldr	r3, [pc, #48]	; (800b5d0 <LCD_Write_Data+0xb4>)
 800b5a0:	70da      	strb	r2, [r3, #3]

    HAL_I2C_Master_Transmit(hi2cx, i2cDeviceAddr, (uint8_t*)data, 4, 200);
 800b5a2:	4b0c      	ldr	r3, [pc, #48]	; (800b5d4 <LCD_Write_Data+0xb8>)
 800b5a4:	6818      	ldr	r0, [r3, #0]
 800b5a6:	4b0c      	ldr	r3, [pc, #48]	; (800b5d8 <LCD_Write_Data+0xbc>)
 800b5a8:	781b      	ldrb	r3, [r3, #0]
 800b5aa:	b299      	uxth	r1, r3
 800b5ac:	23c8      	movs	r3, #200	; 0xc8
 800b5ae:	9300      	str	r3, [sp, #0]
 800b5b0:	2304      	movs	r3, #4
 800b5b2:	4a07      	ldr	r2, [pc, #28]	; (800b5d0 <LCD_Write_Data+0xb4>)
 800b5b4:	f7f7 fb1a 	bl	8002bec <HAL_I2C_Master_Transmit>
}
 800b5b8:	bf00      	nop
 800b5ba:	3708      	adds	r7, #8
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}
 800b5c0:	20000034 	.word	0x20000034
 800b5c4:	20008470 	.word	0x20008470
 800b5c8:	20008471 	.word	0x20008471
 800b5cc:	20008472 	.word	0x20008472
 800b5d0:	2000846c 	.word	0x2000846c
 800b5d4:	20000030 	.word	0x20000030
 800b5d8:	2000002c 	.word	0x2000002c

0800b5dc <LCD_SetCursor>:
*@param: line_x: line number
*@param: char_x: character number
*@retval: None
*/
void LCD_SetCursor(int line_x, int char_x)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b082      	sub	sp, #8
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
 800b5e4:	6039      	str	r1, [r7, #0]
    line_pos = line_x; //hold line position
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	b2da      	uxtb	r2, r3
 800b5ea:	4b10      	ldr	r3, [pc, #64]	; (800b62c <LCD_SetCursor+0x50>)
 800b5ec:	701a      	strb	r2, [r3, #0]
    if(((line_x >= 1 && line_x <= LINE_MAX) && (char_x >= 1 && char_x <= CHAR_MAX)))
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	dd17      	ble.n	800b624 <LCD_SetCursor+0x48>
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2b02      	cmp	r3, #2
 800b5f8:	dc14      	bgt.n	800b624 <LCD_SetCursor+0x48>
 800b5fa:	683b      	ldr	r3, [r7, #0]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	dd11      	ble.n	800b624 <LCD_SetCursor+0x48>
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	2b10      	cmp	r3, #16
 800b604:	dc0e      	bgt.n	800b624 <LCD_SetCursor+0x48>
    {
        LCD_Set_Command(LCD_SET_DDRAMADDR | Cursor_Data[line_x - 1][char_x - 1]);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	1e5a      	subs	r2, r3, #1
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	3b01      	subs	r3, #1
 800b60e:	4908      	ldr	r1, [pc, #32]	; (800b630 <LCD_SetCursor+0x54>)
 800b610:	0112      	lsls	r2, r2, #4
 800b612:	440a      	add	r2, r1
 800b614:	4413      	add	r3, r2
 800b616:	781b      	ldrb	r3, [r3, #0]
 800b618:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b61c:	b2db      	uxtb	r3, r3
 800b61e:	4618      	mov	r0, r3
 800b620:	f7ff ff22 	bl	800b468 <LCD_Set_Command>
    }
}
 800b624:	bf00      	nop
 800b626:	3708      	adds	r7, #8
 800b628:	46bd      	mov	sp, r7
 800b62a:	bd80      	pop	{r7, pc}
 800b62c:	20000035 	.word	0x20000035
 800b630:	0800d6e4 	.word	0x0800d6e4

0800b634 <LCD_Send_String>:
*@param: str[]: string array
*@param: mode: str slide/noslide
*@retval: None
*/
void LCD_Send_String(char str[], uint8_t mode)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b084      	sub	sp, #16
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
 800b63c:	460b      	mov	r3, r1
 800b63e:	70fb      	strb	r3, [r7, #3]
    static char *buffer[BFR_MAX];
    static uint8_t i[4] = {CHAR_MAX, CHAR_MAX, CHAR_MAX, CHAR_MAX}; //i follows the ch position while sliding
    static uint8_t c[4] = {0, 0, 0, 0}; //c follows the each ch of the str buffer while sliding
    static uint8_t ch_len = 0; //follow the string length
    str_len = 0;
 800b640:	4b50      	ldr	r3, [pc, #320]	; (800b784 <LCD_Send_String+0x150>)
 800b642:	2200      	movs	r2, #0
 800b644:	701a      	strb	r2, [r3, #0]

    switch(mode)
 800b646:	78fb      	ldrb	r3, [r7, #3]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d01d      	beq.n	800b688 <LCD_Send_String+0x54>
 800b64c:	2b01      	cmp	r3, #1
 800b64e:	d020      	beq.n	800b692 <LCD_Send_String+0x5e>
                }
            }

            break;
    }
}
 800b650:	e093      	b.n	800b77a <LCD_Send_String+0x146>
                LCD_Write_Data(*str++);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	1c5a      	adds	r2, r3, #1
 800b656:	607a      	str	r2, [r7, #4]
 800b658:	781b      	ldrb	r3, [r3, #0]
 800b65a:	4618      	mov	r0, r3
 800b65c:	f7ff ff5e 	bl	800b51c <LCD_Write_Data>
                str_len++;
 800b660:	4b48      	ldr	r3, [pc, #288]	; (800b784 <LCD_Send_String+0x150>)
 800b662:	781b      	ldrb	r3, [r3, #0]
 800b664:	3301      	adds	r3, #1
 800b666:	b2da      	uxtb	r2, r3
 800b668:	4b46      	ldr	r3, [pc, #280]	; (800b784 <LCD_Send_String+0x150>)
 800b66a:	701a      	strb	r2, [r3, #0]
                if(str_len == CHAR_MAX)
 800b66c:	4b45      	ldr	r3, [pc, #276]	; (800b784 <LCD_Send_String+0x150>)
 800b66e:	781b      	ldrb	r3, [r3, #0]
 800b670:	2b10      	cmp	r3, #16
 800b672:	d109      	bne.n	800b688 <LCD_Send_String+0x54>
                    LCD_SetCursor(line_pos + 1, 1);
 800b674:	4b44      	ldr	r3, [pc, #272]	; (800b788 <LCD_Send_String+0x154>)
 800b676:	781b      	ldrb	r3, [r3, #0]
 800b678:	3301      	adds	r3, #1
 800b67a:	2101      	movs	r1, #1
 800b67c:	4618      	mov	r0, r3
 800b67e:	f7ff ffad 	bl	800b5dc <LCD_SetCursor>
                    str_len = 0;
 800b682:	4b40      	ldr	r3, [pc, #256]	; (800b784 <LCD_Send_String+0x150>)
 800b684:	2200      	movs	r2, #0
 800b686:	701a      	strb	r2, [r3, #0]
            while (*str)
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	781b      	ldrb	r3, [r3, #0]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d1e0      	bne.n	800b652 <LCD_Send_String+0x1e>
            break;
 800b690:	e073      	b.n	800b77a <LCD_Send_String+0x146>
            for(int a = 0; a < BFR_MAX; a++)
 800b692:	2300      	movs	r3, #0
 800b694:	60fb      	str	r3, [r7, #12]
 800b696:	e009      	b.n	800b6ac <LCD_Send_String+0x78>
            buffer[a]=str++;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	1c5a      	adds	r2, r3, #1
 800b69c:	607a      	str	r2, [r7, #4]
 800b69e:	493b      	ldr	r1, [pc, #236]	; (800b78c <LCD_Send_String+0x158>)
 800b6a0:	68fa      	ldr	r2, [r7, #12]
 800b6a2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
            for(int a = 0; a < BFR_MAX; a++)
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	3301      	adds	r3, #1
 800b6aa:	60fb      	str	r3, [r7, #12]
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	2b63      	cmp	r3, #99	; 0x63
 800b6b0:	ddf2      	ble.n	800b698 <LCD_Send_String+0x64>
            ch_len = strlen(*buffer);
 800b6b2:	4b36      	ldr	r3, [pc, #216]	; (800b78c <LCD_Send_String+0x158>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	f7f4 fd9a 	bl	80001f0 <strlen>
 800b6bc:	4603      	mov	r3, r0
 800b6be:	b2da      	uxtb	r2, r3
 800b6c0:	4b33      	ldr	r3, [pc, #204]	; (800b790 <LCD_Send_String+0x15c>)
 800b6c2:	701a      	strb	r2, [r3, #0]
            LCD_SetCursor(line_pos, i[line_pos - 1]);
 800b6c4:	4b30      	ldr	r3, [pc, #192]	; (800b788 <LCD_Send_String+0x154>)
 800b6c6:	781b      	ldrb	r3, [r3, #0]
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	4b2f      	ldr	r3, [pc, #188]	; (800b788 <LCD_Send_String+0x154>)
 800b6cc:	781b      	ldrb	r3, [r3, #0]
 800b6ce:	3b01      	subs	r3, #1
 800b6d0:	4a30      	ldr	r2, [pc, #192]	; (800b794 <LCD_Send_String+0x160>)
 800b6d2:	5cd3      	ldrb	r3, [r2, r3]
 800b6d4:	4619      	mov	r1, r3
 800b6d6:	f7ff ff81 	bl	800b5dc <LCD_SetCursor>
            for(int k = c[line_pos - 1]; k < ch_len; k++)
 800b6da:	4b2b      	ldr	r3, [pc, #172]	; (800b788 <LCD_Send_String+0x154>)
 800b6dc:	781b      	ldrb	r3, [r3, #0]
 800b6de:	3b01      	subs	r3, #1
 800b6e0:	4a2d      	ldr	r2, [pc, #180]	; (800b798 <LCD_Send_String+0x164>)
 800b6e2:	5cd3      	ldrb	r3, [r2, r3]
 800b6e4:	60bb      	str	r3, [r7, #8]
 800b6e6:	e00a      	b.n	800b6fe <LCD_Send_String+0xca>
            LCD_Write_Data (*buffer[k]);
 800b6e8:	4a28      	ldr	r2, [pc, #160]	; (800b78c <LCD_Send_String+0x158>)
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b6f0:	781b      	ldrb	r3, [r3, #0]
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	f7ff ff12 	bl	800b51c <LCD_Write_Data>
            for(int k = c[line_pos - 1]; k < ch_len; k++)
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	3301      	adds	r3, #1
 800b6fc:	60bb      	str	r3, [r7, #8]
 800b6fe:	4b24      	ldr	r3, [pc, #144]	; (800b790 <LCD_Send_String+0x15c>)
 800b700:	781b      	ldrb	r3, [r3, #0]
 800b702:	461a      	mov	r2, r3
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	4293      	cmp	r3, r2
 800b708:	dbee      	blt.n	800b6e8 <LCD_Send_String+0xb4>
            i[line_pos - 1]--;
 800b70a:	4b1f      	ldr	r3, [pc, #124]	; (800b788 <LCD_Send_String+0x154>)
 800b70c:	781b      	ldrb	r3, [r3, #0]
 800b70e:	3b01      	subs	r3, #1
 800b710:	4a20      	ldr	r2, [pc, #128]	; (800b794 <LCD_Send_String+0x160>)
 800b712:	5cd2      	ldrb	r2, [r2, r3]
 800b714:	3a01      	subs	r2, #1
 800b716:	b2d1      	uxtb	r1, r2
 800b718:	4a1e      	ldr	r2, [pc, #120]	; (800b794 <LCD_Send_String+0x160>)
 800b71a:	54d1      	strb	r1, [r2, r3]
            if(i[line_pos - 1] == 0)
 800b71c:	4b1a      	ldr	r3, [pc, #104]	; (800b788 <LCD_Send_String+0x154>)
 800b71e:	781b      	ldrb	r3, [r3, #0]
 800b720:	3b01      	subs	r3, #1
 800b722:	4a1c      	ldr	r2, [pc, #112]	; (800b794 <LCD_Send_String+0x160>)
 800b724:	5cd3      	ldrb	r3, [r2, r3]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d126      	bne.n	800b778 <LCD_Send_String+0x144>
                i[line_pos - 1] = 1;
 800b72a:	4b17      	ldr	r3, [pc, #92]	; (800b788 <LCD_Send_String+0x154>)
 800b72c:	781b      	ldrb	r3, [r3, #0]
 800b72e:	3b01      	subs	r3, #1
 800b730:	4a18      	ldr	r2, [pc, #96]	; (800b794 <LCD_Send_String+0x160>)
 800b732:	2101      	movs	r1, #1
 800b734:	54d1      	strb	r1, [r2, r3]
                c[line_pos - 1]++;
 800b736:	4b14      	ldr	r3, [pc, #80]	; (800b788 <LCD_Send_String+0x154>)
 800b738:	781b      	ldrb	r3, [r3, #0]
 800b73a:	3b01      	subs	r3, #1
 800b73c:	4a16      	ldr	r2, [pc, #88]	; (800b798 <LCD_Send_String+0x164>)
 800b73e:	5cd2      	ldrb	r2, [r2, r3]
 800b740:	3201      	adds	r2, #1
 800b742:	b2d1      	uxtb	r1, r2
 800b744:	4a14      	ldr	r2, [pc, #80]	; (800b798 <LCD_Send_String+0x164>)
 800b746:	54d1      	strb	r1, [r2, r3]
                if(c[line_pos - 1] == ch_len)
 800b748:	4b0f      	ldr	r3, [pc, #60]	; (800b788 <LCD_Send_String+0x154>)
 800b74a:	781b      	ldrb	r3, [r3, #0]
 800b74c:	3b01      	subs	r3, #1
 800b74e:	4a12      	ldr	r2, [pc, #72]	; (800b798 <LCD_Send_String+0x164>)
 800b750:	5cd2      	ldrb	r2, [r2, r3]
 800b752:	4b0f      	ldr	r3, [pc, #60]	; (800b790 <LCD_Send_String+0x15c>)
 800b754:	781b      	ldrb	r3, [r3, #0]
 800b756:	429a      	cmp	r2, r3
 800b758:	d10e      	bne.n	800b778 <LCD_Send_String+0x144>
                    i[line_pos - 1] = CHAR_MAX;
 800b75a:	4b0b      	ldr	r3, [pc, #44]	; (800b788 <LCD_Send_String+0x154>)
 800b75c:	781b      	ldrb	r3, [r3, #0]
 800b75e:	3b01      	subs	r3, #1
 800b760:	4a0c      	ldr	r2, [pc, #48]	; (800b794 <LCD_Send_String+0x160>)
 800b762:	2110      	movs	r1, #16
 800b764:	54d1      	strb	r1, [r2, r3]
                    c[line_pos - 1] = 0;
 800b766:	4b08      	ldr	r3, [pc, #32]	; (800b788 <LCD_Send_String+0x154>)
 800b768:	781b      	ldrb	r3, [r3, #0]
 800b76a:	3b01      	subs	r3, #1
 800b76c:	4a0a      	ldr	r2, [pc, #40]	; (800b798 <LCD_Send_String+0x164>)
 800b76e:	2100      	movs	r1, #0
 800b770:	54d1      	strb	r1, [r2, r3]
                    ch_len = 0;
 800b772:	4b07      	ldr	r3, [pc, #28]	; (800b790 <LCD_Send_String+0x15c>)
 800b774:	2200      	movs	r2, #0
 800b776:	701a      	strb	r2, [r3, #0]
            break;
 800b778:	bf00      	nop
}
 800b77a:	bf00      	nop
 800b77c:	3710      	adds	r7, #16
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}
 800b782:	bf00      	nop
 800b784:	20008473 	.word	0x20008473
 800b788:	20000035 	.word	0x20000035
 800b78c:	20008474 	.word	0x20008474
 800b790:	20008604 	.word	0x20008604
 800b794:	20000038 	.word	0x20000038
 800b798:	20008608 	.word	0x20008608

0800b79c <LCD_BackLight>:
*@brief: Backlight control
*@param: light_state: backlight on/off
*@retval: None
*/
void LCD_BackLight(uint8_t light_state)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b082      	sub	sp, #8
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	71fb      	strb	r3, [r7, #7]
    if(light_state == LCD_BL_ON)
 800b7a6:	79fb      	ldrb	r3, [r7, #7]
 800b7a8:	2b08      	cmp	r3, #8
 800b7aa:	d106      	bne.n	800b7ba <LCD_BackLight+0x1e>
    {
        data_BL = LCD_BL_ON;
 800b7ac:	4b09      	ldr	r3, [pc, #36]	; (800b7d4 <LCD_BackLight+0x38>)
 800b7ae:	2208      	movs	r2, #8
 800b7b0:	701a      	strb	r2, [r3, #0]
        LCD_Write_Data(0x20); //empty character
 800b7b2:	2020      	movs	r0, #32
 800b7b4:	f7ff feb2 	bl	800b51c <LCD_Write_Data>
    else if (light_state == LCD_BL_OFF)
    {
        data_BL = LCD_BL_OFF;
        LCD_Write_Data(0x20);
    }
}
 800b7b8:	e008      	b.n	800b7cc <LCD_BackLight+0x30>
    else if (light_state == LCD_BL_OFF)
 800b7ba:	79fb      	ldrb	r3, [r7, #7]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d105      	bne.n	800b7cc <LCD_BackLight+0x30>
        data_BL = LCD_BL_OFF;
 800b7c0:	4b04      	ldr	r3, [pc, #16]	; (800b7d4 <LCD_BackLight+0x38>)
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	701a      	strb	r2, [r3, #0]
        LCD_Write_Data(0x20);
 800b7c6:	2020      	movs	r0, #32
 800b7c8:	f7ff fea8 	bl	800b51c <LCD_Write_Data>
}
 800b7cc:	bf00      	nop
 800b7ce:	3708      	adds	r7, #8
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}
 800b7d4:	20008472 	.word	0x20008472

0800b7d8 <LCD_Init>:
/**
*@brief: LCD initialization settings
*@retval: None
*/
void LCD_Init(void)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	af00      	add	r7, sp, #0
    LCD_Set_Command(LCD_CLEAR_DISPLAY);
 800b7dc:	2001      	movs	r0, #1
 800b7de:	f7ff fe43 	bl	800b468 <LCD_Set_Command>
    HAL_Delay(1000);
 800b7e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b7e6:	f7f4 fecd 	bl	8000584 <HAL_Delay>
    LCD_Set_Command(LCD_RETURN_HOME);
 800b7ea:	2002      	movs	r0, #2
 800b7ec:	f7ff fe3c 	bl	800b468 <LCD_Set_Command>
    HAL_Delay(5);
 800b7f0:	2005      	movs	r0, #5
 800b7f2:	f7f4 fec7 	bl	8000584 <HAL_Delay>
    LCD_Set_Command(LCD_FUNCTION_SET|MODE_4B|MODE_2L|MODE_5X8_DOTS);
 800b7f6:	2028      	movs	r0, #40	; 0x28
 800b7f8:	f7ff fe36 	bl	800b468 <LCD_Set_Command>
    HAL_Delay(5);
 800b7fc:	2005      	movs	r0, #5
 800b7fe:	f7f4 fec1 	bl	8000584 <HAL_Delay>
    LCD_Set_Command(LCD_DISPLAY_CONTROL|DISPLAY_ON|CURSOR_OFF|BLINK_OFF);
 800b802:	200c      	movs	r0, #12
 800b804:	f7ff fe30 	bl	800b468 <LCD_Set_Command>
    HAL_Delay(5);
 800b808:	2005      	movs	r0, #5
 800b80a:	f7f4 febb 	bl	8000584 <HAL_Delay>
    LCD_Set_Command(LCD_SET_DDRAMADDR);
 800b80e:	2080      	movs	r0, #128	; 0x80
 800b810:	f7ff fe2a 	bl	800b468 <LCD_Set_Command>
    HAL_Delay(500);
 800b814:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b818:	f7f4 feb4 	bl	8000584 <HAL_Delay>
}
 800b81c:	bf00      	nop
 800b81e:	bd80      	pop	{r7, pc}

0800b820 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800b820:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b822:	b08d      	sub	sp, #52	; 0x34
 800b824:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800b826:	f7f4 fe6b 	bl	8000500 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800b82a:	f000 f90f 	bl	800ba4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800b82e:	f000 fbbb 	bl	800bfa8 <MX_GPIO_Init>
  MX_CRC_Init();
 800b832:	f000 f98f 	bl	800bb54 <MX_CRC_Init>
  MX_DMA2D_Init();
 800b836:	f000 f9a1 	bl	800bb7c <MX_DMA2D_Init>
  MX_FMC_Init();
 800b83a:	f000 fb65 	bl	800bf08 <MX_FMC_Init>
  MX_I2C3_Init();
 800b83e:	f000 f9cf 	bl	800bbe0 <MX_I2C3_Init>
  MX_LTDC_Init();
 800b842:	f000 fa0d 	bl	800bc60 <MX_LTDC_Init>
  MX_SPI5_Init();
 800b846:	f000 fa8b 	bl	800bd60 <MX_SPI5_Init>
  MX_TIM1_Init();
 800b84a:	f000 fabf 	bl	800bdcc <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800b84e:	f000 fb31 	bl	800beb4 <MX_USART1_UART_Init>
  MX_TIM10_Init();
 800b852:	f000 fb0b 	bl	800be6c <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  /* Start TIM10 */
  if (HAL_TIM_Base_Start_IT(&htim10) != HAL_OK)
 800b856:	486f      	ldr	r0, [pc, #444]	; (800ba14 <main+0x1f4>)
 800b858:	f7f9 f8f5 	bl	8004a46 <HAL_TIM_Base_Start_IT>
 800b85c:	4603      	mov	r3, r0
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d001      	beq.n	800b866 <main+0x46>
  {
    Error_Handler();
 800b862:	f000 fe1f 	bl	800c4a4 <Error_Handler>
  }
  /* Turn on LED4 */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 800b866:	2201      	movs	r2, #1
 800b868:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b86c:	486a      	ldr	r0, [pc, #424]	; (800ba18 <main+0x1f8>)
 800b86e:	f7f5 fb57 	bl	8000f20 <HAL_GPIO_WritePin>
  /* Turn on LED3 */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800b872:	2201      	movs	r2, #1
 800b874:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b878:	4867      	ldr	r0, [pc, #412]	; (800ba18 <main+0x1f8>)
 800b87a:	f7f5 fb51 	bl	8000f20 <HAL_GPIO_WritePin>
  /* Set the MorseCode Elapsed Time Relative to the htim10 Instance */
  MorseCode_Time_Elpased_Unit   = (htim10.Instance->ARR + 1) / 2;
 800b87e:	4b65      	ldr	r3, [pc, #404]	; (800ba14 <main+0x1f4>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b884:	3301      	adds	r3, #1
 800b886:	085b      	lsrs	r3, r3, #1
 800b888:	f04f 0400 	mov.w	r4, #0
 800b88c:	4a63      	ldr	r2, [pc, #396]	; (800ba1c <main+0x1fc>)
 800b88e:	e9c2 3400 	strd	r3, r4, [r2]
  MorseCode_Time_Elapsed_Dot    = (uint64_t)MorseCode_Time_Elpased_Unit;
 800b892:	4b62      	ldr	r3, [pc, #392]	; (800ba1c <main+0x1fc>)
 800b894:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b898:	4a61      	ldr	r2, [pc, #388]	; (800ba20 <main+0x200>)
 800b89a:	e9c2 3400 	strd	r3, r4, [r2]
  MorseCode_Time_Elapsed_Dash   = (uint64_t)(3 * MorseCode_Time_Elpased_Unit);
 800b89e:	4b5f      	ldr	r3, [pc, #380]	; (800ba1c <main+0x1fc>)
 800b8a0:	e9d3 1200 	ldrd	r1, r2, [r3]
 800b8a4:	460d      	mov	r5, r1
 800b8a6:	4616      	mov	r6, r2
 800b8a8:	196b      	adds	r3, r5, r5
 800b8aa:	eb46 0406 	adc.w	r4, r6, r6
 800b8ae:	461d      	mov	r5, r3
 800b8b0:	4626      	mov	r6, r4
 800b8b2:	186b      	adds	r3, r5, r1
 800b8b4:	eb46 0402 	adc.w	r4, r6, r2
 800b8b8:	4a5a      	ldr	r2, [pc, #360]	; (800ba24 <main+0x204>)
 800b8ba:	e9c2 3400 	strd	r3, r4, [r2]
  /* Set the MorseCode Lookup */
  MorseCode_Lookup[0x01][0x00] = 'E';
 800b8be:	4b5a      	ldr	r3, [pc, #360]	; (800ba28 <main+0x208>)
 800b8c0:	2245      	movs	r2, #69	; 0x45
 800b8c2:	77da      	strb	r2, [r3, #31]
  MorseCode_Lookup[0x01][0x01] = 'T';
 800b8c4:	4b58      	ldr	r3, [pc, #352]	; (800ba28 <main+0x208>)
 800b8c6:	2254      	movs	r2, #84	; 0x54
 800b8c8:	f883 2020 	strb.w	r2, [r3, #32]
  MorseCode_Lookup[0x02][0x00] = 'I';
 800b8cc:	4b56      	ldr	r3, [pc, #344]	; (800ba28 <main+0x208>)
 800b8ce:	2249      	movs	r2, #73	; 0x49
 800b8d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  MorseCode_Lookup[0x02][0x01] = 'A';
 800b8d4:	4b54      	ldr	r3, [pc, #336]	; (800ba28 <main+0x208>)
 800b8d6:	2241      	movs	r2, #65	; 0x41
 800b8d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  MorseCode_Lookup[0x02][0x02] = 'N';
 800b8dc:	4b52      	ldr	r3, [pc, #328]	; (800ba28 <main+0x208>)
 800b8de:	224e      	movs	r2, #78	; 0x4e
 800b8e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  MorseCode_Lookup[0x02][0x03] = 'M';
 800b8e4:	4b50      	ldr	r3, [pc, #320]	; (800ba28 <main+0x208>)
 800b8e6:	224d      	movs	r2, #77	; 0x4d
 800b8e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  MorseCode_Lookup[0x03][0x00] = 'S';
 800b8ec:	4b4e      	ldr	r3, [pc, #312]	; (800ba28 <main+0x208>)
 800b8ee:	2253      	movs	r2, #83	; 0x53
 800b8f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  MorseCode_Lookup[0x03][0x01] = 'U';
 800b8f4:	4b4c      	ldr	r3, [pc, #304]	; (800ba28 <main+0x208>)
 800b8f6:	2255      	movs	r2, #85	; 0x55
 800b8f8:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  MorseCode_Lookup[0x03][0x02] = 'R';
 800b8fc:	4b4a      	ldr	r3, [pc, #296]	; (800ba28 <main+0x208>)
 800b8fe:	2252      	movs	r2, #82	; 0x52
 800b900:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
  MorseCode_Lookup[0x03][0x03] = 'W';
 800b904:	4b48      	ldr	r3, [pc, #288]	; (800ba28 <main+0x208>)
 800b906:	2257      	movs	r2, #87	; 0x57
 800b908:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  MorseCode_Lookup[0x03][0x04] = 'D';
 800b90c:	4b46      	ldr	r3, [pc, #280]	; (800ba28 <main+0x208>)
 800b90e:	2244      	movs	r2, #68	; 0x44
 800b910:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  MorseCode_Lookup[0x03][0x05] = 'K';
 800b914:	4b44      	ldr	r3, [pc, #272]	; (800ba28 <main+0x208>)
 800b916:	224b      	movs	r2, #75	; 0x4b
 800b918:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  MorseCode_Lookup[0x03][0x06] = 'G';
 800b91c:	4b42      	ldr	r3, [pc, #264]	; (800ba28 <main+0x208>)
 800b91e:	2247      	movs	r2, #71	; 0x47
 800b920:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
  MorseCode_Lookup[0x03][0x07] = 'O';
 800b924:	4b40      	ldr	r3, [pc, #256]	; (800ba28 <main+0x208>)
 800b926:	224f      	movs	r2, #79	; 0x4f
 800b928:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
  MorseCode_Lookup[0x04][0x00] = 'H';
 800b92c:	4b3e      	ldr	r3, [pc, #248]	; (800ba28 <main+0x208>)
 800b92e:	2248      	movs	r2, #72	; 0x48
 800b930:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  MorseCode_Lookup[0x04][0x01] = 'V';
 800b934:	4b3c      	ldr	r3, [pc, #240]	; (800ba28 <main+0x208>)
 800b936:	2256      	movs	r2, #86	; 0x56
 800b938:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  MorseCode_Lookup[0x04][0x02] = 'F';
 800b93c:	4b3a      	ldr	r3, [pc, #232]	; (800ba28 <main+0x208>)
 800b93e:	2246      	movs	r2, #70	; 0x46
 800b940:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
  MorseCode_Lookup[0x04][0x04] = 'L';
 800b944:	4b38      	ldr	r3, [pc, #224]	; (800ba28 <main+0x208>)
 800b946:	224c      	movs	r2, #76	; 0x4c
 800b948:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  MorseCode_Lookup[0x04][0x06] = 'P';
 800b94c:	4b36      	ldr	r3, [pc, #216]	; (800ba28 <main+0x208>)
 800b94e:	2250      	movs	r2, #80	; 0x50
 800b950:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  MorseCode_Lookup[0x04][0x07] = 'J';
 800b954:	4b34      	ldr	r3, [pc, #208]	; (800ba28 <main+0x208>)
 800b956:	224a      	movs	r2, #74	; 0x4a
 800b958:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
  MorseCode_Lookup[0x04][0x08] = 'B';
 800b95c:	4b32      	ldr	r3, [pc, #200]	; (800ba28 <main+0x208>)
 800b95e:	2242      	movs	r2, #66	; 0x42
 800b960:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  MorseCode_Lookup[0x04][0x09] = 'X';
 800b964:	4b30      	ldr	r3, [pc, #192]	; (800ba28 <main+0x208>)
 800b966:	2258      	movs	r2, #88	; 0x58
 800b968:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
  MorseCode_Lookup[0x04][0x0A] = 'C';
 800b96c:	4b2e      	ldr	r3, [pc, #184]	; (800ba28 <main+0x208>)
 800b96e:	2243      	movs	r2, #67	; 0x43
 800b970:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  MorseCode_Lookup[0x04][0x0B] = 'Y';
 800b974:	4b2c      	ldr	r3, [pc, #176]	; (800ba28 <main+0x208>)
 800b976:	2259      	movs	r2, #89	; 0x59
 800b978:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
  MorseCode_Lookup[0x04][0x0C] = 'Z';
 800b97c:	4b2a      	ldr	r3, [pc, #168]	; (800ba28 <main+0x208>)
 800b97e:	225a      	movs	r2, #90	; 0x5a
 800b980:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
  MorseCode_Lookup[0x04][0x0D] = 'Q';
 800b984:	4b28      	ldr	r3, [pc, #160]	; (800ba28 <main+0x208>)
 800b986:	2251      	movs	r2, #81	; 0x51
 800b988:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  /* Initiate the LCD */
  LCD_i2cDeviceCheck();
 800b98c:	f7ff fd56 	bl	800b43c <LCD_i2cDeviceCheck>
  LCD_Init();
 800b990:	f7ff ff22 	bl	800b7d8 <LCD_Init>
  LCD_BackLight(LCD_BL_ON);
 800b994:	2008      	movs	r0, #8
 800b996:	f7ff ff01 	bl	800b79c <LCD_BackLight>
  LCD_SetCursor(1, 1);
 800b99a:	2101      	movs	r1, #1
 800b99c:	2001      	movs	r0, #1
 800b99e:	f7ff fe1d 	bl	800b5dc <LCD_SetCursor>
  uint32_t base = 400;
 800b9a2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800b9a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t *paddr = base;
 800b9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9aa:	623b      	str	r3, [r7, #32]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 800b9ac:	4b1f      	ldr	r3, [pc, #124]	; (800ba2c <main+0x20c>)
 800b9ae:	1d3c      	adds	r4, r7, #4
 800b9b0:	461d      	mov	r5, r3
 800b9b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b9b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b9b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b9ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800b9be:	1d3b      	adds	r3, r7, #4
 800b9c0:	2100      	movs	r1, #0
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f7fd f9a3 	bl	8008d0e <osThreadCreate>
 800b9c8:	4602      	mov	r2, r0
 800b9ca:	4b19      	ldr	r3, [pc, #100]	; (800ba30 <main+0x210>)
 800b9cc:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  if (xTaskCreate(Task1, "Task1", 1024, NULL, 1, &TaskHandle_1) != pdPASS)
 800b9ce:	4b19      	ldr	r3, [pc, #100]	; (800ba34 <main+0x214>)
 800b9d0:	9301      	str	r3, [sp, #4]
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	9300      	str	r3, [sp, #0]
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b9dc:	4916      	ldr	r1, [pc, #88]	; (800ba38 <main+0x218>)
 800b9de:	4817      	ldr	r0, [pc, #92]	; (800ba3c <main+0x21c>)
 800b9e0:	f7fe f911 	bl	8009c06 <xTaskCreate>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	2b01      	cmp	r3, #1
 800b9e8:	d001      	beq.n	800b9ee <main+0x1ce>
  {
    Error_Handler();
 800b9ea:	f000 fd5b 	bl	800c4a4 <Error_Handler>
  }
  if (xTaskCreate(Task2, "Task2", 1024, NULL, 2, &TaskHandle_2) != pdPASS)
 800b9ee:	4b14      	ldr	r3, [pc, #80]	; (800ba40 <main+0x220>)
 800b9f0:	9301      	str	r3, [sp, #4]
 800b9f2:	2302      	movs	r3, #2
 800b9f4:	9300      	str	r3, [sp, #0]
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b9fc:	4911      	ldr	r1, [pc, #68]	; (800ba44 <main+0x224>)
 800b9fe:	4812      	ldr	r0, [pc, #72]	; (800ba48 <main+0x228>)
 800ba00:	f7fe f901 	bl	8009c06 <xTaskCreate>
 800ba04:	4603      	mov	r3, r0
 800ba06:	2b01      	cmp	r3, #1
 800ba08:	d001      	beq.n	800ba0e <main+0x1ee>
  {
    Error_Handler();
 800ba0a:	f000 fd4b 	bl	800c4a4 <Error_Handler>
  }
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800ba0e:	f7fd f977 	bl	8008d00 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800ba12:	e7fe      	b.n	800ba12 <main+0x1f2>
 800ba14:	20008790 	.word	0x20008790
 800ba18:	40021800 	.word	0x40021800
 800ba1c:	200087d8 	.word	0x200087d8
 800ba20:	20008908 	.word	0x20008908
 800ba24:	20008788 	.word	0x20008788
 800ba28:	2000861c 	.word	0x2000861c
 800ba2c:	0800d6c8 	.word	0x0800d6c8
 800ba30:	200086d0 	.word	0x200086d0
 800ba34:	20008950 	.word	0x20008950
 800ba38:	0800d6ac 	.word	0x0800d6ac
 800ba3c:	0800c221 	.word	0x0800c221
 800ba40:	20008780 	.word	0x20008780
 800ba44:	0800d6b4 	.word	0x0800d6b4
 800ba48:	0800c345 	.word	0x0800c345

0800ba4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b0a0      	sub	sp, #128	; 0x80
 800ba50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800ba52:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ba56:	2230      	movs	r2, #48	; 0x30
 800ba58:	2100      	movs	r1, #0
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f001 fd35 	bl	800d4ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800ba60:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ba64:	2200      	movs	r2, #0
 800ba66:	601a      	str	r2, [r3, #0]
 800ba68:	605a      	str	r2, [r3, #4]
 800ba6a:	609a      	str	r2, [r3, #8]
 800ba6c:	60da      	str	r2, [r3, #12]
 800ba6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ba70:	f107 030c 	add.w	r3, r7, #12
 800ba74:	2230      	movs	r2, #48	; 0x30
 800ba76:	2100      	movs	r1, #0
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f001 fd26 	bl	800d4ca <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800ba7e:	2300      	movs	r3, #0
 800ba80:	60bb      	str	r3, [r7, #8]
 800ba82:	4b32      	ldr	r3, [pc, #200]	; (800bb4c <SystemClock_Config+0x100>)
 800ba84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba86:	4a31      	ldr	r2, [pc, #196]	; (800bb4c <SystemClock_Config+0x100>)
 800ba88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba8c:	6413      	str	r3, [r2, #64]	; 0x40
 800ba8e:	4b2f      	ldr	r3, [pc, #188]	; (800bb4c <SystemClock_Config+0x100>)
 800ba90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba96:	60bb      	str	r3, [r7, #8]
 800ba98:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	607b      	str	r3, [r7, #4]
 800ba9e:	4b2c      	ldr	r3, [pc, #176]	; (800bb50 <SystemClock_Config+0x104>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800baa6:	4a2a      	ldr	r2, [pc, #168]	; (800bb50 <SystemClock_Config+0x104>)
 800baa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800baac:	6013      	str	r3, [r2, #0]
 800baae:	4b28      	ldr	r3, [pc, #160]	; (800bb50 <SystemClock_Config+0x104>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800bab6:	607b      	str	r3, [r7, #4]
 800bab8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800baba:	2301      	movs	r3, #1
 800babc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800babe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800bac2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800bac4:	2302      	movs	r3, #2
 800bac6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800bac8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bacc:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800bace:	2304      	movs	r3, #4
 800bad0:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 72;
 800bad2:	2348      	movs	r3, #72	; 0x48
 800bad4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800bad6:	2302      	movs	r3, #2
 800bad8:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800bada:	2303      	movs	r3, #3
 800badc:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800bade:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800bae2:	4618      	mov	r0, r3
 800bae4:	f7f8 f89a 	bl	8003c1c <HAL_RCC_OscConfig>
 800bae8:	4603      	mov	r3, r0
 800baea:	2b00      	cmp	r3, #0
 800baec:	d001      	beq.n	800baf2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800baee:	f000 fcd9 	bl	800c4a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800baf2:	230f      	movs	r3, #15
 800baf4:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800baf6:	2302      	movs	r3, #2
 800baf8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800bafa:	2300      	movs	r3, #0
 800bafc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800bafe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800bb04:	2300      	movs	r3, #0
 800bb06:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800bb08:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bb0c:	2102      	movs	r1, #2
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f7f8 faf4 	bl	80040fc <HAL_RCC_ClockConfig>
 800bb14:	4603      	mov	r3, r0
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d001      	beq.n	800bb1e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800bb1a:	f000 fcc3 	bl	800c4a4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800bb1e:	2308      	movs	r3, #8
 800bb20:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800bb22:	2332      	movs	r3, #50	; 0x32
 800bb24:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800bb26:	2302      	movs	r3, #2
 800bb28:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800bb2e:	f107 030c 	add.w	r3, r7, #12
 800bb32:	4618      	mov	r0, r3
 800bb34:	f7f8 fd06 	bl	8004544 <HAL_RCCEx_PeriphCLKConfig>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d001      	beq.n	800bb42 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800bb3e:	f000 fcb1 	bl	800c4a4 <Error_Handler>
  }
}
 800bb42:	bf00      	nop
 800bb44:	3780      	adds	r7, #128	; 0x80
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}
 800bb4a:	bf00      	nop
 800bb4c:	40023800 	.word	0x40023800
 800bb50:	40007000 	.word	0x40007000

0800bb54 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800bb58:	4b06      	ldr	r3, [pc, #24]	; (800bb74 <MX_CRC_Init+0x20>)
 800bb5a:	4a07      	ldr	r2, [pc, #28]	; (800bb78 <MX_CRC_Init+0x24>)
 800bb5c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800bb5e:	4805      	ldr	r0, [pc, #20]	; (800bb74 <MX_CRC_Init+0x20>)
 800bb60:	f7f4 fe14 	bl	800078c <HAL_CRC_Init>
 800bb64:	4603      	mov	r3, r0
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d001      	beq.n	800bb6e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800bb6a:	f000 fc9b 	bl	800c4a4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800bb6e:	bf00      	nop
 800bb70:	bd80      	pop	{r7, pc}
 800bb72:	bf00      	nop
 800bb74:	200087d0 	.word	0x200087d0
 800bb78:	40023000 	.word	0x40023000

0800bb7c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800bb80:	4b15      	ldr	r3, [pc, #84]	; (800bbd8 <MX_DMA2D_Init+0x5c>)
 800bb82:	4a16      	ldr	r2, [pc, #88]	; (800bbdc <MX_DMA2D_Init+0x60>)
 800bb84:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800bb86:	4b14      	ldr	r3, [pc, #80]	; (800bbd8 <MX_DMA2D_Init+0x5c>)
 800bb88:	2200      	movs	r2, #0
 800bb8a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800bb8c:	4b12      	ldr	r3, [pc, #72]	; (800bbd8 <MX_DMA2D_Init+0x5c>)
 800bb8e:	2200      	movs	r2, #0
 800bb90:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800bb92:	4b11      	ldr	r3, [pc, #68]	; (800bbd8 <MX_DMA2D_Init+0x5c>)
 800bb94:	2200      	movs	r2, #0
 800bb96:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800bb98:	4b0f      	ldr	r3, [pc, #60]	; (800bbd8 <MX_DMA2D_Init+0x5c>)
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800bb9e:	4b0e      	ldr	r3, [pc, #56]	; (800bbd8 <MX_DMA2D_Init+0x5c>)
 800bba0:	2200      	movs	r2, #0
 800bba2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800bba4:	4b0c      	ldr	r3, [pc, #48]	; (800bbd8 <MX_DMA2D_Init+0x5c>)
 800bba6:	2200      	movs	r2, #0
 800bba8:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800bbaa:	4b0b      	ldr	r3, [pc, #44]	; (800bbd8 <MX_DMA2D_Init+0x5c>)
 800bbac:	2200      	movs	r2, #0
 800bbae:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800bbb0:	4809      	ldr	r0, [pc, #36]	; (800bbd8 <MX_DMA2D_Init+0x5c>)
 800bbb2:	f7f4 fe07 	bl	80007c4 <HAL_DMA2D_Init>
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d001      	beq.n	800bbc0 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800bbbc:	f000 fc72 	bl	800c4a4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800bbc0:	2101      	movs	r1, #1
 800bbc2:	4805      	ldr	r0, [pc, #20]	; (800bbd8 <MX_DMA2D_Init+0x5c>)
 800bbc4:	f7f4 ff58 	bl	8000a78 <HAL_DMA2D_ConfigLayer>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d001      	beq.n	800bbd2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800bbce:	f000 fc69 	bl	800c4a4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800bbd2:	bf00      	nop
 800bbd4:	bd80      	pop	{r7, pc}
 800bbd6:	bf00      	nop
 800bbd8:	20008910 	.word	0x20008910
 800bbdc:	4002b000 	.word	0x4002b000

0800bbe0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800bbe4:	4b1b      	ldr	r3, [pc, #108]	; (800bc54 <MX_I2C3_Init+0x74>)
 800bbe6:	4a1c      	ldr	r2, [pc, #112]	; (800bc58 <MX_I2C3_Init+0x78>)
 800bbe8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800bbea:	4b1a      	ldr	r3, [pc, #104]	; (800bc54 <MX_I2C3_Init+0x74>)
 800bbec:	4a1b      	ldr	r2, [pc, #108]	; (800bc5c <MX_I2C3_Init+0x7c>)
 800bbee:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800bbf0:	4b18      	ldr	r3, [pc, #96]	; (800bc54 <MX_I2C3_Init+0x74>)
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800bbf6:	4b17      	ldr	r3, [pc, #92]	; (800bc54 <MX_I2C3_Init+0x74>)
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800bbfc:	4b15      	ldr	r3, [pc, #84]	; (800bc54 <MX_I2C3_Init+0x74>)
 800bbfe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800bc02:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800bc04:	4b13      	ldr	r3, [pc, #76]	; (800bc54 <MX_I2C3_Init+0x74>)
 800bc06:	2200      	movs	r2, #0
 800bc08:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800bc0a:	4b12      	ldr	r3, [pc, #72]	; (800bc54 <MX_I2C3_Init+0x74>)
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800bc10:	4b10      	ldr	r3, [pc, #64]	; (800bc54 <MX_I2C3_Init+0x74>)
 800bc12:	2200      	movs	r2, #0
 800bc14:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800bc16:	4b0f      	ldr	r3, [pc, #60]	; (800bc54 <MX_I2C3_Init+0x74>)
 800bc18:	2200      	movs	r2, #0
 800bc1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800bc1c:	480d      	ldr	r0, [pc, #52]	; (800bc54 <MX_I2C3_Init+0x74>)
 800bc1e:	f7f6 fead 	bl	800297c <HAL_I2C_Init>
 800bc22:	4603      	mov	r3, r0
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d001      	beq.n	800bc2c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800bc28:	f000 fc3c 	bl	800c4a4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800bc2c:	2100      	movs	r1, #0
 800bc2e:	4809      	ldr	r0, [pc, #36]	; (800bc54 <MX_I2C3_Init+0x74>)
 800bc30:	f7f7 fc11 	bl	8003456 <HAL_I2CEx_ConfigAnalogFilter>
 800bc34:	4603      	mov	r3, r0
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d001      	beq.n	800bc3e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800bc3a:	f000 fc33 	bl	800c4a4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800bc3e:	2100      	movs	r1, #0
 800bc40:	4804      	ldr	r0, [pc, #16]	; (800bc54 <MX_I2C3_Init+0x74>)
 800bc42:	f7f7 fc44 	bl	80034ce <HAL_I2CEx_ConfigDigitalFilter>
 800bc46:	4603      	mov	r3, r0
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d001      	beq.n	800bc50 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800bc4c:	f000 fc2a 	bl	800c4a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800bc50:	bf00      	nop
 800bc52:	bd80      	pop	{r7, pc}
 800bc54:	200086d4 	.word	0x200086d4
 800bc58:	40005c00 	.word	0x40005c00
 800bc5c:	000186a0 	.word	0x000186a0

0800bc60 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b08e      	sub	sp, #56	; 0x38
 800bc64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800bc66:	1d3b      	adds	r3, r7, #4
 800bc68:	2234      	movs	r2, #52	; 0x34
 800bc6a:	2100      	movs	r1, #0
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	f001 fc2c 	bl	800d4ca <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800bc72:	4b39      	ldr	r3, [pc, #228]	; (800bd58 <MX_LTDC_Init+0xf8>)
 800bc74:	4a39      	ldr	r2, [pc, #228]	; (800bd5c <MX_LTDC_Init+0xfc>)
 800bc76:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800bc78:	4b37      	ldr	r3, [pc, #220]	; (800bd58 <MX_LTDC_Init+0xf8>)
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800bc7e:	4b36      	ldr	r3, [pc, #216]	; (800bd58 <MX_LTDC_Init+0xf8>)
 800bc80:	2200      	movs	r2, #0
 800bc82:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800bc84:	4b34      	ldr	r3, [pc, #208]	; (800bd58 <MX_LTDC_Init+0xf8>)
 800bc86:	2200      	movs	r2, #0
 800bc88:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800bc8a:	4b33      	ldr	r3, [pc, #204]	; (800bd58 <MX_LTDC_Init+0xf8>)
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 800bc90:	4b31      	ldr	r3, [pc, #196]	; (800bd58 <MX_LTDC_Init+0xf8>)
 800bc92:	2209      	movs	r2, #9
 800bc94:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 800bc96:	4b30      	ldr	r3, [pc, #192]	; (800bd58 <MX_LTDC_Init+0xf8>)
 800bc98:	2201      	movs	r2, #1
 800bc9a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 800bc9c:	4b2e      	ldr	r3, [pc, #184]	; (800bd58 <MX_LTDC_Init+0xf8>)
 800bc9e:	221d      	movs	r2, #29
 800bca0:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 800bca2:	4b2d      	ldr	r3, [pc, #180]	; (800bd58 <MX_LTDC_Init+0xf8>)
 800bca4:	2203      	movs	r2, #3
 800bca6:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 800bca8:	4b2b      	ldr	r3, [pc, #172]	; (800bd58 <MX_LTDC_Init+0xf8>)
 800bcaa:	f240 120d 	movw	r2, #269	; 0x10d
 800bcae:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 800bcb0:	4b29      	ldr	r3, [pc, #164]	; (800bd58 <MX_LTDC_Init+0xf8>)
 800bcb2:	f240 1243 	movw	r2, #323	; 0x143
 800bcb6:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 800bcb8:	4b27      	ldr	r3, [pc, #156]	; (800bd58 <MX_LTDC_Init+0xf8>)
 800bcba:	f240 1217 	movw	r2, #279	; 0x117
 800bcbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 800bcc0:	4b25      	ldr	r3, [pc, #148]	; (800bd58 <MX_LTDC_Init+0xf8>)
 800bcc2:	f240 1247 	movw	r2, #327	; 0x147
 800bcc6:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800bcc8:	4b23      	ldr	r3, [pc, #140]	; (800bd58 <MX_LTDC_Init+0xf8>)
 800bcca:	2200      	movs	r2, #0
 800bccc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800bcd0:	4b21      	ldr	r3, [pc, #132]	; (800bd58 <MX_LTDC_Init+0xf8>)
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800bcd8:	4b1f      	ldr	r3, [pc, #124]	; (800bd58 <MX_LTDC_Init+0xf8>)
 800bcda:	2200      	movs	r2, #0
 800bcdc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800bce0:	481d      	ldr	r0, [pc, #116]	; (800bd58 <MX_LTDC_Init+0xf8>)
 800bce2:	f7f7 fc33 	bl	800354c <HAL_LTDC_Init>
 800bce6:	4603      	mov	r3, r0
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d001      	beq.n	800bcf0 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800bcec:	f000 fbda 	bl	800c4a4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 800bcf4:	23f0      	movs	r3, #240	; 0xf0
 800bcf6:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 800bcfc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800bd00:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800bd02:	2302      	movs	r3, #2
 800bd04:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800bd06:	23ff      	movs	r3, #255	; 0xff
 800bd08:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800bd0e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800bd12:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800bd14:	2307      	movs	r3, #7
 800bd16:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 800bd18:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 800bd1c:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 800bd1e:	23f0      	movs	r3, #240	; 0xf0
 800bd20:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 800bd22:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800bd26:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800bd2e:	2300      	movs	r3, #0
 800bd30:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800bd34:	2300      	movs	r3, #0
 800bd36:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800bd3a:	1d3b      	adds	r3, r7, #4
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	4619      	mov	r1, r3
 800bd40:	4805      	ldr	r0, [pc, #20]	; (800bd58 <MX_LTDC_Init+0xf8>)
 800bd42:	f7f7 fd95 	bl	8003870 <HAL_LTDC_ConfigLayer>
 800bd46:	4603      	mov	r3, r0
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d001      	beq.n	800bd50 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 800bd4c:	f000 fbaa 	bl	800c4a4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800bd50:	bf00      	nop
 800bd52:	3738      	adds	r7, #56	; 0x38
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}
 800bd58:	200087e0 	.word	0x200087e0
 800bd5c:	40016800 	.word	0x40016800

0800bd60 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 800bd64:	4b17      	ldr	r3, [pc, #92]	; (800bdc4 <MX_SPI5_Init+0x64>)
 800bd66:	4a18      	ldr	r2, [pc, #96]	; (800bdc8 <MX_SPI5_Init+0x68>)
 800bd68:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800bd6a:	4b16      	ldr	r3, [pc, #88]	; (800bdc4 <MX_SPI5_Init+0x64>)
 800bd6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 800bd70:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800bd72:	4b14      	ldr	r3, [pc, #80]	; (800bdc4 <MX_SPI5_Init+0x64>)
 800bd74:	2200      	movs	r2, #0
 800bd76:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800bd78:	4b12      	ldr	r3, [pc, #72]	; (800bdc4 <MX_SPI5_Init+0x64>)
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800bd7e:	4b11      	ldr	r3, [pc, #68]	; (800bdc4 <MX_SPI5_Init+0x64>)
 800bd80:	2200      	movs	r2, #0
 800bd82:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800bd84:	4b0f      	ldr	r3, [pc, #60]	; (800bdc4 <MX_SPI5_Init+0x64>)
 800bd86:	2200      	movs	r2, #0
 800bd88:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800bd8a:	4b0e      	ldr	r3, [pc, #56]	; (800bdc4 <MX_SPI5_Init+0x64>)
 800bd8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bd90:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800bd92:	4b0c      	ldr	r3, [pc, #48]	; (800bdc4 <MX_SPI5_Init+0x64>)
 800bd94:	2218      	movs	r2, #24
 800bd96:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800bd98:	4b0a      	ldr	r3, [pc, #40]	; (800bdc4 <MX_SPI5_Init+0x64>)
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800bd9e:	4b09      	ldr	r3, [pc, #36]	; (800bdc4 <MX_SPI5_Init+0x64>)
 800bda0:	2200      	movs	r2, #0
 800bda2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bda4:	4b07      	ldr	r3, [pc, #28]	; (800bdc4 <MX_SPI5_Init+0x64>)
 800bda6:	2200      	movs	r2, #0
 800bda8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800bdaa:	4b06      	ldr	r3, [pc, #24]	; (800bdc4 <MX_SPI5_Init+0x64>)
 800bdac:	220a      	movs	r2, #10
 800bdae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800bdb0:	4804      	ldr	r0, [pc, #16]	; (800bdc4 <MX_SPI5_Init+0x64>)
 800bdb2:	f7f8 fdb9 	bl	8004928 <HAL_SPI_Init>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d001      	beq.n	800bdc0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800bdbc:	f000 fb72 	bl	800c4a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800bdc0:	bf00      	nop
 800bdc2:	bd80      	pop	{r7, pc}
 800bdc4:	20008728 	.word	0x20008728
 800bdc8:	40015000 	.word	0x40015000

0800bdcc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b086      	sub	sp, #24
 800bdd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800bdd2:	f107 0308 	add.w	r3, r7, #8
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	601a      	str	r2, [r3, #0]
 800bdda:	605a      	str	r2, [r3, #4]
 800bddc:	609a      	str	r2, [r3, #8]
 800bdde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800bde0:	463b      	mov	r3, r7
 800bde2:	2200      	movs	r2, #0
 800bde4:	601a      	str	r2, [r3, #0]
 800bde6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800bde8:	4b1e      	ldr	r3, [pc, #120]	; (800be64 <MX_TIM1_Init+0x98>)
 800bdea:	4a1f      	ldr	r2, [pc, #124]	; (800be68 <MX_TIM1_Init+0x9c>)
 800bdec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800bdee:	4b1d      	ldr	r3, [pc, #116]	; (800be64 <MX_TIM1_Init+0x98>)
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bdf4:	4b1b      	ldr	r3, [pc, #108]	; (800be64 <MX_TIM1_Init+0x98>)
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 800bdfa:	4b1a      	ldr	r3, [pc, #104]	; (800be64 <MX_TIM1_Init+0x98>)
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800be00:	4b18      	ldr	r3, [pc, #96]	; (800be64 <MX_TIM1_Init+0x98>)
 800be02:	2200      	movs	r2, #0
 800be04:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800be06:	4b17      	ldr	r3, [pc, #92]	; (800be64 <MX_TIM1_Init+0x98>)
 800be08:	2200      	movs	r2, #0
 800be0a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800be0c:	4b15      	ldr	r3, [pc, #84]	; (800be64 <MX_TIM1_Init+0x98>)
 800be0e:	2200      	movs	r2, #0
 800be10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800be12:	4814      	ldr	r0, [pc, #80]	; (800be64 <MX_TIM1_Init+0x98>)
 800be14:	f7f8 fdec 	bl	80049f0 <HAL_TIM_Base_Init>
 800be18:	4603      	mov	r3, r0
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d001      	beq.n	800be22 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 800be1e:	f000 fb41 	bl	800c4a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800be22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800be26:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800be28:	f107 0308 	add.w	r3, r7, #8
 800be2c:	4619      	mov	r1, r3
 800be2e:	480d      	ldr	r0, [pc, #52]	; (800be64 <MX_TIM1_Init+0x98>)
 800be30:	f7f8 ff35 	bl	8004c9e <HAL_TIM_ConfigClockSource>
 800be34:	4603      	mov	r3, r0
 800be36:	2b00      	cmp	r3, #0
 800be38:	d001      	beq.n	800be3e <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 800be3a:	f000 fb33 	bl	800c4a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800be3e:	2300      	movs	r3, #0
 800be40:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800be42:	2300      	movs	r3, #0
 800be44:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800be46:	463b      	mov	r3, r7
 800be48:	4619      	mov	r1, r3
 800be4a:	4806      	ldr	r0, [pc, #24]	; (800be64 <MX_TIM1_Init+0x98>)
 800be4c:	f7f9 f940 	bl	80050d0 <HAL_TIMEx_MasterConfigSynchronization>
 800be50:	4603      	mov	r3, r0
 800be52:	2b00      	cmp	r3, #0
 800be54:	d001      	beq.n	800be5a <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800be56:	f000 fb25 	bl	800c4a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800be5a:	bf00      	nop
 800be5c:	3718      	adds	r7, #24
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}
 800be62:	bf00      	nop
 800be64:	200088c8 	.word	0x200088c8
 800be68:	40010000 	.word	0x40010000

0800be6c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800be70:	4b0e      	ldr	r3, [pc, #56]	; (800beac <MX_TIM10_Init+0x40>)
 800be72:	4a0f      	ldr	r2, [pc, #60]	; (800beb0 <MX_TIM10_Init+0x44>)
 800be74:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 71;
 800be76:	4b0d      	ldr	r3, [pc, #52]	; (800beac <MX_TIM10_Init+0x40>)
 800be78:	2247      	movs	r2, #71	; 0x47
 800be7a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800be7c:	4b0b      	ldr	r3, [pc, #44]	; (800beac <MX_TIM10_Init+0x40>)
 800be7e:	2200      	movs	r2, #0
 800be80:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 999;
 800be82:	4b0a      	ldr	r3, [pc, #40]	; (800beac <MX_TIM10_Init+0x40>)
 800be84:	f240 32e7 	movw	r2, #999	; 0x3e7
 800be88:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800be8a:	4b08      	ldr	r3, [pc, #32]	; (800beac <MX_TIM10_Init+0x40>)
 800be8c:	2200      	movs	r2, #0
 800be8e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800be90:	4b06      	ldr	r3, [pc, #24]	; (800beac <MX_TIM10_Init+0x40>)
 800be92:	2200      	movs	r2, #0
 800be94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800be96:	4805      	ldr	r0, [pc, #20]	; (800beac <MX_TIM10_Init+0x40>)
 800be98:	f7f8 fdaa 	bl	80049f0 <HAL_TIM_Base_Init>
 800be9c:	4603      	mov	r3, r0
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d001      	beq.n	800bea6 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800bea2:	f000 faff 	bl	800c4a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800bea6:	bf00      	nop
 800bea8:	bd80      	pop	{r7, pc}
 800beaa:	bf00      	nop
 800beac:	20008790 	.word	0x20008790
 800beb0:	40014400 	.word	0x40014400

0800beb4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800beb8:	4b11      	ldr	r3, [pc, #68]	; (800bf00 <MX_USART1_UART_Init+0x4c>)
 800beba:	4a12      	ldr	r2, [pc, #72]	; (800bf04 <MX_USART1_UART_Init+0x50>)
 800bebc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800bebe:	4b10      	ldr	r3, [pc, #64]	; (800bf00 <MX_USART1_UART_Init+0x4c>)
 800bec0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800bec4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800bec6:	4b0e      	ldr	r3, [pc, #56]	; (800bf00 <MX_USART1_UART_Init+0x4c>)
 800bec8:	2200      	movs	r2, #0
 800beca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800becc:	4b0c      	ldr	r3, [pc, #48]	; (800bf00 <MX_USART1_UART_Init+0x4c>)
 800bece:	2200      	movs	r2, #0
 800bed0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800bed2:	4b0b      	ldr	r3, [pc, #44]	; (800bf00 <MX_USART1_UART_Init+0x4c>)
 800bed4:	2200      	movs	r2, #0
 800bed6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800bed8:	4b09      	ldr	r3, [pc, #36]	; (800bf00 <MX_USART1_UART_Init+0x4c>)
 800beda:	220c      	movs	r2, #12
 800bedc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800bede:	4b08      	ldr	r3, [pc, #32]	; (800bf00 <MX_USART1_UART_Init+0x4c>)
 800bee0:	2200      	movs	r2, #0
 800bee2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800bee4:	4b06      	ldr	r3, [pc, #24]	; (800bf00 <MX_USART1_UART_Init+0x4c>)
 800bee6:	2200      	movs	r2, #0
 800bee8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800beea:	4805      	ldr	r0, [pc, #20]	; (800bf00 <MX_USART1_UART_Init+0x4c>)
 800beec:	f7f9 f980 	bl	80051f0 <HAL_UART_Init>
 800bef0:	4603      	mov	r3, r0
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d001      	beq.n	800befa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800bef6:	f000 fad5 	bl	800c4a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800befa:	bf00      	nop
 800befc:	bd80      	pop	{r7, pc}
 800befe:	bf00      	nop
 800bf00:	20008888 	.word	0x20008888
 800bf04:	40011000 	.word	0x40011000

0800bf08 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b088      	sub	sp, #32
 800bf0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800bf0e:	1d3b      	adds	r3, r7, #4
 800bf10:	2200      	movs	r2, #0
 800bf12:	601a      	str	r2, [r3, #0]
 800bf14:	605a      	str	r2, [r3, #4]
 800bf16:	609a      	str	r2, [r3, #8]
 800bf18:	60da      	str	r2, [r3, #12]
 800bf1a:	611a      	str	r2, [r3, #16]
 800bf1c:	615a      	str	r2, [r3, #20]
 800bf1e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800bf20:	4b1f      	ldr	r3, [pc, #124]	; (800bfa0 <MX_FMC_Init+0x98>)
 800bf22:	4a20      	ldr	r2, [pc, #128]	; (800bfa4 <MX_FMC_Init+0x9c>)
 800bf24:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800bf26:	4b1e      	ldr	r3, [pc, #120]	; (800bfa0 <MX_FMC_Init+0x98>)
 800bf28:	2201      	movs	r2, #1
 800bf2a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800bf2c:	4b1c      	ldr	r3, [pc, #112]	; (800bfa0 <MX_FMC_Init+0x98>)
 800bf2e:	2200      	movs	r2, #0
 800bf30:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800bf32:	4b1b      	ldr	r3, [pc, #108]	; (800bfa0 <MX_FMC_Init+0x98>)
 800bf34:	2204      	movs	r2, #4
 800bf36:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800bf38:	4b19      	ldr	r3, [pc, #100]	; (800bfa0 <MX_FMC_Init+0x98>)
 800bf3a:	2210      	movs	r2, #16
 800bf3c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800bf3e:	4b18      	ldr	r3, [pc, #96]	; (800bfa0 <MX_FMC_Init+0x98>)
 800bf40:	2240      	movs	r2, #64	; 0x40
 800bf42:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800bf44:	4b16      	ldr	r3, [pc, #88]	; (800bfa0 <MX_FMC_Init+0x98>)
 800bf46:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800bf4a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800bf4c:	4b14      	ldr	r3, [pc, #80]	; (800bfa0 <MX_FMC_Init+0x98>)
 800bf4e:	2200      	movs	r2, #0
 800bf50:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800bf52:	4b13      	ldr	r3, [pc, #76]	; (800bfa0 <MX_FMC_Init+0x98>)
 800bf54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bf58:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800bf5a:	4b11      	ldr	r3, [pc, #68]	; (800bfa0 <MX_FMC_Init+0x98>)
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 800bf60:	4b0f      	ldr	r3, [pc, #60]	; (800bfa0 <MX_FMC_Init+0x98>)
 800bf62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800bf66:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800bf68:	2302      	movs	r3, #2
 800bf6a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800bf6c:	2307      	movs	r3, #7
 800bf6e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800bf70:	2304      	movs	r3, #4
 800bf72:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800bf74:	2307      	movs	r3, #7
 800bf76:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800bf78:	2303      	movs	r3, #3
 800bf7a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800bf7c:	2302      	movs	r3, #2
 800bf7e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800bf80:	2302      	movs	r3, #2
 800bf82:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800bf84:	1d3b      	adds	r3, r7, #4
 800bf86:	4619      	mov	r1, r3
 800bf88:	4805      	ldr	r0, [pc, #20]	; (800bfa0 <MX_FMC_Init+0x98>)
 800bf8a:	f7f8 fc99 	bl	80048c0 <HAL_SDRAM_Init>
 800bf8e:	4603      	mov	r3, r0
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d001      	beq.n	800bf98 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800bf94:	f000 fa86 	bl	800c4a4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800bf98:	bf00      	nop
 800bf9a:	3720      	adds	r7, #32
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}
 800bfa0:	20008954 	.word	0x20008954
 800bfa4:	a0000140 	.word	0xa0000140

0800bfa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b08e      	sub	sp, #56	; 0x38
 800bfac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bfae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	601a      	str	r2, [r3, #0]
 800bfb6:	605a      	str	r2, [r3, #4]
 800bfb8:	609a      	str	r2, [r3, #8]
 800bfba:	60da      	str	r2, [r3, #12]
 800bfbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	623b      	str	r3, [r7, #32]
 800bfc2:	4b8e      	ldr	r3, [pc, #568]	; (800c1fc <MX_GPIO_Init+0x254>)
 800bfc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfc6:	4a8d      	ldr	r2, [pc, #564]	; (800c1fc <MX_GPIO_Init+0x254>)
 800bfc8:	f043 0304 	orr.w	r3, r3, #4
 800bfcc:	6313      	str	r3, [r2, #48]	; 0x30
 800bfce:	4b8b      	ldr	r3, [pc, #556]	; (800c1fc <MX_GPIO_Init+0x254>)
 800bfd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfd2:	f003 0304 	and.w	r3, r3, #4
 800bfd6:	623b      	str	r3, [r7, #32]
 800bfd8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800bfda:	2300      	movs	r3, #0
 800bfdc:	61fb      	str	r3, [r7, #28]
 800bfde:	4b87      	ldr	r3, [pc, #540]	; (800c1fc <MX_GPIO_Init+0x254>)
 800bfe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfe2:	4a86      	ldr	r2, [pc, #536]	; (800c1fc <MX_GPIO_Init+0x254>)
 800bfe4:	f043 0320 	orr.w	r3, r3, #32
 800bfe8:	6313      	str	r3, [r2, #48]	; 0x30
 800bfea:	4b84      	ldr	r3, [pc, #528]	; (800c1fc <MX_GPIO_Init+0x254>)
 800bfec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfee:	f003 0320 	and.w	r3, r3, #32
 800bff2:	61fb      	str	r3, [r7, #28]
 800bff4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800bff6:	2300      	movs	r3, #0
 800bff8:	61bb      	str	r3, [r7, #24]
 800bffa:	4b80      	ldr	r3, [pc, #512]	; (800c1fc <MX_GPIO_Init+0x254>)
 800bffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bffe:	4a7f      	ldr	r2, [pc, #508]	; (800c1fc <MX_GPIO_Init+0x254>)
 800c000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c004:	6313      	str	r3, [r2, #48]	; 0x30
 800c006:	4b7d      	ldr	r3, [pc, #500]	; (800c1fc <MX_GPIO_Init+0x254>)
 800c008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c00a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c00e:	61bb      	str	r3, [r7, #24]
 800c010:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c012:	2300      	movs	r3, #0
 800c014:	617b      	str	r3, [r7, #20]
 800c016:	4b79      	ldr	r3, [pc, #484]	; (800c1fc <MX_GPIO_Init+0x254>)
 800c018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c01a:	4a78      	ldr	r2, [pc, #480]	; (800c1fc <MX_GPIO_Init+0x254>)
 800c01c:	f043 0301 	orr.w	r3, r3, #1
 800c020:	6313      	str	r3, [r2, #48]	; 0x30
 800c022:	4b76      	ldr	r3, [pc, #472]	; (800c1fc <MX_GPIO_Init+0x254>)
 800c024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c026:	f003 0301 	and.w	r3, r3, #1
 800c02a:	617b      	str	r3, [r7, #20]
 800c02c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c02e:	2300      	movs	r3, #0
 800c030:	613b      	str	r3, [r7, #16]
 800c032:	4b72      	ldr	r3, [pc, #456]	; (800c1fc <MX_GPIO_Init+0x254>)
 800c034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c036:	4a71      	ldr	r2, [pc, #452]	; (800c1fc <MX_GPIO_Init+0x254>)
 800c038:	f043 0302 	orr.w	r3, r3, #2
 800c03c:	6313      	str	r3, [r2, #48]	; 0x30
 800c03e:	4b6f      	ldr	r3, [pc, #444]	; (800c1fc <MX_GPIO_Init+0x254>)
 800c040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c042:	f003 0302 	and.w	r3, r3, #2
 800c046:	613b      	str	r3, [r7, #16]
 800c048:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800c04a:	2300      	movs	r3, #0
 800c04c:	60fb      	str	r3, [r7, #12]
 800c04e:	4b6b      	ldr	r3, [pc, #428]	; (800c1fc <MX_GPIO_Init+0x254>)
 800c050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c052:	4a6a      	ldr	r2, [pc, #424]	; (800c1fc <MX_GPIO_Init+0x254>)
 800c054:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c058:	6313      	str	r3, [r2, #48]	; 0x30
 800c05a:	4b68      	ldr	r3, [pc, #416]	; (800c1fc <MX_GPIO_Init+0x254>)
 800c05c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c05e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c062:	60fb      	str	r3, [r7, #12]
 800c064:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800c066:	2300      	movs	r3, #0
 800c068:	60bb      	str	r3, [r7, #8]
 800c06a:	4b64      	ldr	r3, [pc, #400]	; (800c1fc <MX_GPIO_Init+0x254>)
 800c06c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c06e:	4a63      	ldr	r2, [pc, #396]	; (800c1fc <MX_GPIO_Init+0x254>)
 800c070:	f043 0310 	orr.w	r3, r3, #16
 800c074:	6313      	str	r3, [r2, #48]	; 0x30
 800c076:	4b61      	ldr	r3, [pc, #388]	; (800c1fc <MX_GPIO_Init+0x254>)
 800c078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c07a:	f003 0310 	and.w	r3, r3, #16
 800c07e:	60bb      	str	r3, [r7, #8]
 800c080:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c082:	2300      	movs	r3, #0
 800c084:	607b      	str	r3, [r7, #4]
 800c086:	4b5d      	ldr	r3, [pc, #372]	; (800c1fc <MX_GPIO_Init+0x254>)
 800c088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c08a:	4a5c      	ldr	r2, [pc, #368]	; (800c1fc <MX_GPIO_Init+0x254>)
 800c08c:	f043 0308 	orr.w	r3, r3, #8
 800c090:	6313      	str	r3, [r2, #48]	; 0x30
 800c092:	4b5a      	ldr	r3, [pc, #360]	; (800c1fc <MX_GPIO_Init+0x254>)
 800c094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c096:	f003 0308 	and.w	r3, r3, #8
 800c09a:	607b      	str	r3, [r7, #4]
 800c09c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800c09e:	2200      	movs	r2, #0
 800c0a0:	2116      	movs	r1, #22
 800c0a2:	4857      	ldr	r0, [pc, #348]	; (800c200 <MX_GPIO_Init+0x258>)
 800c0a4:	f7f4 ff3c 	bl	8000f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	2180      	movs	r1, #128	; 0x80
 800c0ac:	4855      	ldr	r0, [pc, #340]	; (800c204 <MX_GPIO_Init+0x25c>)
 800c0ae:	f7f4 ff37 	bl	8000f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800c0b8:	4853      	ldr	r0, [pc, #332]	; (800c208 <MX_GPIO_Init+0x260>)
 800c0ba:	f7f4 ff31 	bl	8000f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800c0be:	2200      	movs	r2, #0
 800c0c0:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800c0c4:	4851      	ldr	r0, [pc, #324]	; (800c20c <MX_GPIO_Init+0x264>)
 800c0c6:	f7f4 ff2b 	bl	8000f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B3_Pin */
  GPIO_InitStruct.Pin = B3_Pin;
 800c0ca:	2340      	movs	r3, #64	; 0x40
 800c0cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800c0ce:	4b50      	ldr	r3, [pc, #320]	; (800c210 <MX_GPIO_Init+0x268>)
 800c0d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800c0d2:	2302      	movs	r3, #2
 800c0d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 800c0d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c0da:	4619      	mov	r1, r3
 800c0dc:	484d      	ldr	r0, [pc, #308]	; (800c214 <MX_GPIO_Init+0x26c>)
 800c0de:	f7f4 fd5d 	bl	8000b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800c0e2:	2316      	movs	r3, #22
 800c0e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c0f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c0f6:	4619      	mov	r1, r3
 800c0f8:	4841      	ldr	r0, [pc, #260]	; (800c200 <MX_GPIO_Init+0x258>)
 800c0fa:	f7f4 fd4f 	bl	8000b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 800c0fe:	2308      	movs	r3, #8
 800c100:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800c102:	4b43      	ldr	r3, [pc, #268]	; (800c210 <MX_GPIO_Init+0x268>)
 800c104:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800c106:	2302      	movs	r3, #2
 800c108:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 800c10a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c10e:	4619      	mov	r1, r3
 800c110:	483b      	ldr	r0, [pc, #236]	; (800c200 <MX_GPIO_Init+0x258>)
 800c112:	f7f4 fd43 	bl	8000b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 800c116:	f248 0307 	movw	r3, #32775	; 0x8007
 800c11a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800c11c:	4b3e      	ldr	r3, [pc, #248]	; (800c218 <MX_GPIO_Init+0x270>)
 800c11e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c120:	2300      	movs	r3, #0
 800c122:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c124:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c128:	4619      	mov	r1, r3
 800c12a:	4836      	ldr	r0, [pc, #216]	; (800c204 <MX_GPIO_Init+0x25c>)
 800c12c:	f7f4 fd36 	bl	8000b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 800c130:	2380      	movs	r3, #128	; 0x80
 800c132:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c134:	2301      	movs	r3, #1
 800c136:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c138:	2300      	movs	r3, #0
 800c13a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c13c:	2300      	movs	r3, #0
 800c13e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800c140:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c144:	4619      	mov	r1, r3
 800c146:	482f      	ldr	r0, [pc, #188]	; (800c204 <MX_GPIO_Init+0x25c>)
 800c148:	f7f4 fd28 	bl	8000b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 800c14c:	2320      	movs	r3, #32
 800c14e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800c150:	4b31      	ldr	r3, [pc, #196]	; (800c218 <MX_GPIO_Init+0x270>)
 800c152:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c154:	2300      	movs	r3, #0
 800c156:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 800c158:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c15c:	4619      	mov	r1, r3
 800c15e:	4828      	ldr	r0, [pc, #160]	; (800c200 <MX_GPIO_Init+0x258>)
 800c160:	f7f4 fd1c 	bl	8000b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800c164:	2304      	movs	r3, #4
 800c166:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c168:	2300      	movs	r3, #0
 800c16a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c16c:	2300      	movs	r3, #0
 800c16e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800c170:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c174:	4619      	mov	r1, r3
 800c176:	4829      	ldr	r0, [pc, #164]	; (800c21c <MX_GPIO_Init+0x274>)
 800c178:	f7f4 fd10 	bl	8000b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 800c17c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c180:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c182:	2300      	movs	r3, #0
 800c184:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c186:	2300      	movs	r3, #0
 800c188:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800c18a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c18e:	4619      	mov	r1, r3
 800c190:	481d      	ldr	r0, [pc, #116]	; (800c208 <MX_GPIO_Init+0x260>)
 800c192:	f7f4 fd03 	bl	8000b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 800c196:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800c19a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c19c:	2301      	movs	r3, #1
 800c19e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c1a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c1ac:	4619      	mov	r1, r3
 800c1ae:	4816      	ldr	r0, [pc, #88]	; (800c208 <MX_GPIO_Init+0x260>)
 800c1b0:	f7f4 fcf4 	bl	8000b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 800c1b4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800c1b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c1ba:	2301      	movs	r3, #1
 800c1bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c1be:	2300      	movs	r3, #0
 800c1c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800c1c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c1ca:	4619      	mov	r1, r3
 800c1cc:	480f      	ldr	r0, [pc, #60]	; (800c20c <MX_GPIO_Init+0x264>)
 800c1ce:	f7f4 fce5 	bl	8000b9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	2105      	movs	r1, #5
 800c1d6:	2009      	movs	r0, #9
 800c1d8:	f7f4 faae 	bl	8000738 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800c1dc:	2009      	movs	r0, #9
 800c1de:	f7f4 fac7 	bl	8000770 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	2105      	movs	r1, #5
 800c1e6:	2017      	movs	r0, #23
 800c1e8:	f7f4 faa6 	bl	8000738 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800c1ec:	2017      	movs	r0, #23
 800c1ee:	f7f4 fabf 	bl	8000770 <HAL_NVIC_EnableIRQ>

}
 800c1f2:	bf00      	nop
 800c1f4:	3738      	adds	r7, #56	; 0x38
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}
 800c1fa:	bf00      	nop
 800c1fc:	40023800 	.word	0x40023800
 800c200:	40020800 	.word	0x40020800
 800c204:	40020000 	.word	0x40020000
 800c208:	40020c00 	.word	0x40020c00
 800c20c:	40021800 	.word	0x40021800
 800c210:	10110000 	.word	0x10110000
 800c214:	40021400 	.word	0x40021400
 800c218:	10120000 	.word	0x10120000
 800c21c:	40020400 	.word	0x40020400

0800c220 <Task1>:

/* USER CODE BEGIN 4 */
void Task1(void* args)
{
 800c220:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800c224:	b088      	sub	sp, #32
 800c226:	af00      	add	r7, sp, #0
 800c228:	6078      	str	r0, [r7, #4]
  while(1)
  {
    /* Suspend the Current Task */
    vTaskSuspend(NULL);
 800c22a:	2000      	movs	r0, #0
 800c22c:	f7fd fe60 	bl	8009ef0 <vTaskSuspend>
    /* Start MorseCode Timing Procedure */
    uint64_t TIM10_Counter_Hold = TIM10_Counter;
 800c230:	4b3b      	ldr	r3, [pc, #236]	; (800c320 <Task1+0x100>)
 800c232:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c236:	e9c7 3402 	strd	r3, r4, [r7, #8]
    uint64_t TIM10_Elapsed;
    uint8_t  TIM10_Flag = 0x00;
 800c23a:	2300      	movs	r3, #0
 800c23c:	75fb      	strb	r3, [r7, #23]
    while(HAL_GPIO_ReadPin(B2_GPIO_Port, B2_Pin) == GPIO_PIN_SET)
 800c23e:	e022      	b.n	800c286 <Task1+0x66>
    {
      TIM10_Elapsed = TIM10_Counter - TIM10_Counter_Hold;
 800c240:	4b37      	ldr	r3, [pc, #220]	; (800c320 <Task1+0x100>)
 800c242:	e9d3 1200 	ldrd	r1, r2, [r3]
 800c246:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800c24a:	1ac9      	subs	r1, r1, r3
 800c24c:	eb62 0204 	sbc.w	r2, r2, r4
 800c250:	468b      	mov	fp, r1
 800c252:	4694      	mov	ip, r2
 800c254:	e9c7 bc06 	strd	fp, ip, [r7, #24]
      if((TIM10_Elapsed >= MorseCode_Time_Elapsed_Dash) && 
 800c258:	4b32      	ldr	r3, [pc, #200]	; (800c324 <Task1+0x104>)
 800c25a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c25e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c262:	42a2      	cmp	r2, r4
 800c264:	bf08      	it	eq
 800c266:	4299      	cmpeq	r1, r3
 800c268:	d30d      	bcc.n	800c286 <Task1+0x66>
        (HAL_GPIO_ReadPin(LD4_GPIO_Port, LD4_Pin) == GPIO_PIN_RESET))
 800c26a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c26e:	482e      	ldr	r0, [pc, #184]	; (800c328 <Task1+0x108>)
 800c270:	f7f4 fe3e 	bl	8000ef0 <HAL_GPIO_ReadPin>
 800c274:	4603      	mov	r3, r0
      if((TIM10_Elapsed >= MorseCode_Time_Elapsed_Dash) && 
 800c276:	2b00      	cmp	r3, #0
 800c278:	d105      	bne.n	800c286 <Task1+0x66>
      {
        /* Turn on LED4 */
        HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 800c27a:	2201      	movs	r2, #1
 800c27c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c280:	4829      	ldr	r0, [pc, #164]	; (800c328 <Task1+0x108>)
 800c282:	f7f4 fe4d 	bl	8000f20 <HAL_GPIO_WritePin>
    while(HAL_GPIO_ReadPin(B2_GPIO_Port, B2_Pin) == GPIO_PIN_SET)
 800c286:	2108      	movs	r1, #8
 800c288:	4828      	ldr	r0, [pc, #160]	; (800c32c <Task1+0x10c>)
 800c28a:	f7f4 fe31 	bl	8000ef0 <HAL_GPIO_ReadPin>
 800c28e:	4603      	mov	r3, r0
 800c290:	2b01      	cmp	r3, #1
 800c292:	d0d5      	beq.n	800c240 <Task1+0x20>
      }
    }
    if(TIM10_Elapsed >= MorseCode_Time_Elapsed_Dash)
 800c294:	4b23      	ldr	r3, [pc, #140]	; (800c324 <Task1+0x104>)
 800c296:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c29a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c29e:	42a2      	cmp	r2, r4
 800c2a0:	bf08      	it	eq
 800c2a2:	4299      	cmpeq	r1, r3
 800c2a4:	d302      	bcc.n	800c2ac <Task1+0x8c>
    {
      TIM10_Flag = 0x01;
 800c2a6:	2301      	movs	r3, #1
 800c2a8:	75fb      	strb	r3, [r7, #23]
 800c2aa:	e005      	b.n	800c2b8 <Task1+0x98>
    }
    else /* if((TIM10_Elapsed > MorseCode_Time_Elapsed_Dot) && (TIM10_Elapsed < MorseCode_Time_Elapsed_Dash)) */
    {
      /* Turn on LED4 */
      HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 800c2ac:	2201      	movs	r2, #1
 800c2ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c2b2:	481d      	ldr	r0, [pc, #116]	; (800c328 <Task1+0x108>)
 800c2b4:	f7f4 fe34 	bl	8000f20 <HAL_GPIO_WritePin>
    }
    /* Update MorseCode Sequence */
    MorseCode_Sequence = (MorseCode_Sequence << 1) | TIM10_Flag;
 800c2b8:	4b1d      	ldr	r3, [pc, #116]	; (800c330 <Task1+0x110>)
 800c2ba:	781b      	ldrb	r3, [r3, #0]
 800c2bc:	005b      	lsls	r3, r3, #1
 800c2be:	b25a      	sxtb	r2, r3
 800c2c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c2c4:	4313      	orrs	r3, r2
 800c2c6:	b25b      	sxtb	r3, r3
 800c2c8:	b2da      	uxtb	r2, r3
 800c2ca:	4b19      	ldr	r3, [pc, #100]	; (800c330 <Task1+0x110>)
 800c2cc:	701a      	strb	r2, [r3, #0]
    MorseCode_Sequence_Count = (MorseCode_Sequence_Count >= MorseCode_Sequence_Max_Count) ? MorseCode_Sequence_Count : (MorseCode_Sequence_Count + 1);
 800c2ce:	4b19      	ldr	r3, [pc, #100]	; (800c334 <Task1+0x114>)
 800c2d0:	781b      	ldrb	r3, [r3, #0]
 800c2d2:	2b04      	cmp	r3, #4
 800c2d4:	d804      	bhi.n	800c2e0 <Task1+0xc0>
 800c2d6:	4b17      	ldr	r3, [pc, #92]	; (800c334 <Task1+0x114>)
 800c2d8:	781b      	ldrb	r3, [r3, #0]
 800c2da:	3301      	adds	r3, #1
 800c2dc:	b2db      	uxtb	r3, r3
 800c2de:	e001      	b.n	800c2e4 <Task1+0xc4>
 800c2e0:	4b14      	ldr	r3, [pc, #80]	; (800c334 <Task1+0x114>)
 800c2e2:	781b      	ldrb	r3, [r3, #0]
 800c2e4:	4a13      	ldr	r2, [pc, #76]	; (800c334 <Task1+0x114>)
 800c2e6:	7013      	strb	r3, [r2, #0]
    vTaskDelay(pdMS_TO_TICKS(MorseCode_Time_Elpased_Unit / 4));
 800c2e8:	4b13      	ldr	r3, [pc, #76]	; (800c338 <Task1+0x118>)
 800c2ea:	e9d3 1200 	ldrd	r1, r2, [r3]
 800c2ee:	f04f 0300 	mov.w	r3, #0
 800c2f2:	f04f 0400 	mov.w	r4, #0
 800c2f6:	088b      	lsrs	r3, r1, #2
 800c2f8:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 800c2fc:	0894      	lsrs	r4, r2, #2
 800c2fe:	461a      	mov	r2, r3
 800c300:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c304:	fb03 f302 	mul.w	r3, r3, r2
 800c308:	4a0c      	ldr	r2, [pc, #48]	; (800c33c <Task1+0x11c>)
 800c30a:	fba2 2303 	umull	r2, r3, r2, r3
 800c30e:	099b      	lsrs	r3, r3, #6
 800c310:	4618      	mov	r0, r3
 800c312:	f7fd fdb9 	bl	8009e88 <vTaskDelay>
    EXTI3_IRQ_Resume = 1;
 800c316:	4b0a      	ldr	r3, [pc, #40]	; (800c340 <Task1+0x120>)
 800c318:	2201      	movs	r2, #1
 800c31a:	701a      	strb	r2, [r3, #0]
  {
 800c31c:	e785      	b.n	800c22a <Task1+0xa>
 800c31e:	bf00      	nop
 800c320:	20008610 	.word	0x20008610
 800c324:	20008788 	.word	0x20008788
 800c328:	40021800 	.word	0x40021800
 800c32c:	40020800 	.word	0x40020800
 800c330:	20008618 	.word	0x20008618
 800c334:	20008619 	.word	0x20008619
 800c338:	200087d8 	.word	0x200087d8
 800c33c:	10624dd3 	.word	0x10624dd3
 800c340:	2000003c 	.word	0x2000003c

0800c344 <Task2>:
  }
}

void Task2(void* args)
{
 800c344:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800c348:	b08a      	sub	sp, #40	; 0x28
 800c34a:	af00      	add	r7, sp, #0
 800c34c:	6078      	str	r0, [r7, #4]
  while(1)
  {
    /* Suspend the Current Task */
    vTaskSuspend(NULL);
 800c34e:	2000      	movs	r0, #0
 800c350:	f7fd fdce 	bl	8009ef0 <vTaskSuspend>
    /* Start MorseCode Timing Procedure */
    uint64_t TIM10_Counter_Hold = TIM10_Counter;
 800c354:	4b34      	ldr	r3, [pc, #208]	; (800c428 <Task2+0xe4>)
 800c356:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c35a:	e9c7 3404 	strd	r3, r4, [r7, #16]
    uint64_t TIM10_Elapsed;
    uint8_t  TIM10_Flag = 0x00;
 800c35e:	2300      	movs	r3, #0
 800c360:	77fb      	strb	r3, [r7, #31]
    while(HAL_GPIO_ReadPin(B3_GPIO_Port, B3_Pin) == GPIO_PIN_SET)
 800c362:	e022      	b.n	800c3aa <Task2+0x66>
    {
      TIM10_Elapsed = TIM10_Counter - TIM10_Counter_Hold;
 800c364:	4b30      	ldr	r3, [pc, #192]	; (800c428 <Task2+0xe4>)
 800c366:	e9d3 1200 	ldrd	r1, r2, [r3]
 800c36a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c36e:	1ac9      	subs	r1, r1, r3
 800c370:	eb62 0204 	sbc.w	r2, r2, r4
 800c374:	468b      	mov	fp, r1
 800c376:	4694      	mov	ip, r2
 800c378:	e9c7 bc08 	strd	fp, ip, [r7, #32]
      if((TIM10_Elapsed >= MorseCode_Time_Elapsed_Dash) && 
 800c37c:	4b2b      	ldr	r3, [pc, #172]	; (800c42c <Task2+0xe8>)
 800c37e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c382:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c386:	42a2      	cmp	r2, r4
 800c388:	bf08      	it	eq
 800c38a:	4299      	cmpeq	r1, r3
 800c38c:	d30d      	bcc.n	800c3aa <Task2+0x66>
        (HAL_GPIO_ReadPin(LD3_GPIO_Port, LD3_Pin) == GPIO_PIN_RESET))
 800c38e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c392:	4827      	ldr	r0, [pc, #156]	; (800c430 <Task2+0xec>)
 800c394:	f7f4 fdac 	bl	8000ef0 <HAL_GPIO_ReadPin>
 800c398:	4603      	mov	r3, r0
      if((TIM10_Elapsed >= MorseCode_Time_Elapsed_Dash) && 
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d105      	bne.n	800c3aa <Task2+0x66>
      {
        /* Turn on LED3 */
        HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800c39e:	2201      	movs	r2, #1
 800c3a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c3a4:	4822      	ldr	r0, [pc, #136]	; (800c430 <Task2+0xec>)
 800c3a6:	f7f4 fdbb 	bl	8000f20 <HAL_GPIO_WritePin>
    while(HAL_GPIO_ReadPin(B3_GPIO_Port, B3_Pin) == GPIO_PIN_SET)
 800c3aa:	2140      	movs	r1, #64	; 0x40
 800c3ac:	4821      	ldr	r0, [pc, #132]	; (800c434 <Task2+0xf0>)
 800c3ae:	f7f4 fd9f 	bl	8000ef0 <HAL_GPIO_ReadPin>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	2b01      	cmp	r3, #1
 800c3b6:	d0d5      	beq.n	800c364 <Task2+0x20>
      }
    }
    if(TIM10_Elapsed >= MorseCode_Time_Elapsed_Dash)
 800c3b8:	4b1c      	ldr	r3, [pc, #112]	; (800c42c <Task2+0xe8>)
 800c3ba:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c3be:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c3c2:	42a2      	cmp	r2, r4
 800c3c4:	bf08      	it	eq
 800c3c6:	4299      	cmpeq	r1, r3
 800c3c8:	d302      	bcc.n	800c3d0 <Task2+0x8c>
    {
      TIM10_Flag = 0x01;
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	77fb      	strb	r3, [r7, #31]
 800c3ce:	e005      	b.n	800c3dc <Task2+0x98>
    }
    else /* if((TIM10_Elapsed > MorseCode_Time_Elapsed_Dot) && (TIM10_Elapsed < MorseCode_Time_Elapsed_Dash)) */
    {
      /* Turn on LED3 */
      HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800c3d0:	2201      	movs	r2, #1
 800c3d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c3d6:	4816      	ldr	r0, [pc, #88]	; (800c430 <Task2+0xec>)
 800c3d8:	f7f4 fda2 	bl	8000f20 <HAL_GPIO_WritePin>
    }
    char Character[2] = {'\0'};
 800c3dc:	2300      	movs	r3, #0
 800c3de:	81bb      	strh	r3, [r7, #12]
    if(TIM10_Flag)
 800c3e0:	7ffb      	ldrb	r3, [r7, #31]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d002      	beq.n	800c3ec <Task2+0xa8>
    {
      /* Add a space to the LCD */
      Character[0] = ' ';
 800c3e6:	2320      	movs	r3, #32
 800c3e8:	733b      	strb	r3, [r7, #12]
 800c3ea:	e00d      	b.n	800c408 <Task2+0xc4>
    }
    else
    {
      /* Convert the MorseCode Sequence to ASCII */
      Character[0] = MorseCode_Lookup[MorseCode_Sequence_Count][MorseCode_Sequence];
 800c3ec:	4b12      	ldr	r3, [pc, #72]	; (800c438 <Task2+0xf4>)
 800c3ee:	781b      	ldrb	r3, [r3, #0]
 800c3f0:	4619      	mov	r1, r3
 800c3f2:	4b12      	ldr	r3, [pc, #72]	; (800c43c <Task2+0xf8>)
 800c3f4:	781b      	ldrb	r3, [r3, #0]
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	4a11      	ldr	r2, [pc, #68]	; (800c440 <Task2+0xfc>)
 800c3fa:	460b      	mov	r3, r1
 800c3fc:	015b      	lsls	r3, r3, #5
 800c3fe:	1a5b      	subs	r3, r3, r1
 800c400:	4413      	add	r3, r2
 800c402:	4403      	add	r3, r0
 800c404:	781b      	ldrb	r3, [r3, #0]
 800c406:	733b      	strb	r3, [r7, #12]
    }
    MorseCode_Sequence = 0x00;
 800c408:	4b0c      	ldr	r3, [pc, #48]	; (800c43c <Task2+0xf8>)
 800c40a:	2200      	movs	r2, #0
 800c40c:	701a      	strb	r2, [r3, #0]
    MorseCode_Sequence_Count = 0x00;
 800c40e:	4b0a      	ldr	r3, [pc, #40]	; (800c438 <Task2+0xf4>)
 800c410:	2200      	movs	r2, #0
 800c412:	701a      	strb	r2, [r3, #0]
    LCD_Send_String(Character, STR_NOSLIDE);
 800c414:	f107 030c 	add.w	r3, r7, #12
 800c418:	2100      	movs	r1, #0
 800c41a:	4618      	mov	r0, r3
 800c41c:	f7ff f90a 	bl	800b634 <LCD_Send_String>
    EXTI6_IRQ_Resume = 1;
 800c420:	4b08      	ldr	r3, [pc, #32]	; (800c444 <Task2+0x100>)
 800c422:	2201      	movs	r2, #1
 800c424:	701a      	strb	r2, [r3, #0]
  {
 800c426:	e792      	b.n	800c34e <Task2+0xa>
 800c428:	20008610 	.word	0x20008610
 800c42c:	20008788 	.word	0x20008788
 800c430:	40021800 	.word	0x40021800
 800c434:	40021400 	.word	0x40021400
 800c438:	20008619 	.word	0x20008619
 800c43c:	20008618 	.word	0x20008618
 800c440:	2000861c 	.word	0x2000861c
 800c444:	2000003d 	.word	0x2000003d

0800c448 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b082      	sub	sp, #8
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 800c450:	f000 fcc4 	bl	800cddc <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800c454:	2001      	movs	r0, #1
 800c456:	f7fc fca6 	bl	8008da6 <osDelay>
 800c45a:	e7fb      	b.n	800c454 <StartDefaultTask+0xc>

0800c45c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c45c:	b590      	push	{r4, r7, lr}
 800c45e:	b083      	sub	sp, #12
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  if (htim->Instance == TIM10) {
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	4a0b      	ldr	r2, [pc, #44]	; (800c498 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800c46a:	4293      	cmp	r3, r2
 800c46c:	d108      	bne.n	800c480 <HAL_TIM_PeriodElapsedCallback+0x24>
    TIM10_Counter++;
 800c46e:	4b0b      	ldr	r3, [pc, #44]	; (800c49c <HAL_TIM_PeriodElapsedCallback+0x40>)
 800c470:	e9d3 1200 	ldrd	r1, r2, [r3]
 800c474:	1c4b      	adds	r3, r1, #1
 800c476:	f142 0400 	adc.w	r4, r2, #0
 800c47a:	4a08      	ldr	r2, [pc, #32]	; (800c49c <HAL_TIM_PeriodElapsedCallback+0x40>)
 800c47c:	e9c2 3400 	strd	r3, r4, [r2]
      HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
    }
    */
  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	4a06      	ldr	r2, [pc, #24]	; (800c4a0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800c486:	4293      	cmp	r3, r2
 800c488:	d101      	bne.n	800c48e <HAL_TIM_PeriodElapsedCallback+0x32>
    HAL_IncTick();
 800c48a:	f7f4 f85b 	bl	8000544 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800c48e:	bf00      	nop
 800c490:	370c      	adds	r7, #12
 800c492:	46bd      	mov	sp, r7
 800c494:	bd90      	pop	{r4, r7, pc}
 800c496:	bf00      	nop
 800c498:	40014400 	.word	0x40014400
 800c49c:	20008610 	.word	0x20008610
 800c4a0:	40001000 	.word	0x40001000

0800c4a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800c4a4:	b480      	push	{r7}
 800c4a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800c4a8:	bf00      	nop
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b0:	4770      	bx	lr
	...

0800c4b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b082      	sub	sp, #8
 800c4b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	607b      	str	r3, [r7, #4]
 800c4be:	4b12      	ldr	r3, [pc, #72]	; (800c508 <HAL_MspInit+0x54>)
 800c4c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4c2:	4a11      	ldr	r2, [pc, #68]	; (800c508 <HAL_MspInit+0x54>)
 800c4c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c4c8:	6453      	str	r3, [r2, #68]	; 0x44
 800c4ca:	4b0f      	ldr	r3, [pc, #60]	; (800c508 <HAL_MspInit+0x54>)
 800c4cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c4d2:	607b      	str	r3, [r7, #4]
 800c4d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	603b      	str	r3, [r7, #0]
 800c4da:	4b0b      	ldr	r3, [pc, #44]	; (800c508 <HAL_MspInit+0x54>)
 800c4dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4de:	4a0a      	ldr	r2, [pc, #40]	; (800c508 <HAL_MspInit+0x54>)
 800c4e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c4e4:	6413      	str	r3, [r2, #64]	; 0x40
 800c4e6:	4b08      	ldr	r3, [pc, #32]	; (800c508 <HAL_MspInit+0x54>)
 800c4e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c4ee:	603b      	str	r3, [r7, #0]
 800c4f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	210f      	movs	r1, #15
 800c4f6:	f06f 0001 	mvn.w	r0, #1
 800c4fa:	f7f4 f91d 	bl	8000738 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c4fe:	bf00      	nop
 800c500:	3708      	adds	r7, #8
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}
 800c506:	bf00      	nop
 800c508:	40023800 	.word	0x40023800

0800c50c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800c50c:	b480      	push	{r7}
 800c50e:	b085      	sub	sp, #20
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	4a0b      	ldr	r2, [pc, #44]	; (800c548 <HAL_CRC_MspInit+0x3c>)
 800c51a:	4293      	cmp	r3, r2
 800c51c:	d10d      	bne.n	800c53a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800c51e:	2300      	movs	r3, #0
 800c520:	60fb      	str	r3, [r7, #12]
 800c522:	4b0a      	ldr	r3, [pc, #40]	; (800c54c <HAL_CRC_MspInit+0x40>)
 800c524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c526:	4a09      	ldr	r2, [pc, #36]	; (800c54c <HAL_CRC_MspInit+0x40>)
 800c528:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c52c:	6313      	str	r3, [r2, #48]	; 0x30
 800c52e:	4b07      	ldr	r3, [pc, #28]	; (800c54c <HAL_CRC_MspInit+0x40>)
 800c530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c532:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c536:	60fb      	str	r3, [r7, #12]
 800c538:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800c53a:	bf00      	nop
 800c53c:	3714      	adds	r7, #20
 800c53e:	46bd      	mov	sp, r7
 800c540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c544:	4770      	bx	lr
 800c546:	bf00      	nop
 800c548:	40023000 	.word	0x40023000
 800c54c:	40023800 	.word	0x40023800

0800c550 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b084      	sub	sp, #16
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	4a0e      	ldr	r2, [pc, #56]	; (800c598 <HAL_DMA2D_MspInit+0x48>)
 800c55e:	4293      	cmp	r3, r2
 800c560:	d115      	bne.n	800c58e <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800c562:	2300      	movs	r3, #0
 800c564:	60fb      	str	r3, [r7, #12]
 800c566:	4b0d      	ldr	r3, [pc, #52]	; (800c59c <HAL_DMA2D_MspInit+0x4c>)
 800c568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c56a:	4a0c      	ldr	r2, [pc, #48]	; (800c59c <HAL_DMA2D_MspInit+0x4c>)
 800c56c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c570:	6313      	str	r3, [r2, #48]	; 0x30
 800c572:	4b0a      	ldr	r3, [pc, #40]	; (800c59c <HAL_DMA2D_MspInit+0x4c>)
 800c574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c576:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c57a:	60fb      	str	r3, [r7, #12]
 800c57c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800c57e:	2200      	movs	r2, #0
 800c580:	2105      	movs	r1, #5
 800c582:	205a      	movs	r0, #90	; 0x5a
 800c584:	f7f4 f8d8 	bl	8000738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800c588:	205a      	movs	r0, #90	; 0x5a
 800c58a:	f7f4 f8f1 	bl	8000770 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800c58e:	bf00      	nop
 800c590:	3710      	adds	r7, #16
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}
 800c596:	bf00      	nop
 800c598:	4002b000 	.word	0x4002b000
 800c59c:	40023800 	.word	0x40023800

0800c5a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b08a      	sub	sp, #40	; 0x28
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c5a8:	f107 0314 	add.w	r3, r7, #20
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	601a      	str	r2, [r3, #0]
 800c5b0:	605a      	str	r2, [r3, #4]
 800c5b2:	609a      	str	r2, [r3, #8]
 800c5b4:	60da      	str	r2, [r3, #12]
 800c5b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	4a29      	ldr	r2, [pc, #164]	; (800c664 <HAL_I2C_MspInit+0xc4>)
 800c5be:	4293      	cmp	r3, r2
 800c5c0:	d14b      	bne.n	800c65a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	613b      	str	r3, [r7, #16]
 800c5c6:	4b28      	ldr	r3, [pc, #160]	; (800c668 <HAL_I2C_MspInit+0xc8>)
 800c5c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5ca:	4a27      	ldr	r2, [pc, #156]	; (800c668 <HAL_I2C_MspInit+0xc8>)
 800c5cc:	f043 0304 	orr.w	r3, r3, #4
 800c5d0:	6313      	str	r3, [r2, #48]	; 0x30
 800c5d2:	4b25      	ldr	r3, [pc, #148]	; (800c668 <HAL_I2C_MspInit+0xc8>)
 800c5d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5d6:	f003 0304 	and.w	r3, r3, #4
 800c5da:	613b      	str	r3, [r7, #16]
 800c5dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c5de:	2300      	movs	r3, #0
 800c5e0:	60fb      	str	r3, [r7, #12]
 800c5e2:	4b21      	ldr	r3, [pc, #132]	; (800c668 <HAL_I2C_MspInit+0xc8>)
 800c5e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5e6:	4a20      	ldr	r2, [pc, #128]	; (800c668 <HAL_I2C_MspInit+0xc8>)
 800c5e8:	f043 0301 	orr.w	r3, r3, #1
 800c5ec:	6313      	str	r3, [r2, #48]	; 0x30
 800c5ee:	4b1e      	ldr	r3, [pc, #120]	; (800c668 <HAL_I2C_MspInit+0xc8>)
 800c5f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5f2:	f003 0301 	and.w	r3, r3, #1
 800c5f6:	60fb      	str	r3, [r7, #12]
 800c5f8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800c5fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c5fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c600:	2312      	movs	r3, #18
 800c602:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c604:	2301      	movs	r3, #1
 800c606:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c608:	2300      	movs	r3, #0
 800c60a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800c60c:	2304      	movs	r3, #4
 800c60e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800c610:	f107 0314 	add.w	r3, r7, #20
 800c614:	4619      	mov	r1, r3
 800c616:	4815      	ldr	r0, [pc, #84]	; (800c66c <HAL_I2C_MspInit+0xcc>)
 800c618:	f7f4 fac0 	bl	8000b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 800c61c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c620:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c622:	2312      	movs	r3, #18
 800c624:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c626:	2301      	movs	r3, #1
 800c628:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c62a:	2300      	movs	r3, #0
 800c62c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800c62e:	2304      	movs	r3, #4
 800c630:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800c632:	f107 0314 	add.w	r3, r7, #20
 800c636:	4619      	mov	r1, r3
 800c638:	480d      	ldr	r0, [pc, #52]	; (800c670 <HAL_I2C_MspInit+0xd0>)
 800c63a:	f7f4 faaf 	bl	8000b9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800c63e:	2300      	movs	r3, #0
 800c640:	60bb      	str	r3, [r7, #8]
 800c642:	4b09      	ldr	r3, [pc, #36]	; (800c668 <HAL_I2C_MspInit+0xc8>)
 800c644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c646:	4a08      	ldr	r2, [pc, #32]	; (800c668 <HAL_I2C_MspInit+0xc8>)
 800c648:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c64c:	6413      	str	r3, [r2, #64]	; 0x40
 800c64e:	4b06      	ldr	r3, [pc, #24]	; (800c668 <HAL_I2C_MspInit+0xc8>)
 800c650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c652:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c656:	60bb      	str	r3, [r7, #8]
 800c658:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800c65a:	bf00      	nop
 800c65c:	3728      	adds	r7, #40	; 0x28
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd80      	pop	{r7, pc}
 800c662:	bf00      	nop
 800c664:	40005c00 	.word	0x40005c00
 800c668:	40023800 	.word	0x40023800
 800c66c:	40020800 	.word	0x40020800
 800c670:	40020000 	.word	0x40020000

0800c674 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b08e      	sub	sp, #56	; 0x38
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c67c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c680:	2200      	movs	r2, #0
 800c682:	601a      	str	r2, [r3, #0]
 800c684:	605a      	str	r2, [r3, #4]
 800c686:	609a      	str	r2, [r3, #8]
 800c688:	60da      	str	r2, [r3, #12]
 800c68a:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	4a7b      	ldr	r2, [pc, #492]	; (800c880 <HAL_LTDC_MspInit+0x20c>)
 800c692:	4293      	cmp	r3, r2
 800c694:	f040 80f0 	bne.w	800c878 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800c698:	2300      	movs	r3, #0
 800c69a:	623b      	str	r3, [r7, #32]
 800c69c:	4b79      	ldr	r3, [pc, #484]	; (800c884 <HAL_LTDC_MspInit+0x210>)
 800c69e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6a0:	4a78      	ldr	r2, [pc, #480]	; (800c884 <HAL_LTDC_MspInit+0x210>)
 800c6a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c6a6:	6453      	str	r3, [r2, #68]	; 0x44
 800c6a8:	4b76      	ldr	r3, [pc, #472]	; (800c884 <HAL_LTDC_MspInit+0x210>)
 800c6aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c6b0:	623b      	str	r3, [r7, #32]
 800c6b2:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	61fb      	str	r3, [r7, #28]
 800c6b8:	4b72      	ldr	r3, [pc, #456]	; (800c884 <HAL_LTDC_MspInit+0x210>)
 800c6ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6bc:	4a71      	ldr	r2, [pc, #452]	; (800c884 <HAL_LTDC_MspInit+0x210>)
 800c6be:	f043 0320 	orr.w	r3, r3, #32
 800c6c2:	6313      	str	r3, [r2, #48]	; 0x30
 800c6c4:	4b6f      	ldr	r3, [pc, #444]	; (800c884 <HAL_LTDC_MspInit+0x210>)
 800c6c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6c8:	f003 0320 	and.w	r3, r3, #32
 800c6cc:	61fb      	str	r3, [r7, #28]
 800c6ce:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	61bb      	str	r3, [r7, #24]
 800c6d4:	4b6b      	ldr	r3, [pc, #428]	; (800c884 <HAL_LTDC_MspInit+0x210>)
 800c6d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6d8:	4a6a      	ldr	r2, [pc, #424]	; (800c884 <HAL_LTDC_MspInit+0x210>)
 800c6da:	f043 0301 	orr.w	r3, r3, #1
 800c6de:	6313      	str	r3, [r2, #48]	; 0x30
 800c6e0:	4b68      	ldr	r3, [pc, #416]	; (800c884 <HAL_LTDC_MspInit+0x210>)
 800c6e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6e4:	f003 0301 	and.w	r3, r3, #1
 800c6e8:	61bb      	str	r3, [r7, #24]
 800c6ea:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	617b      	str	r3, [r7, #20]
 800c6f0:	4b64      	ldr	r3, [pc, #400]	; (800c884 <HAL_LTDC_MspInit+0x210>)
 800c6f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6f4:	4a63      	ldr	r2, [pc, #396]	; (800c884 <HAL_LTDC_MspInit+0x210>)
 800c6f6:	f043 0302 	orr.w	r3, r3, #2
 800c6fa:	6313      	str	r3, [r2, #48]	; 0x30
 800c6fc:	4b61      	ldr	r3, [pc, #388]	; (800c884 <HAL_LTDC_MspInit+0x210>)
 800c6fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c700:	f003 0302 	and.w	r3, r3, #2
 800c704:	617b      	str	r3, [r7, #20]
 800c706:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800c708:	2300      	movs	r3, #0
 800c70a:	613b      	str	r3, [r7, #16]
 800c70c:	4b5d      	ldr	r3, [pc, #372]	; (800c884 <HAL_LTDC_MspInit+0x210>)
 800c70e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c710:	4a5c      	ldr	r2, [pc, #368]	; (800c884 <HAL_LTDC_MspInit+0x210>)
 800c712:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c716:	6313      	str	r3, [r2, #48]	; 0x30
 800c718:	4b5a      	ldr	r3, [pc, #360]	; (800c884 <HAL_LTDC_MspInit+0x210>)
 800c71a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c71c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c720:	613b      	str	r3, [r7, #16]
 800c722:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c724:	2300      	movs	r3, #0
 800c726:	60fb      	str	r3, [r7, #12]
 800c728:	4b56      	ldr	r3, [pc, #344]	; (800c884 <HAL_LTDC_MspInit+0x210>)
 800c72a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c72c:	4a55      	ldr	r2, [pc, #340]	; (800c884 <HAL_LTDC_MspInit+0x210>)
 800c72e:	f043 0304 	orr.w	r3, r3, #4
 800c732:	6313      	str	r3, [r2, #48]	; 0x30
 800c734:	4b53      	ldr	r3, [pc, #332]	; (800c884 <HAL_LTDC_MspInit+0x210>)
 800c736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c738:	f003 0304 	and.w	r3, r3, #4
 800c73c:	60fb      	str	r3, [r7, #12]
 800c73e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800c740:	2300      	movs	r3, #0
 800c742:	60bb      	str	r3, [r7, #8]
 800c744:	4b4f      	ldr	r3, [pc, #316]	; (800c884 <HAL_LTDC_MspInit+0x210>)
 800c746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c748:	4a4e      	ldr	r2, [pc, #312]	; (800c884 <HAL_LTDC_MspInit+0x210>)
 800c74a:	f043 0308 	orr.w	r3, r3, #8
 800c74e:	6313      	str	r3, [r2, #48]	; 0x30
 800c750:	4b4c      	ldr	r3, [pc, #304]	; (800c884 <HAL_LTDC_MspInit+0x210>)
 800c752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c754:	f003 0308 	and.w	r3, r3, #8
 800c758:	60bb      	str	r3, [r7, #8]
 800c75a:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800c75c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c760:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c762:	2302      	movs	r3, #2
 800c764:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c766:	2300      	movs	r3, #0
 800c768:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c76a:	2300      	movs	r3, #0
 800c76c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800c76e:	230e      	movs	r3, #14
 800c770:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800c772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c776:	4619      	mov	r1, r3
 800c778:	4843      	ldr	r0, [pc, #268]	; (800c888 <HAL_LTDC_MspInit+0x214>)
 800c77a:	f7f4 fa0f 	bl	8000b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin 
 800c77e:	f641 0358 	movw	r3, #6232	; 0x1858
 800c782:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c784:	2302      	movs	r3, #2
 800c786:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c788:	2300      	movs	r3, #0
 800c78a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c78c:	2300      	movs	r3, #0
 800c78e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800c790:	230e      	movs	r3, #14
 800c792:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c794:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c798:	4619      	mov	r1, r3
 800c79a:	483c      	ldr	r0, [pc, #240]	; (800c88c <HAL_LTDC_MspInit+0x218>)
 800c79c:	f7f4 f9fe 	bl	8000b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800c7a0:	2303      	movs	r3, #3
 800c7a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c7a4:	2302      	movs	r3, #2
 800c7a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800c7b0:	2309      	movs	r3, #9
 800c7b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c7b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7b8:	4619      	mov	r1, r3
 800c7ba:	4835      	ldr	r0, [pc, #212]	; (800c890 <HAL_LTDC_MspInit+0x21c>)
 800c7bc:	f7f4 f9ee 	bl	8000b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800c7c0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800c7c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c7c6:	2302      	movs	r3, #2
 800c7c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800c7d2:	230e      	movs	r3, #14
 800c7d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c7d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7da:	4619      	mov	r1, r3
 800c7dc:	482c      	ldr	r0, [pc, #176]	; (800c890 <HAL_LTDC_MspInit+0x21c>)
 800c7de:	f7f4 f9dd 	bl	8000b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3G11_Pin;
 800c7e2:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800c7e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c7e8:	2302      	movs	r3, #2
 800c7ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800c7f4:	230e      	movs	r3, #14
 800c7f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800c7f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7fc:	4619      	mov	r1, r3
 800c7fe:	4825      	ldr	r0, [pc, #148]	; (800c894 <HAL_LTDC_MspInit+0x220>)
 800c800:	f7f4 f9cc 	bl	8000b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800c804:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800c808:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c80a:	2302      	movs	r3, #2
 800c80c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c80e:	2300      	movs	r3, #0
 800c810:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c812:	2300      	movs	r3, #0
 800c814:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800c816:	230e      	movs	r3, #14
 800c818:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c81a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c81e:	4619      	mov	r1, r3
 800c820:	481d      	ldr	r0, [pc, #116]	; (800c898 <HAL_LTDC_MspInit+0x224>)
 800c822:	f7f4 f9bb 	bl	8000b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2D6_Pin;
 800c826:	2348      	movs	r3, #72	; 0x48
 800c828:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c82a:	2302      	movs	r3, #2
 800c82c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c82e:	2300      	movs	r3, #0
 800c830:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c832:	2300      	movs	r3, #0
 800c834:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800c836:	230e      	movs	r3, #14
 800c838:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c83a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c83e:	4619      	mov	r1, r3
 800c840:	4816      	ldr	r0, [pc, #88]	; (800c89c <HAL_LTDC_MspInit+0x228>)
 800c842:	f7f4 f9ab 	bl	8000b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800c846:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800c84a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c84c:	2302      	movs	r3, #2
 800c84e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c850:	2300      	movs	r3, #0
 800c852:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c854:	2300      	movs	r3, #0
 800c856:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800c858:	2309      	movs	r3, #9
 800c85a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800c85c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c860:	4619      	mov	r1, r3
 800c862:	480c      	ldr	r0, [pc, #48]	; (800c894 <HAL_LTDC_MspInit+0x220>)
 800c864:	f7f4 f99a 	bl	8000b9c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800c868:	2200      	movs	r2, #0
 800c86a:	2105      	movs	r1, #5
 800c86c:	2058      	movs	r0, #88	; 0x58
 800c86e:	f7f3 ff63 	bl	8000738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800c872:	2058      	movs	r0, #88	; 0x58
 800c874:	f7f3 ff7c 	bl	8000770 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800c878:	bf00      	nop
 800c87a:	3738      	adds	r7, #56	; 0x38
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd80      	pop	{r7, pc}
 800c880:	40016800 	.word	0x40016800
 800c884:	40023800 	.word	0x40023800
 800c888:	40021400 	.word	0x40021400
 800c88c:	40020000 	.word	0x40020000
 800c890:	40020400 	.word	0x40020400
 800c894:	40021800 	.word	0x40021800
 800c898:	40020800 	.word	0x40020800
 800c89c:	40020c00 	.word	0x40020c00

0800c8a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b08a      	sub	sp, #40	; 0x28
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c8a8:	f107 0314 	add.w	r3, r7, #20
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	601a      	str	r2, [r3, #0]
 800c8b0:	605a      	str	r2, [r3, #4]
 800c8b2:	609a      	str	r2, [r3, #8]
 800c8b4:	60da      	str	r2, [r3, #12]
 800c8b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	4a19      	ldr	r2, [pc, #100]	; (800c924 <HAL_SPI_MspInit+0x84>)
 800c8be:	4293      	cmp	r3, r2
 800c8c0:	d12c      	bne.n	800c91c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	613b      	str	r3, [r7, #16]
 800c8c6:	4b18      	ldr	r3, [pc, #96]	; (800c928 <HAL_SPI_MspInit+0x88>)
 800c8c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8ca:	4a17      	ldr	r2, [pc, #92]	; (800c928 <HAL_SPI_MspInit+0x88>)
 800c8cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c8d0:	6453      	str	r3, [r2, #68]	; 0x44
 800c8d2:	4b15      	ldr	r3, [pc, #84]	; (800c928 <HAL_SPI_MspInit+0x88>)
 800c8d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c8da:	613b      	str	r3, [r7, #16]
 800c8dc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800c8de:	2300      	movs	r3, #0
 800c8e0:	60fb      	str	r3, [r7, #12]
 800c8e2:	4b11      	ldr	r3, [pc, #68]	; (800c928 <HAL_SPI_MspInit+0x88>)
 800c8e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8e6:	4a10      	ldr	r2, [pc, #64]	; (800c928 <HAL_SPI_MspInit+0x88>)
 800c8e8:	f043 0320 	orr.w	r3, r3, #32
 800c8ec:	6313      	str	r3, [r2, #48]	; 0x30
 800c8ee:	4b0e      	ldr	r3, [pc, #56]	; (800c928 <HAL_SPI_MspInit+0x88>)
 800c8f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8f2:	f003 0320 	and.w	r3, r3, #32
 800c8f6:	60fb      	str	r3, [r7, #12]
 800c8f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800c8fa:	f44f 7360 	mov.w	r3, #896	; 0x380
 800c8fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c900:	2302      	movs	r3, #2
 800c902:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c904:	2300      	movs	r3, #0
 800c906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c908:	2300      	movs	r3, #0
 800c90a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800c90c:	2305      	movs	r3, #5
 800c90e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800c910:	f107 0314 	add.w	r3, r7, #20
 800c914:	4619      	mov	r1, r3
 800c916:	4805      	ldr	r0, [pc, #20]	; (800c92c <HAL_SPI_MspInit+0x8c>)
 800c918:	f7f4 f940 	bl	8000b9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800c91c:	bf00      	nop
 800c91e:	3728      	adds	r7, #40	; 0x28
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}
 800c924:	40015000 	.word	0x40015000
 800c928:	40023800 	.word	0x40023800
 800c92c:	40021400 	.word	0x40021400

0800c930 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b084      	sub	sp, #16
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	4a1c      	ldr	r2, [pc, #112]	; (800c9b0 <HAL_TIM_Base_MspInit+0x80>)
 800c93e:	4293      	cmp	r3, r2
 800c940:	d116      	bne.n	800c970 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800c942:	2300      	movs	r3, #0
 800c944:	60fb      	str	r3, [r7, #12]
 800c946:	4b1b      	ldr	r3, [pc, #108]	; (800c9b4 <HAL_TIM_Base_MspInit+0x84>)
 800c948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c94a:	4a1a      	ldr	r2, [pc, #104]	; (800c9b4 <HAL_TIM_Base_MspInit+0x84>)
 800c94c:	f043 0301 	orr.w	r3, r3, #1
 800c950:	6453      	str	r3, [r2, #68]	; 0x44
 800c952:	4b18      	ldr	r3, [pc, #96]	; (800c9b4 <HAL_TIM_Base_MspInit+0x84>)
 800c954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c956:	f003 0301 	and.w	r3, r3, #1
 800c95a:	60fb      	str	r3, [r7, #12]
 800c95c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800c95e:	2200      	movs	r2, #0
 800c960:	2105      	movs	r1, #5
 800c962:	2019      	movs	r0, #25
 800c964:	f7f3 fee8 	bl	8000738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800c968:	2019      	movs	r0, #25
 800c96a:	f7f3 ff01 	bl	8000770 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800c96e:	e01a      	b.n	800c9a6 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM10)
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	4a10      	ldr	r2, [pc, #64]	; (800c9b8 <HAL_TIM_Base_MspInit+0x88>)
 800c976:	4293      	cmp	r3, r2
 800c978:	d115      	bne.n	800c9a6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800c97a:	2300      	movs	r3, #0
 800c97c:	60bb      	str	r3, [r7, #8]
 800c97e:	4b0d      	ldr	r3, [pc, #52]	; (800c9b4 <HAL_TIM_Base_MspInit+0x84>)
 800c980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c982:	4a0c      	ldr	r2, [pc, #48]	; (800c9b4 <HAL_TIM_Base_MspInit+0x84>)
 800c984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c988:	6453      	str	r3, [r2, #68]	; 0x44
 800c98a:	4b0a      	ldr	r3, [pc, #40]	; (800c9b4 <HAL_TIM_Base_MspInit+0x84>)
 800c98c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c98e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c992:	60bb      	str	r3, [r7, #8]
 800c994:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800c996:	2200      	movs	r2, #0
 800c998:	2105      	movs	r1, #5
 800c99a:	2019      	movs	r0, #25
 800c99c:	f7f3 fecc 	bl	8000738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800c9a0:	2019      	movs	r0, #25
 800c9a2:	f7f3 fee5 	bl	8000770 <HAL_NVIC_EnableIRQ>
}
 800c9a6:	bf00      	nop
 800c9a8:	3710      	adds	r7, #16
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bd80      	pop	{r7, pc}
 800c9ae:	bf00      	nop
 800c9b0:	40010000 	.word	0x40010000
 800c9b4:	40023800 	.word	0x40023800
 800c9b8:	40014400 	.word	0x40014400

0800c9bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b08a      	sub	sp, #40	; 0x28
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c9c4:	f107 0314 	add.w	r3, r7, #20
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	601a      	str	r2, [r3, #0]
 800c9cc:	605a      	str	r2, [r3, #4]
 800c9ce:	609a      	str	r2, [r3, #8]
 800c9d0:	60da      	str	r2, [r3, #12]
 800c9d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	4a19      	ldr	r2, [pc, #100]	; (800ca40 <HAL_UART_MspInit+0x84>)
 800c9da:	4293      	cmp	r3, r2
 800c9dc:	d12c      	bne.n	800ca38 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800c9de:	2300      	movs	r3, #0
 800c9e0:	613b      	str	r3, [r7, #16]
 800c9e2:	4b18      	ldr	r3, [pc, #96]	; (800ca44 <HAL_UART_MspInit+0x88>)
 800c9e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9e6:	4a17      	ldr	r2, [pc, #92]	; (800ca44 <HAL_UART_MspInit+0x88>)
 800c9e8:	f043 0310 	orr.w	r3, r3, #16
 800c9ec:	6453      	str	r3, [r2, #68]	; 0x44
 800c9ee:	4b15      	ldr	r3, [pc, #84]	; (800ca44 <HAL_UART_MspInit+0x88>)
 800c9f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9f2:	f003 0310 	and.w	r3, r3, #16
 800c9f6:	613b      	str	r3, [r7, #16]
 800c9f8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	60fb      	str	r3, [r7, #12]
 800c9fe:	4b11      	ldr	r3, [pc, #68]	; (800ca44 <HAL_UART_MspInit+0x88>)
 800ca00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca02:	4a10      	ldr	r2, [pc, #64]	; (800ca44 <HAL_UART_MspInit+0x88>)
 800ca04:	f043 0301 	orr.w	r3, r3, #1
 800ca08:	6313      	str	r3, [r2, #48]	; 0x30
 800ca0a:	4b0e      	ldr	r3, [pc, #56]	; (800ca44 <HAL_UART_MspInit+0x88>)
 800ca0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca0e:	f003 0301 	and.w	r3, r3, #1
 800ca12:	60fb      	str	r3, [r7, #12]
 800ca14:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800ca16:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800ca1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ca1c:	2302      	movs	r3, #2
 800ca1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca20:	2300      	movs	r3, #0
 800ca22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ca24:	2303      	movs	r3, #3
 800ca26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800ca28:	2307      	movs	r3, #7
 800ca2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ca2c:	f107 0314 	add.w	r3, r7, #20
 800ca30:	4619      	mov	r1, r3
 800ca32:	4805      	ldr	r0, [pc, #20]	; (800ca48 <HAL_UART_MspInit+0x8c>)
 800ca34:	f7f4 f8b2 	bl	8000b9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800ca38:	bf00      	nop
 800ca3a:	3728      	adds	r7, #40	; 0x28
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	bd80      	pop	{r7, pc}
 800ca40:	40011000 	.word	0x40011000
 800ca44:	40023800 	.word	0x40023800
 800ca48:	40020000 	.word	0x40020000

0800ca4c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b086      	sub	sp, #24
 800ca50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800ca52:	1d3b      	adds	r3, r7, #4
 800ca54:	2200      	movs	r2, #0
 800ca56:	601a      	str	r2, [r3, #0]
 800ca58:	605a      	str	r2, [r3, #4]
 800ca5a:	609a      	str	r2, [r3, #8]
 800ca5c:	60da      	str	r2, [r3, #12]
 800ca5e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800ca60:	4b3b      	ldr	r3, [pc, #236]	; (800cb50 <HAL_FMC_MspInit+0x104>)
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d16f      	bne.n	800cb48 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 800ca68:	4b39      	ldr	r3, [pc, #228]	; (800cb50 <HAL_FMC_MspInit+0x104>)
 800ca6a:	2201      	movs	r2, #1
 800ca6c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800ca6e:	2300      	movs	r3, #0
 800ca70:	603b      	str	r3, [r7, #0]
 800ca72:	4b38      	ldr	r3, [pc, #224]	; (800cb54 <HAL_FMC_MspInit+0x108>)
 800ca74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca76:	4a37      	ldr	r2, [pc, #220]	; (800cb54 <HAL_FMC_MspInit+0x108>)
 800ca78:	f043 0301 	orr.w	r3, r3, #1
 800ca7c:	6393      	str	r3, [r2, #56]	; 0x38
 800ca7e:	4b35      	ldr	r3, [pc, #212]	; (800cb54 <HAL_FMC_MspInit+0x108>)
 800ca80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca82:	f003 0301 	and.w	r3, r3, #1
 800ca86:	603b      	str	r3, [r7, #0]
 800ca88:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 800ca8a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800ca8e:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin 
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ca90:	2302      	movs	r3, #2
 800ca92:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca94:	2300      	movs	r3, #0
 800ca96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ca98:	2303      	movs	r3, #3
 800ca9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800ca9c:	230c      	movs	r3, #12
 800ca9e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800caa0:	1d3b      	adds	r3, r7, #4
 800caa2:	4619      	mov	r1, r3
 800caa4:	482c      	ldr	r0, [pc, #176]	; (800cb58 <HAL_FMC_MspInit+0x10c>)
 800caa6:	f7f4 f879 	bl	8000b9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 800caaa:	2301      	movs	r3, #1
 800caac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800caae:	2302      	movs	r3, #2
 800cab0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cab2:	2300      	movs	r3, #0
 800cab4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cab6:	2303      	movs	r3, #3
 800cab8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800caba:	230c      	movs	r3, #12
 800cabc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800cabe:	1d3b      	adds	r3, r7, #4
 800cac0:	4619      	mov	r1, r3
 800cac2:	4826      	ldr	r0, [pc, #152]	; (800cb5c <HAL_FMC_MspInit+0x110>)
 800cac4:	f7f4 f86a 	bl	8000b9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin 
 800cac8:	f248 1333 	movw	r3, #33075	; 0x8133
 800cacc:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cace:	2302      	movs	r3, #2
 800cad0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cad2:	2300      	movs	r3, #0
 800cad4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cad6:	2303      	movs	r3, #3
 800cad8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800cada:	230c      	movs	r3, #12
 800cadc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800cade:	1d3b      	adds	r3, r7, #4
 800cae0:	4619      	mov	r1, r3
 800cae2:	481f      	ldr	r0, [pc, #124]	; (800cb60 <HAL_FMC_MspInit+0x114>)
 800cae4:	f7f4 f85a 	bl	8000b9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 800cae8:	f64f 7383 	movw	r3, #65411	; 0xff83
 800caec:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin 
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800caee:	2302      	movs	r3, #2
 800caf0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800caf2:	2300      	movs	r3, #0
 800caf4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800caf6:	2303      	movs	r3, #3
 800caf8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800cafa:	230c      	movs	r3, #12
 800cafc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800cafe:	1d3b      	adds	r3, r7, #4
 800cb00:	4619      	mov	r1, r3
 800cb02:	4818      	ldr	r0, [pc, #96]	; (800cb64 <HAL_FMC_MspInit+0x118>)
 800cb04:	f7f4 f84a 	bl	8000b9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin 
 800cb08:	f24c 7303 	movw	r3, #50947	; 0xc703
 800cb0c:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb0e:	2302      	movs	r3, #2
 800cb10:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb12:	2300      	movs	r3, #0
 800cb14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cb16:	2303      	movs	r3, #3
 800cb18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800cb1a:	230c      	movs	r3, #12
 800cb1c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800cb1e:	1d3b      	adds	r3, r7, #4
 800cb20:	4619      	mov	r1, r3
 800cb22:	4811      	ldr	r0, [pc, #68]	; (800cb68 <HAL_FMC_MspInit+0x11c>)
 800cb24:	f7f4 f83a 	bl	8000b9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800cb28:	2360      	movs	r3, #96	; 0x60
 800cb2a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb2c:	2302      	movs	r3, #2
 800cb2e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb30:	2300      	movs	r3, #0
 800cb32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cb34:	2303      	movs	r3, #3
 800cb36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800cb38:	230c      	movs	r3, #12
 800cb3a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cb3c:	1d3b      	adds	r3, r7, #4
 800cb3e:	4619      	mov	r1, r3
 800cb40:	480a      	ldr	r0, [pc, #40]	; (800cb6c <HAL_FMC_MspInit+0x120>)
 800cb42:	f7f4 f82b 	bl	8000b9c <HAL_GPIO_Init>
 800cb46:	e000      	b.n	800cb4a <HAL_FMC_MspInit+0xfe>
    return;
 800cb48:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800cb4a:	3718      	adds	r7, #24
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}
 800cb50:	200086b8 	.word	0x200086b8
 800cb54:	40023800 	.word	0x40023800
 800cb58:	40021400 	.word	0x40021400
 800cb5c:	40020800 	.word	0x40020800
 800cb60:	40021800 	.word	0x40021800
 800cb64:	40021000 	.word	0x40021000
 800cb68:	40020c00 	.word	0x40020c00
 800cb6c:	40020400 	.word	0x40020400

0800cb70 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b082      	sub	sp, #8
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800cb78:	f7ff ff68 	bl	800ca4c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800cb7c:	bf00      	nop
 800cb7e:	3708      	adds	r7, #8
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd80      	pop	{r7, pc}

0800cb84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b08c      	sub	sp, #48	; 0x30
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800cb90:	2300      	movs	r3, #0
 800cb92:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800cb94:	2200      	movs	r2, #0
 800cb96:	6879      	ldr	r1, [r7, #4]
 800cb98:	2036      	movs	r0, #54	; 0x36
 800cb9a:	f7f3 fdcd 	bl	8000738 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800cb9e:	2036      	movs	r0, #54	; 0x36
 800cba0:	f7f3 fde6 	bl	8000770 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800cba4:	2300      	movs	r3, #0
 800cba6:	60fb      	str	r3, [r7, #12]
 800cba8:	4b1f      	ldr	r3, [pc, #124]	; (800cc28 <HAL_InitTick+0xa4>)
 800cbaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbac:	4a1e      	ldr	r2, [pc, #120]	; (800cc28 <HAL_InitTick+0xa4>)
 800cbae:	f043 0310 	orr.w	r3, r3, #16
 800cbb2:	6413      	str	r3, [r2, #64]	; 0x40
 800cbb4:	4b1c      	ldr	r3, [pc, #112]	; (800cc28 <HAL_InitTick+0xa4>)
 800cbb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbb8:	f003 0310 	and.w	r3, r3, #16
 800cbbc:	60fb      	str	r3, [r7, #12]
 800cbbe:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800cbc0:	f107 0210 	add.w	r2, r7, #16
 800cbc4:	f107 0314 	add.w	r3, r7, #20
 800cbc8:	4611      	mov	r1, r2
 800cbca:	4618      	mov	r0, r3
 800cbcc:	f7f7 fc88 	bl	80044e0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800cbd0:	f7f7 fc5e 	bl	8004490 <HAL_RCC_GetPCLK1Freq>
 800cbd4:	4603      	mov	r3, r0
 800cbd6:	005b      	lsls	r3, r3, #1
 800cbd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800cbda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbdc:	4a13      	ldr	r2, [pc, #76]	; (800cc2c <HAL_InitTick+0xa8>)
 800cbde:	fba2 2303 	umull	r2, r3, r2, r3
 800cbe2:	0c9b      	lsrs	r3, r3, #18
 800cbe4:	3b01      	subs	r3, #1
 800cbe6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800cbe8:	4b11      	ldr	r3, [pc, #68]	; (800cc30 <HAL_InitTick+0xac>)
 800cbea:	4a12      	ldr	r2, [pc, #72]	; (800cc34 <HAL_InitTick+0xb0>)
 800cbec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800cbee:	4b10      	ldr	r3, [pc, #64]	; (800cc30 <HAL_InitTick+0xac>)
 800cbf0:	f240 32e7 	movw	r2, #999	; 0x3e7
 800cbf4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800cbf6:	4a0e      	ldr	r2, [pc, #56]	; (800cc30 <HAL_InitTick+0xac>)
 800cbf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbfa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800cbfc:	4b0c      	ldr	r3, [pc, #48]	; (800cc30 <HAL_InitTick+0xac>)
 800cbfe:	2200      	movs	r2, #0
 800cc00:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cc02:	4b0b      	ldr	r3, [pc, #44]	; (800cc30 <HAL_InitTick+0xac>)
 800cc04:	2200      	movs	r2, #0
 800cc06:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800cc08:	4809      	ldr	r0, [pc, #36]	; (800cc30 <HAL_InitTick+0xac>)
 800cc0a:	f7f7 fef1 	bl	80049f0 <HAL_TIM_Base_Init>
 800cc0e:	4603      	mov	r3, r0
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d104      	bne.n	800cc1e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800cc14:	4806      	ldr	r0, [pc, #24]	; (800cc30 <HAL_InitTick+0xac>)
 800cc16:	f7f7 ff16 	bl	8004a46 <HAL_TIM_Base_Start_IT>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	e000      	b.n	800cc20 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800cc1e:	2301      	movs	r3, #1
}
 800cc20:	4618      	mov	r0, r3
 800cc22:	3730      	adds	r7, #48	; 0x30
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}
 800cc28:	40023800 	.word	0x40023800
 800cc2c:	431bde83 	.word	0x431bde83
 800cc30:	20008988 	.word	0x20008988
 800cc34:	40001000 	.word	0x40001000

0800cc38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800cc38:	b480      	push	{r7}
 800cc3a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800cc3c:	bf00      	nop
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc44:	4770      	bx	lr

0800cc46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800cc46:	b480      	push	{r7}
 800cc48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800cc4a:	e7fe      	b.n	800cc4a <HardFault_Handler+0x4>

0800cc4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800cc4c:	b480      	push	{r7}
 800cc4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800cc50:	e7fe      	b.n	800cc50 <MemManage_Handler+0x4>

0800cc52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800cc52:	b480      	push	{r7}
 800cc54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800cc56:	e7fe      	b.n	800cc56 <BusFault_Handler+0x4>

0800cc58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800cc58:	b480      	push	{r7}
 800cc5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800cc5c:	e7fe      	b.n	800cc5c <UsageFault_Handler+0x4>

0800cc5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800cc5e:	b480      	push	{r7}
 800cc60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800cc62:	bf00      	nop
 800cc64:	46bd      	mov	sp, r7
 800cc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6a:	4770      	bx	lr

0800cc6c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800cc70:	2008      	movs	r0, #8
 800cc72:	f7f4 f96f 	bl	8000f54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  /* DeBouncing Procedure */
  if(EXTI3_IRQ_Resume)
 800cc76:	4b0a      	ldr	r3, [pc, #40]	; (800cca0 <EXTI3_IRQHandler+0x34>)
 800cc78:	781b      	ldrb	r3, [r3, #0]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d00d      	beq.n	800cc9a <EXTI3_IRQHandler+0x2e>
  {
    /* Turn off LED4 */
    HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800cc7e:	2200      	movs	r2, #0
 800cc80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800cc84:	4807      	ldr	r0, [pc, #28]	; (800cca4 <EXTI3_IRQHandler+0x38>)
 800cc86:	f7f4 f94b 	bl	8000f20 <HAL_GPIO_WritePin>
    xTaskResumeFromISR(TaskHandle_1);
 800cc8a:	4b07      	ldr	r3, [pc, #28]	; (800cca8 <EXTI3_IRQHandler+0x3c>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f7fd f9f0 	bl	800a074 <xTaskResumeFromISR>
    EXTI3_IRQ_Resume = 0;
 800cc94:	4b02      	ldr	r3, [pc, #8]	; (800cca0 <EXTI3_IRQHandler+0x34>)
 800cc96:	2200      	movs	r2, #0
 800cc98:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END EXTI3_IRQn 1 */
}
 800cc9a:	bf00      	nop
 800cc9c:	bd80      	pop	{r7, pc}
 800cc9e:	bf00      	nop
 800cca0:	2000003c 	.word	0x2000003c
 800cca4:	40021800 	.word	0x40021800
 800cca8:	20008950 	.word	0x20008950

0800ccac <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800ccb0:	2040      	movs	r0, #64	; 0x40
 800ccb2:	f7f4 f94f 	bl	8000f54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  if(EXTI6_IRQ_Resume)
 800ccb6:	4b0a      	ldr	r3, [pc, #40]	; (800cce0 <EXTI9_5_IRQHandler+0x34>)
 800ccb8:	781b      	ldrb	r3, [r3, #0]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d00d      	beq.n	800ccda <EXTI9_5_IRQHandler+0x2e>
  {
    /* Turn off LED3 */
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ccc4:	4807      	ldr	r0, [pc, #28]	; (800cce4 <EXTI9_5_IRQHandler+0x38>)
 800ccc6:	f7f4 f92b 	bl	8000f20 <HAL_GPIO_WritePin>
    xTaskResumeFromISR(TaskHandle_2);
 800ccca:	4b07      	ldr	r3, [pc, #28]	; (800cce8 <EXTI9_5_IRQHandler+0x3c>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	4618      	mov	r0, r3
 800ccd0:	f7fd f9d0 	bl	800a074 <xTaskResumeFromISR>
    EXTI6_IRQ_Resume = 0;
 800ccd4:	4b02      	ldr	r3, [pc, #8]	; (800cce0 <EXTI9_5_IRQHandler+0x34>)
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800ccda:	bf00      	nop
 800ccdc:	bd80      	pop	{r7, pc}
 800ccde:	bf00      	nop
 800cce0:	2000003d 	.word	0x2000003d
 800cce4:	40021800 	.word	0x40021800
 800cce8:	20008780 	.word	0x20008780

0800ccec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800ccf0:	4803      	ldr	r0, [pc, #12]	; (800cd00 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800ccf2:	f7f7 fecc 	bl	8004a8e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800ccf6:	4803      	ldr	r0, [pc, #12]	; (800cd04 <TIM1_UP_TIM10_IRQHandler+0x18>)
 800ccf8:	f7f7 fec9 	bl	8004a8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800ccfc:	bf00      	nop
 800ccfe:	bd80      	pop	{r7, pc}
 800cd00:	200088c8 	.word	0x200088c8
 800cd04:	20008790 	.word	0x20008790

0800cd08 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800cd0c:	4802      	ldr	r0, [pc, #8]	; (800cd18 <TIM6_DAC_IRQHandler+0x10>)
 800cd0e:	f7f7 febe 	bl	8004a8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800cd12:	bf00      	nop
 800cd14:	bd80      	pop	{r7, pc}
 800cd16:	bf00      	nop
 800cd18:	20008988 	.word	0x20008988

0800cd1c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 800cd20:	4802      	ldr	r0, [pc, #8]	; (800cd2c <OTG_HS_IRQHandler+0x10>)
 800cd22:	f7f4 fbc9 	bl	80014b8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800cd26:	bf00      	nop
 800cd28:	bd80      	pop	{r7, pc}
 800cd2a:	bf00      	nop
 800cd2c:	20008dac 	.word	0x20008dac

0800cd30 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800cd34:	4802      	ldr	r0, [pc, #8]	; (800cd40 <LTDC_IRQHandler+0x10>)
 800cd36:	f7f6 fcd9 	bl	80036ec <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800cd3a:	bf00      	nop
 800cd3c:	bd80      	pop	{r7, pc}
 800cd3e:	bf00      	nop
 800cd40:	200087e0 	.word	0x200087e0

0800cd44 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800cd48:	4802      	ldr	r0, [pc, #8]	; (800cd54 <DMA2D_IRQHandler+0x10>)
 800cd4a:	f7f3 fd84 	bl	8000856 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800cd4e:	bf00      	nop
 800cd50:	bd80      	pop	{r7, pc}
 800cd52:	bf00      	nop
 800cd54:	20008910 	.word	0x20008910

0800cd58 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b084      	sub	sp, #16
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800cd60:	4b11      	ldr	r3, [pc, #68]	; (800cda8 <_sbrk+0x50>)
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d102      	bne.n	800cd6e <_sbrk+0x16>
		heap_end = &end;
 800cd68:	4b0f      	ldr	r3, [pc, #60]	; (800cda8 <_sbrk+0x50>)
 800cd6a:	4a10      	ldr	r2, [pc, #64]	; (800cdac <_sbrk+0x54>)
 800cd6c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800cd6e:	4b0e      	ldr	r3, [pc, #56]	; (800cda8 <_sbrk+0x50>)
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800cd74:	4b0c      	ldr	r3, [pc, #48]	; (800cda8 <_sbrk+0x50>)
 800cd76:	681a      	ldr	r2, [r3, #0]
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	4413      	add	r3, r2
 800cd7c:	466a      	mov	r2, sp
 800cd7e:	4293      	cmp	r3, r2
 800cd80:	d907      	bls.n	800cd92 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800cd82:	f000 fb5d 	bl	800d440 <__errno>
 800cd86:	4602      	mov	r2, r0
 800cd88:	230c      	movs	r3, #12
 800cd8a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800cd8c:	f04f 33ff 	mov.w	r3, #4294967295
 800cd90:	e006      	b.n	800cda0 <_sbrk+0x48>
	}

	heap_end += incr;
 800cd92:	4b05      	ldr	r3, [pc, #20]	; (800cda8 <_sbrk+0x50>)
 800cd94:	681a      	ldr	r2, [r3, #0]
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	4413      	add	r3, r2
 800cd9a:	4a03      	ldr	r2, [pc, #12]	; (800cda8 <_sbrk+0x50>)
 800cd9c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800cd9e:	68fb      	ldr	r3, [r7, #12]
}
 800cda0:	4618      	mov	r0, r3
 800cda2:	3710      	adds	r7, #16
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd80      	pop	{r7, pc}
 800cda8:	200086bc 	.word	0x200086bc
 800cdac:	20009078 	.word	0x20009078

0800cdb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800cdb0:	b480      	push	{r7}
 800cdb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800cdb4:	4b08      	ldr	r3, [pc, #32]	; (800cdd8 <SystemInit+0x28>)
 800cdb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cdba:	4a07      	ldr	r2, [pc, #28]	; (800cdd8 <SystemInit+0x28>)
 800cdbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cdc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800cdc4:	4b04      	ldr	r3, [pc, #16]	; (800cdd8 <SystemInit+0x28>)
 800cdc6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800cdca:	609a      	str	r2, [r3, #8]
#endif
}
 800cdcc:	bf00      	nop
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd4:	4770      	bx	lr
 800cdd6:	bf00      	nop
 800cdd8:	e000ed00 	.word	0xe000ed00

0800cddc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800cde0:	2200      	movs	r2, #0
 800cde2:	490e      	ldr	r1, [pc, #56]	; (800ce1c <MX_USB_HOST_Init+0x40>)
 800cde4:	480e      	ldr	r0, [pc, #56]	; (800ce20 <MX_USB_HOST_Init+0x44>)
 800cde6:	f7fa f9d3 	bl	8007190 <USBH_Init>
 800cdea:	4603      	mov	r3, r0
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d001      	beq.n	800cdf4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800cdf0:	f7ff fb58 	bl	800c4a4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800cdf4:	490b      	ldr	r1, [pc, #44]	; (800ce24 <MX_USB_HOST_Init+0x48>)
 800cdf6:	480a      	ldr	r0, [pc, #40]	; (800ce20 <MX_USB_HOST_Init+0x44>)
 800cdf8:	f7fa fa80 	bl	80072fc <USBH_RegisterClass>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d001      	beq.n	800ce06 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ce02:	f7ff fb4f 	bl	800c4a4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800ce06:	4806      	ldr	r0, [pc, #24]	; (800ce20 <MX_USB_HOST_Init+0x44>)
 800ce08:	f7fa fb04 	bl	8007414 <USBH_Start>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d001      	beq.n	800ce16 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ce12:	f7ff fb47 	bl	800c4a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ce16:	bf00      	nop
 800ce18:	bd80      	pop	{r7, pc}
 800ce1a:	bf00      	nop
 800ce1c:	0800ce29 	.word	0x0800ce29
 800ce20:	200089c8 	.word	0x200089c8
 800ce24:	20000008 	.word	0x20000008

0800ce28 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ce28:	b480      	push	{r7}
 800ce2a:	b083      	sub	sp, #12
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
 800ce30:	460b      	mov	r3, r1
 800ce32:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800ce34:	78fb      	ldrb	r3, [r7, #3]
 800ce36:	3b01      	subs	r3, #1
 800ce38:	2b04      	cmp	r3, #4
 800ce3a:	d819      	bhi.n	800ce70 <USBH_UserProcess+0x48>
 800ce3c:	a201      	add	r2, pc, #4	; (adr r2, 800ce44 <USBH_UserProcess+0x1c>)
 800ce3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce42:	bf00      	nop
 800ce44:	0800ce71 	.word	0x0800ce71
 800ce48:	0800ce61 	.word	0x0800ce61
 800ce4c:	0800ce71 	.word	0x0800ce71
 800ce50:	0800ce69 	.word	0x0800ce69
 800ce54:	0800ce59 	.word	0x0800ce59
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800ce58:	4b09      	ldr	r3, [pc, #36]	; (800ce80 <USBH_UserProcess+0x58>)
 800ce5a:	2203      	movs	r2, #3
 800ce5c:	701a      	strb	r2, [r3, #0]
  break;
 800ce5e:	e008      	b.n	800ce72 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ce60:	4b07      	ldr	r3, [pc, #28]	; (800ce80 <USBH_UserProcess+0x58>)
 800ce62:	2202      	movs	r2, #2
 800ce64:	701a      	strb	r2, [r3, #0]
  break;
 800ce66:	e004      	b.n	800ce72 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800ce68:	4b05      	ldr	r3, [pc, #20]	; (800ce80 <USBH_UserProcess+0x58>)
 800ce6a:	2201      	movs	r2, #1
 800ce6c:	701a      	strb	r2, [r3, #0]
  break;
 800ce6e:	e000      	b.n	800ce72 <USBH_UserProcess+0x4a>

  default:
  break;
 800ce70:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ce72:	bf00      	nop
 800ce74:	370c      	adds	r7, #12
 800ce76:	46bd      	mov	sp, r7
 800ce78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7c:	4770      	bx	lr
 800ce7e:	bf00      	nop
 800ce80:	200086c0 	.word	0x200086c0

0800ce84 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b08a      	sub	sp, #40	; 0x28
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ce8c:	f107 0314 	add.w	r3, r7, #20
 800ce90:	2200      	movs	r2, #0
 800ce92:	601a      	str	r2, [r3, #0]
 800ce94:	605a      	str	r2, [r3, #4]
 800ce96:	609a      	str	r2, [r3, #8]
 800ce98:	60da      	str	r2, [r3, #12]
 800ce9a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	4a24      	ldr	r2, [pc, #144]	; (800cf34 <HAL_HCD_MspInit+0xb0>)
 800cea2:	4293      	cmp	r3, r2
 800cea4:	d141      	bne.n	800cf2a <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cea6:	2300      	movs	r3, #0
 800cea8:	613b      	str	r3, [r7, #16]
 800ceaa:	4b23      	ldr	r3, [pc, #140]	; (800cf38 <HAL_HCD_MspInit+0xb4>)
 800ceac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceae:	4a22      	ldr	r2, [pc, #136]	; (800cf38 <HAL_HCD_MspInit+0xb4>)
 800ceb0:	f043 0302 	orr.w	r3, r3, #2
 800ceb4:	6313      	str	r3, [r2, #48]	; 0x30
 800ceb6:	4b20      	ldr	r3, [pc, #128]	; (800cf38 <HAL_HCD_MspInit+0xb4>)
 800ceb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceba:	f003 0302 	and.w	r3, r3, #2
 800cebe:	613b      	str	r3, [r7, #16]
 800cec0:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP 
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800cec2:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800cec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cec8:	2302      	movs	r3, #2
 800ceca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cecc:	2300      	movs	r3, #0
 800cece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ced0:	2300      	movs	r3, #0
 800ced2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800ced4:	230c      	movs	r3, #12
 800ced6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ced8:	f107 0314 	add.w	r3, r7, #20
 800cedc:	4619      	mov	r1, r3
 800cede:	4817      	ldr	r0, [pc, #92]	; (800cf3c <HAL_HCD_MspInit+0xb8>)
 800cee0:	f7f3 fe5c 	bl	8000b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800cee4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cee8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ceea:	2300      	movs	r3, #0
 800ceec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ceee:	2300      	movs	r3, #0
 800cef0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800cef2:	f107 0314 	add.w	r3, r7, #20
 800cef6:	4619      	mov	r1, r3
 800cef8:	4810      	ldr	r0, [pc, #64]	; (800cf3c <HAL_HCD_MspInit+0xb8>)
 800cefa:	f7f3 fe4f 	bl	8000b9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800cefe:	2300      	movs	r3, #0
 800cf00:	60fb      	str	r3, [r7, #12]
 800cf02:	4b0d      	ldr	r3, [pc, #52]	; (800cf38 <HAL_HCD_MspInit+0xb4>)
 800cf04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf06:	4a0c      	ldr	r2, [pc, #48]	; (800cf38 <HAL_HCD_MspInit+0xb4>)
 800cf08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cf0c:	6313      	str	r3, [r2, #48]	; 0x30
 800cf0e:	4b0a      	ldr	r3, [pc, #40]	; (800cf38 <HAL_HCD_MspInit+0xb4>)
 800cf10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cf16:	60fb      	str	r3, [r7, #12]
 800cf18:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	2105      	movs	r1, #5
 800cf1e:	204d      	movs	r0, #77	; 0x4d
 800cf20:	f7f3 fc0a 	bl	8000738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800cf24:	204d      	movs	r0, #77	; 0x4d
 800cf26:	f7f3 fc23 	bl	8000770 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800cf2a:	bf00      	nop
 800cf2c:	3728      	adds	r7, #40	; 0x28
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bd80      	pop	{r7, pc}
 800cf32:	bf00      	nop
 800cf34:	40040000 	.word	0x40040000
 800cf38:	40023800 	.word	0x40023800
 800cf3c:	40020400 	.word	0x40020400

0800cf40 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b082      	sub	sp, #8
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cf4e:	4618      	mov	r0, r3
 800cf50:	f7fa ff0d 	bl	8007d6e <USBH_LL_IncTimer>
}
 800cf54:	bf00      	nop
 800cf56:	3708      	adds	r7, #8
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	bd80      	pop	{r7, pc}

0800cf5c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b082      	sub	sp, #8
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f7fa ff51 	bl	8007e12 <USBH_LL_Connect>
}
 800cf70:	bf00      	nop
 800cf72:	3708      	adds	r7, #8
 800cf74:	46bd      	mov	sp, r7
 800cf76:	bd80      	pop	{r7, pc}

0800cf78 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b082      	sub	sp, #8
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cf86:	4618      	mov	r0, r3
 800cf88:	f7fa ff66 	bl	8007e58 <USBH_LL_Disconnect>
}
 800cf8c:	bf00      	nop
 800cf8e:	3708      	adds	r7, #8
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd80      	pop	{r7, pc}

0800cf94 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b082      	sub	sp, #8
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
 800cf9c:	460b      	mov	r3, r1
 800cf9e:	70fb      	strb	r3, [r7, #3]
 800cfa0:	4613      	mov	r3, r2
 800cfa2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cfaa:	4618      	mov	r0, r3
 800cfac:	f7fa ff9b 	bl	8007ee6 <USBH_LL_NotifyURBChange>
#endif
}
 800cfb0:	bf00      	nop
 800cfb2:	3708      	adds	r7, #8
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}

0800cfb8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b082      	sub	sp, #8
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f7fa fefb 	bl	8007dc2 <USBH_LL_PortEnabled>
} 
 800cfcc:	bf00      	nop
 800cfce:	3708      	adds	r7, #8
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	bd80      	pop	{r7, pc}

0800cfd4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b082      	sub	sp, #8
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	f7fa ff07 	bl	8007df6 <USBH_LL_PortDisabled>
} 
 800cfe8:	bf00      	nop
 800cfea:	3708      	adds	r7, #8
 800cfec:	46bd      	mov	sp, r7
 800cfee:	bd80      	pop	{r7, pc}

0800cff0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b082      	sub	sp, #8
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d132      	bne.n	800d068 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800d002:	4a1c      	ldr	r2, [pc, #112]	; (800d074 <USBH_LL_Init+0x84>)
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_HS;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	4a19      	ldr	r2, [pc, #100]	; (800d074 <USBH_LL_Init+0x84>)
 800d00e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800d012:	4b18      	ldr	r3, [pc, #96]	; (800d074 <USBH_LL_Init+0x84>)
 800d014:	4a18      	ldr	r2, [pc, #96]	; (800d078 <USBH_LL_Init+0x88>)
 800d016:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800d018:	4b16      	ldr	r3, [pc, #88]	; (800d074 <USBH_LL_Init+0x84>)
 800d01a:	220c      	movs	r2, #12
 800d01c:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800d01e:	4b15      	ldr	r3, [pc, #84]	; (800d074 <USBH_LL_Init+0x84>)
 800d020:	2201      	movs	r2, #1
 800d022:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800d024:	4b13      	ldr	r3, [pc, #76]	; (800d074 <USBH_LL_Init+0x84>)
 800d026:	2200      	movs	r2, #0
 800d028:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800d02a:	4b12      	ldr	r3, [pc, #72]	; (800d074 <USBH_LL_Init+0x84>)
 800d02c:	2202      	movs	r2, #2
 800d02e:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800d030:	4b10      	ldr	r3, [pc, #64]	; (800d074 <USBH_LL_Init+0x84>)
 800d032:	2200      	movs	r2, #0
 800d034:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800d036:	4b0f      	ldr	r3, [pc, #60]	; (800d074 <USBH_LL_Init+0x84>)
 800d038:	2200      	movs	r2, #0
 800d03a:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800d03c:	4b0d      	ldr	r3, [pc, #52]	; (800d074 <USBH_LL_Init+0x84>)
 800d03e:	2200      	movs	r2, #0
 800d040:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800d042:	4b0c      	ldr	r3, [pc, #48]	; (800d074 <USBH_LL_Init+0x84>)
 800d044:	2200      	movs	r2, #0
 800d046:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800d048:	480a      	ldr	r0, [pc, #40]	; (800d074 <USBH_LL_Init+0x84>)
 800d04a:	f7f3 ffa6 	bl	8000f9a <HAL_HCD_Init>
 800d04e:	4603      	mov	r3, r0
 800d050:	2b00      	cmp	r3, #0
 800d052:	d001      	beq.n	800d058 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800d054:	f7ff fa26 	bl	800c4a4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800d058:	4806      	ldr	r0, [pc, #24]	; (800d074 <USBH_LL_Init+0x84>)
 800d05a:	f7f4 fba9 	bl	80017b0 <HAL_HCD_GetCurrentFrame>
 800d05e:	4603      	mov	r3, r0
 800d060:	4619      	mov	r1, r3
 800d062:	6878      	ldr	r0, [r7, #4]
 800d064:	f7fa fe74 	bl	8007d50 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800d068:	2300      	movs	r3, #0
}
 800d06a:	4618      	mov	r0, r3
 800d06c:	3708      	adds	r7, #8
 800d06e:	46bd      	mov	sp, r7
 800d070:	bd80      	pop	{r7, pc}
 800d072:	bf00      	nop
 800d074:	20008dac 	.word	0x20008dac
 800d078:	40040000 	.word	0x40040000

0800d07c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b084      	sub	sp, #16
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d084:	2300      	movs	r3, #0
 800d086:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d088:	2300      	movs	r3, #0
 800d08a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d092:	4618      	mov	r0, r3
 800d094:	f7f4 fb14 	bl	80016c0 <HAL_HCD_Start>
 800d098:	4603      	mov	r3, r0
 800d09a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d09c:	7bfb      	ldrb	r3, [r7, #15]
 800d09e:	4618      	mov	r0, r3
 800d0a0:	f000 f95c 	bl	800d35c <USBH_Get_USB_Status>
 800d0a4:	4603      	mov	r3, r0
 800d0a6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800d0a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	3710      	adds	r7, #16
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	bd80      	pop	{r7, pc}

0800d0b2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800d0b2:	b580      	push	{r7, lr}
 800d0b4:	b084      	sub	sp, #16
 800d0b6:	af00      	add	r7, sp, #0
 800d0b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d0be:	2300      	movs	r3, #0
 800d0c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	f7f4 fb1c 	bl	8001706 <HAL_HCD_Stop>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d0d2:	7bfb      	ldrb	r3, [r7, #15]
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	f000 f941 	bl	800d35c <USBH_Get_USB_Status>
 800d0da:	4603      	mov	r3, r0
 800d0dc:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800d0de:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	3710      	adds	r7, #16
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	bd80      	pop	{r7, pc}

0800d0e8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b084      	sub	sp, #16
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800d0f0:	2301      	movs	r3, #1
 800d0f2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f7f4 fb66 	bl	80017cc <HAL_HCD_GetCurrentSpeed>
 800d100:	4603      	mov	r3, r0
 800d102:	2b01      	cmp	r3, #1
 800d104:	d007      	beq.n	800d116 <USBH_LL_GetSpeed+0x2e>
 800d106:	2b01      	cmp	r3, #1
 800d108:	d302      	bcc.n	800d110 <USBH_LL_GetSpeed+0x28>
 800d10a:	2b02      	cmp	r3, #2
 800d10c:	d006      	beq.n	800d11c <USBH_LL_GetSpeed+0x34>
 800d10e:	e008      	b.n	800d122 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800d110:	2300      	movs	r3, #0
 800d112:	73fb      	strb	r3, [r7, #15]
    break;
 800d114:	e008      	b.n	800d128 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800d116:	2301      	movs	r3, #1
 800d118:	73fb      	strb	r3, [r7, #15]
    break;
 800d11a:	e005      	b.n	800d128 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800d11c:	2302      	movs	r3, #2
 800d11e:	73fb      	strb	r3, [r7, #15]
    break;
 800d120:	e002      	b.n	800d128 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800d122:	2301      	movs	r3, #1
 800d124:	73fb      	strb	r3, [r7, #15]
    break;
 800d126:	bf00      	nop
  }
  return  speed;
 800d128:	7bfb      	ldrb	r3, [r7, #15]
}
 800d12a:	4618      	mov	r0, r3
 800d12c:	3710      	adds	r7, #16
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd80      	pop	{r7, pc}

0800d132 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800d132:	b580      	push	{r7, lr}
 800d134:	b084      	sub	sp, #16
 800d136:	af00      	add	r7, sp, #0
 800d138:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d13a:	2300      	movs	r3, #0
 800d13c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d13e:	2300      	movs	r3, #0
 800d140:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d148:	4618      	mov	r0, r3
 800d14a:	f7f4 faf9 	bl	8001740 <HAL_HCD_ResetPort>
 800d14e:	4603      	mov	r3, r0
 800d150:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 800d152:	7bfb      	ldrb	r3, [r7, #15]
 800d154:	4618      	mov	r0, r3
 800d156:	f000 f901 	bl	800d35c <USBH_Get_USB_Status>
 800d15a:	4603      	mov	r3, r0
 800d15c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800d15e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d160:	4618      	mov	r0, r3
 800d162:	3710      	adds	r7, #16
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}

0800d168 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b082      	sub	sp, #8
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
 800d170:	460b      	mov	r3, r1
 800d172:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d17a:	78fa      	ldrb	r2, [r7, #3]
 800d17c:	4611      	mov	r1, r2
 800d17e:	4618      	mov	r0, r3
 800d180:	f7f4 fb01 	bl	8001786 <HAL_HCD_HC_GetXferCount>
 800d184:	4603      	mov	r3, r0
}
 800d186:	4618      	mov	r0, r3
 800d188:	3708      	adds	r7, #8
 800d18a:	46bd      	mov	sp, r7
 800d18c:	bd80      	pop	{r7, pc}

0800d18e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d18e:	b590      	push	{r4, r7, lr}
 800d190:	b089      	sub	sp, #36	; 0x24
 800d192:	af04      	add	r7, sp, #16
 800d194:	6078      	str	r0, [r7, #4]
 800d196:	4608      	mov	r0, r1
 800d198:	4611      	mov	r1, r2
 800d19a:	461a      	mov	r2, r3
 800d19c:	4603      	mov	r3, r0
 800d19e:	70fb      	strb	r3, [r7, #3]
 800d1a0:	460b      	mov	r3, r1
 800d1a2:	70bb      	strb	r3, [r7, #2]
 800d1a4:	4613      	mov	r3, r2
 800d1a6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d1b6:	787c      	ldrb	r4, [r7, #1]
 800d1b8:	78ba      	ldrb	r2, [r7, #2]
 800d1ba:	78f9      	ldrb	r1, [r7, #3]
 800d1bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d1be:	9302      	str	r3, [sp, #8]
 800d1c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d1c4:	9301      	str	r3, [sp, #4]
 800d1c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d1ca:	9300      	str	r3, [sp, #0]
 800d1cc:	4623      	mov	r3, r4
 800d1ce:	f7f3 ff46 	bl	800105e <HAL_HCD_HC_Init>
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800d1d6:	7bfb      	ldrb	r3, [r7, #15]
 800d1d8:	4618      	mov	r0, r3
 800d1da:	f000 f8bf 	bl	800d35c <USBH_Get_USB_Status>
 800d1de:	4603      	mov	r3, r0
 800d1e0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800d1e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	3714      	adds	r7, #20
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	bd90      	pop	{r4, r7, pc}

0800d1ec <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b084      	sub	sp, #16
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
 800d1f4:	460b      	mov	r3, r1
 800d1f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d206:	78fa      	ldrb	r2, [r7, #3]
 800d208:	4611      	mov	r1, r2
 800d20a:	4618      	mov	r0, r3
 800d20c:	f7f3 ffbf 	bl	800118e <HAL_HCD_HC_Halt>
 800d210:	4603      	mov	r3, r0
 800d212:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d214:	7bfb      	ldrb	r3, [r7, #15]
 800d216:	4618      	mov	r0, r3
 800d218:	f000 f8a0 	bl	800d35c <USBH_Get_USB_Status>
 800d21c:	4603      	mov	r3, r0
 800d21e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800d220:	7bbb      	ldrb	r3, [r7, #14]
}
 800d222:	4618      	mov	r0, r3
 800d224:	3710      	adds	r7, #16
 800d226:	46bd      	mov	sp, r7
 800d228:	bd80      	pop	{r7, pc}

0800d22a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800d22a:	b590      	push	{r4, r7, lr}
 800d22c:	b089      	sub	sp, #36	; 0x24
 800d22e:	af04      	add	r7, sp, #16
 800d230:	6078      	str	r0, [r7, #4]
 800d232:	4608      	mov	r0, r1
 800d234:	4611      	mov	r1, r2
 800d236:	461a      	mov	r2, r3
 800d238:	4603      	mov	r3, r0
 800d23a:	70fb      	strb	r3, [r7, #3]
 800d23c:	460b      	mov	r3, r1
 800d23e:	70bb      	strb	r3, [r7, #2]
 800d240:	4613      	mov	r3, r2
 800d242:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d244:	2300      	movs	r3, #0
 800d246:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d248:	2300      	movs	r3, #0
 800d24a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d252:	787c      	ldrb	r4, [r7, #1]
 800d254:	78ba      	ldrb	r2, [r7, #2]
 800d256:	78f9      	ldrb	r1, [r7, #3]
 800d258:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d25c:	9303      	str	r3, [sp, #12]
 800d25e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d260:	9302      	str	r3, [sp, #8]
 800d262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d264:	9301      	str	r3, [sp, #4]
 800d266:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d26a:	9300      	str	r3, [sp, #0]
 800d26c:	4623      	mov	r3, r4
 800d26e:	f7f3 ffb1 	bl	80011d4 <HAL_HCD_HC_SubmitRequest>
 800d272:	4603      	mov	r3, r0
 800d274:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800d276:	7bfb      	ldrb	r3, [r7, #15]
 800d278:	4618      	mov	r0, r3
 800d27a:	f000 f86f 	bl	800d35c <USBH_Get_USB_Status>
 800d27e:	4603      	mov	r3, r0
 800d280:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800d282:	7bbb      	ldrb	r3, [r7, #14]
}
 800d284:	4618      	mov	r0, r3
 800d286:	3714      	adds	r7, #20
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd90      	pop	{r4, r7, pc}

0800d28c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b082      	sub	sp, #8
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
 800d294:	460b      	mov	r3, r1
 800d296:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d29e:	78fa      	ldrb	r2, [r7, #3]
 800d2a0:	4611      	mov	r1, r2
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f7f4 fa5a 	bl	800175c <HAL_HCD_HC_GetURBState>
 800d2a8:	4603      	mov	r3, r0
}
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	3708      	adds	r7, #8
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}

0800d2b2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800d2b2:	b580      	push	{r7, lr}
 800d2b4:	b082      	sub	sp, #8
 800d2b6:	af00      	add	r7, sp, #0
 800d2b8:	6078      	str	r0, [r7, #4]
 800d2ba:	460b      	mov	r3, r1
 800d2bc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d103      	bne.n	800d2d0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800d2c8:	78fb      	ldrb	r3, [r7, #3]
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	f000 f872 	bl	800d3b4 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800d2d0:	20c8      	movs	r0, #200	; 0xc8
 800d2d2:	f7f3 f957 	bl	8000584 <HAL_Delay>
  return USBH_OK;
 800d2d6:	2300      	movs	r3, #0
}
 800d2d8:	4618      	mov	r0, r3
 800d2da:	3708      	adds	r7, #8
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	bd80      	pop	{r7, pc}

0800d2e0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800d2e0:	b480      	push	{r7}
 800d2e2:	b085      	sub	sp, #20
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
 800d2e8:	460b      	mov	r3, r1
 800d2ea:	70fb      	strb	r3, [r7, #3]
 800d2ec:	4613      	mov	r3, r2
 800d2ee:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d2f6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800d2f8:	78fa      	ldrb	r2, [r7, #3]
 800d2fa:	68f9      	ldr	r1, [r7, #12]
 800d2fc:	4613      	mov	r3, r2
 800d2fe:	009b      	lsls	r3, r3, #2
 800d300:	4413      	add	r3, r2
 800d302:	00db      	lsls	r3, r3, #3
 800d304:	440b      	add	r3, r1
 800d306:	333b      	adds	r3, #59	; 0x3b
 800d308:	781b      	ldrb	r3, [r3, #0]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d00a      	beq.n	800d324 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800d30e:	78fa      	ldrb	r2, [r7, #3]
 800d310:	68f9      	ldr	r1, [r7, #12]
 800d312:	4613      	mov	r3, r2
 800d314:	009b      	lsls	r3, r3, #2
 800d316:	4413      	add	r3, r2
 800d318:	00db      	lsls	r3, r3, #3
 800d31a:	440b      	add	r3, r1
 800d31c:	3350      	adds	r3, #80	; 0x50
 800d31e:	78ba      	ldrb	r2, [r7, #2]
 800d320:	701a      	strb	r2, [r3, #0]
 800d322:	e009      	b.n	800d338 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800d324:	78fa      	ldrb	r2, [r7, #3]
 800d326:	68f9      	ldr	r1, [r7, #12]
 800d328:	4613      	mov	r3, r2
 800d32a:	009b      	lsls	r3, r3, #2
 800d32c:	4413      	add	r3, r2
 800d32e:	00db      	lsls	r3, r3, #3
 800d330:	440b      	add	r3, r1
 800d332:	3351      	adds	r3, #81	; 0x51
 800d334:	78ba      	ldrb	r2, [r7, #2]
 800d336:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800d338:	2300      	movs	r3, #0
}
 800d33a:	4618      	mov	r0, r3
 800d33c:	3714      	adds	r7, #20
 800d33e:	46bd      	mov	sp, r7
 800d340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d344:	4770      	bx	lr

0800d346 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800d346:	b580      	push	{r7, lr}
 800d348:	b082      	sub	sp, #8
 800d34a:	af00      	add	r7, sp, #0
 800d34c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800d34e:	6878      	ldr	r0, [r7, #4]
 800d350:	f7f3 f918 	bl	8000584 <HAL_Delay>
}
 800d354:	bf00      	nop
 800d356:	3708      	adds	r7, #8
 800d358:	46bd      	mov	sp, r7
 800d35a:	bd80      	pop	{r7, pc}

0800d35c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d35c:	b480      	push	{r7}
 800d35e:	b085      	sub	sp, #20
 800d360:	af00      	add	r7, sp, #0
 800d362:	4603      	mov	r3, r0
 800d364:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d366:	2300      	movs	r3, #0
 800d368:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d36a:	79fb      	ldrb	r3, [r7, #7]
 800d36c:	2b03      	cmp	r3, #3
 800d36e:	d817      	bhi.n	800d3a0 <USBH_Get_USB_Status+0x44>
 800d370:	a201      	add	r2, pc, #4	; (adr r2, 800d378 <USBH_Get_USB_Status+0x1c>)
 800d372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d376:	bf00      	nop
 800d378:	0800d389 	.word	0x0800d389
 800d37c:	0800d38f 	.word	0x0800d38f
 800d380:	0800d395 	.word	0x0800d395
 800d384:	0800d39b 	.word	0x0800d39b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800d388:	2300      	movs	r3, #0
 800d38a:	73fb      	strb	r3, [r7, #15]
    break;
 800d38c:	e00b      	b.n	800d3a6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d38e:	2302      	movs	r3, #2
 800d390:	73fb      	strb	r3, [r7, #15]
    break;
 800d392:	e008      	b.n	800d3a6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d394:	2301      	movs	r3, #1
 800d396:	73fb      	strb	r3, [r7, #15]
    break;
 800d398:	e005      	b.n	800d3a6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d39a:	2302      	movs	r3, #2
 800d39c:	73fb      	strb	r3, [r7, #15]
    break;
 800d39e:	e002      	b.n	800d3a6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800d3a0:	2302      	movs	r3, #2
 800d3a2:	73fb      	strb	r3, [r7, #15]
    break;
 800d3a4:	bf00      	nop
  }
  return usb_status;
 800d3a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	3714      	adds	r7, #20
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b2:	4770      	bx	lr

0800d3b4 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 0 : VBUS Active
  *          - 1 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{ 
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b084      	sub	sp, #16
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800d3be:	79fb      	ldrb	r3, [r7, #7]
 800d3c0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800d3c2:	79fb      	ldrb	r3, [r7, #7]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d102      	bne.n	800d3ce <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800d3c8:	2301      	movs	r3, #1
 800d3ca:	73fb      	strb	r3, [r7, #15]
 800d3cc:	e001      	b.n	800d3d2 <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800d3d2:	7bfb      	ldrb	r3, [r7, #15]
 800d3d4:	461a      	mov	r2, r3
 800d3d6:	2110      	movs	r1, #16
 800d3d8:	4803      	ldr	r0, [pc, #12]	; (800d3e8 <MX_DriverVbusHS+0x34>)
 800d3da:	f7f3 fda1 	bl	8000f20 <HAL_GPIO_WritePin>
}
 800d3de:	bf00      	nop
 800d3e0:	3710      	adds	r7, #16
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	bd80      	pop	{r7, pc}
 800d3e6:	bf00      	nop
 800d3e8:	40020800 	.word	0x40020800

0800d3ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800d3ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 800d424 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800d3f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800d3f2:	e003      	b.n	800d3fc <LoopCopyDataInit>

0800d3f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800d3f4:	4b0c      	ldr	r3, [pc, #48]	; (800d428 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800d3f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800d3f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800d3fa:	3104      	adds	r1, #4

0800d3fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800d3fc:	480b      	ldr	r0, [pc, #44]	; (800d42c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800d3fe:	4b0c      	ldr	r3, [pc, #48]	; (800d430 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800d400:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800d402:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800d404:	d3f6      	bcc.n	800d3f4 <CopyDataInit>
  ldr  r2, =_sbss
 800d406:	4a0b      	ldr	r2, [pc, #44]	; (800d434 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800d408:	e002      	b.n	800d410 <LoopFillZerobss>

0800d40a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800d40a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800d40c:	f842 3b04 	str.w	r3, [r2], #4

0800d410 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800d410:	4b09      	ldr	r3, [pc, #36]	; (800d438 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800d412:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800d414:	d3f9      	bcc.n	800d40a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800d416:	f7ff fccb 	bl	800cdb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800d41a:	f000 f817 	bl	800d44c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d41e:	f7fe f9ff 	bl	800b820 <main>
  bx  lr    
 800d422:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800d424:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800d428:	0800d72c 	.word	0x0800d72c
  ldr  r0, =_sdata
 800d42c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800d430:	200000a8 	.word	0x200000a8
  ldr  r2, =_sbss
 800d434:	200000a8 	.word	0x200000a8
  ldr  r3, = _ebss
 800d438:	20009074 	.word	0x20009074

0800d43c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d43c:	e7fe      	b.n	800d43c <ADC_IRQHandler>
	...

0800d440 <__errno>:
 800d440:	4b01      	ldr	r3, [pc, #4]	; (800d448 <__errno+0x8>)
 800d442:	6818      	ldr	r0, [r3, #0]
 800d444:	4770      	bx	lr
 800d446:	bf00      	nop
 800d448:	20000044 	.word	0x20000044

0800d44c <__libc_init_array>:
 800d44c:	b570      	push	{r4, r5, r6, lr}
 800d44e:	4e0d      	ldr	r6, [pc, #52]	; (800d484 <__libc_init_array+0x38>)
 800d450:	4c0d      	ldr	r4, [pc, #52]	; (800d488 <__libc_init_array+0x3c>)
 800d452:	1ba4      	subs	r4, r4, r6
 800d454:	10a4      	asrs	r4, r4, #2
 800d456:	2500      	movs	r5, #0
 800d458:	42a5      	cmp	r5, r4
 800d45a:	d109      	bne.n	800d470 <__libc_init_array+0x24>
 800d45c:	4e0b      	ldr	r6, [pc, #44]	; (800d48c <__libc_init_array+0x40>)
 800d45e:	4c0c      	ldr	r4, [pc, #48]	; (800d490 <__libc_init_array+0x44>)
 800d460:	f000 f8f6 	bl	800d650 <_init>
 800d464:	1ba4      	subs	r4, r4, r6
 800d466:	10a4      	asrs	r4, r4, #2
 800d468:	2500      	movs	r5, #0
 800d46a:	42a5      	cmp	r5, r4
 800d46c:	d105      	bne.n	800d47a <__libc_init_array+0x2e>
 800d46e:	bd70      	pop	{r4, r5, r6, pc}
 800d470:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d474:	4798      	blx	r3
 800d476:	3501      	adds	r5, #1
 800d478:	e7ee      	b.n	800d458 <__libc_init_array+0xc>
 800d47a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d47e:	4798      	blx	r3
 800d480:	3501      	adds	r5, #1
 800d482:	e7f2      	b.n	800d46a <__libc_init_array+0x1e>
 800d484:	0800d724 	.word	0x0800d724
 800d488:	0800d724 	.word	0x0800d724
 800d48c:	0800d724 	.word	0x0800d724
 800d490:	0800d728 	.word	0x0800d728

0800d494 <malloc>:
 800d494:	4b02      	ldr	r3, [pc, #8]	; (800d4a0 <malloc+0xc>)
 800d496:	4601      	mov	r1, r0
 800d498:	6818      	ldr	r0, [r3, #0]
 800d49a:	f000 b86d 	b.w	800d578 <_malloc_r>
 800d49e:	bf00      	nop
 800d4a0:	20000044 	.word	0x20000044

0800d4a4 <free>:
 800d4a4:	4b02      	ldr	r3, [pc, #8]	; (800d4b0 <free+0xc>)
 800d4a6:	4601      	mov	r1, r0
 800d4a8:	6818      	ldr	r0, [r3, #0]
 800d4aa:	f000 b817 	b.w	800d4dc <_free_r>
 800d4ae:	bf00      	nop
 800d4b0:	20000044 	.word	0x20000044

0800d4b4 <memcpy>:
 800d4b4:	b510      	push	{r4, lr}
 800d4b6:	1e43      	subs	r3, r0, #1
 800d4b8:	440a      	add	r2, r1
 800d4ba:	4291      	cmp	r1, r2
 800d4bc:	d100      	bne.n	800d4c0 <memcpy+0xc>
 800d4be:	bd10      	pop	{r4, pc}
 800d4c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d4c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d4c8:	e7f7      	b.n	800d4ba <memcpy+0x6>

0800d4ca <memset>:
 800d4ca:	4402      	add	r2, r0
 800d4cc:	4603      	mov	r3, r0
 800d4ce:	4293      	cmp	r3, r2
 800d4d0:	d100      	bne.n	800d4d4 <memset+0xa>
 800d4d2:	4770      	bx	lr
 800d4d4:	f803 1b01 	strb.w	r1, [r3], #1
 800d4d8:	e7f9      	b.n	800d4ce <memset+0x4>
	...

0800d4dc <_free_r>:
 800d4dc:	b538      	push	{r3, r4, r5, lr}
 800d4de:	4605      	mov	r5, r0
 800d4e0:	2900      	cmp	r1, #0
 800d4e2:	d045      	beq.n	800d570 <_free_r+0x94>
 800d4e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4e8:	1f0c      	subs	r4, r1, #4
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	bfb8      	it	lt
 800d4ee:	18e4      	addlt	r4, r4, r3
 800d4f0:	f000 f8ac 	bl	800d64c <__malloc_lock>
 800d4f4:	4a1f      	ldr	r2, [pc, #124]	; (800d574 <_free_r+0x98>)
 800d4f6:	6813      	ldr	r3, [r2, #0]
 800d4f8:	4610      	mov	r0, r2
 800d4fa:	b933      	cbnz	r3, 800d50a <_free_r+0x2e>
 800d4fc:	6063      	str	r3, [r4, #4]
 800d4fe:	6014      	str	r4, [r2, #0]
 800d500:	4628      	mov	r0, r5
 800d502:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d506:	f000 b8a2 	b.w	800d64e <__malloc_unlock>
 800d50a:	42a3      	cmp	r3, r4
 800d50c:	d90c      	bls.n	800d528 <_free_r+0x4c>
 800d50e:	6821      	ldr	r1, [r4, #0]
 800d510:	1862      	adds	r2, r4, r1
 800d512:	4293      	cmp	r3, r2
 800d514:	bf04      	itt	eq
 800d516:	681a      	ldreq	r2, [r3, #0]
 800d518:	685b      	ldreq	r3, [r3, #4]
 800d51a:	6063      	str	r3, [r4, #4]
 800d51c:	bf04      	itt	eq
 800d51e:	1852      	addeq	r2, r2, r1
 800d520:	6022      	streq	r2, [r4, #0]
 800d522:	6004      	str	r4, [r0, #0]
 800d524:	e7ec      	b.n	800d500 <_free_r+0x24>
 800d526:	4613      	mov	r3, r2
 800d528:	685a      	ldr	r2, [r3, #4]
 800d52a:	b10a      	cbz	r2, 800d530 <_free_r+0x54>
 800d52c:	42a2      	cmp	r2, r4
 800d52e:	d9fa      	bls.n	800d526 <_free_r+0x4a>
 800d530:	6819      	ldr	r1, [r3, #0]
 800d532:	1858      	adds	r0, r3, r1
 800d534:	42a0      	cmp	r0, r4
 800d536:	d10b      	bne.n	800d550 <_free_r+0x74>
 800d538:	6820      	ldr	r0, [r4, #0]
 800d53a:	4401      	add	r1, r0
 800d53c:	1858      	adds	r0, r3, r1
 800d53e:	4282      	cmp	r2, r0
 800d540:	6019      	str	r1, [r3, #0]
 800d542:	d1dd      	bne.n	800d500 <_free_r+0x24>
 800d544:	6810      	ldr	r0, [r2, #0]
 800d546:	6852      	ldr	r2, [r2, #4]
 800d548:	605a      	str	r2, [r3, #4]
 800d54a:	4401      	add	r1, r0
 800d54c:	6019      	str	r1, [r3, #0]
 800d54e:	e7d7      	b.n	800d500 <_free_r+0x24>
 800d550:	d902      	bls.n	800d558 <_free_r+0x7c>
 800d552:	230c      	movs	r3, #12
 800d554:	602b      	str	r3, [r5, #0]
 800d556:	e7d3      	b.n	800d500 <_free_r+0x24>
 800d558:	6820      	ldr	r0, [r4, #0]
 800d55a:	1821      	adds	r1, r4, r0
 800d55c:	428a      	cmp	r2, r1
 800d55e:	bf04      	itt	eq
 800d560:	6811      	ldreq	r1, [r2, #0]
 800d562:	6852      	ldreq	r2, [r2, #4]
 800d564:	6062      	str	r2, [r4, #4]
 800d566:	bf04      	itt	eq
 800d568:	1809      	addeq	r1, r1, r0
 800d56a:	6021      	streq	r1, [r4, #0]
 800d56c:	605c      	str	r4, [r3, #4]
 800d56e:	e7c7      	b.n	800d500 <_free_r+0x24>
 800d570:	bd38      	pop	{r3, r4, r5, pc}
 800d572:	bf00      	nop
 800d574:	200086c4 	.word	0x200086c4

0800d578 <_malloc_r>:
 800d578:	b570      	push	{r4, r5, r6, lr}
 800d57a:	1ccd      	adds	r5, r1, #3
 800d57c:	f025 0503 	bic.w	r5, r5, #3
 800d580:	3508      	adds	r5, #8
 800d582:	2d0c      	cmp	r5, #12
 800d584:	bf38      	it	cc
 800d586:	250c      	movcc	r5, #12
 800d588:	2d00      	cmp	r5, #0
 800d58a:	4606      	mov	r6, r0
 800d58c:	db01      	blt.n	800d592 <_malloc_r+0x1a>
 800d58e:	42a9      	cmp	r1, r5
 800d590:	d903      	bls.n	800d59a <_malloc_r+0x22>
 800d592:	230c      	movs	r3, #12
 800d594:	6033      	str	r3, [r6, #0]
 800d596:	2000      	movs	r0, #0
 800d598:	bd70      	pop	{r4, r5, r6, pc}
 800d59a:	f000 f857 	bl	800d64c <__malloc_lock>
 800d59e:	4a21      	ldr	r2, [pc, #132]	; (800d624 <_malloc_r+0xac>)
 800d5a0:	6814      	ldr	r4, [r2, #0]
 800d5a2:	4621      	mov	r1, r4
 800d5a4:	b991      	cbnz	r1, 800d5cc <_malloc_r+0x54>
 800d5a6:	4c20      	ldr	r4, [pc, #128]	; (800d628 <_malloc_r+0xb0>)
 800d5a8:	6823      	ldr	r3, [r4, #0]
 800d5aa:	b91b      	cbnz	r3, 800d5b4 <_malloc_r+0x3c>
 800d5ac:	4630      	mov	r0, r6
 800d5ae:	f000 f83d 	bl	800d62c <_sbrk_r>
 800d5b2:	6020      	str	r0, [r4, #0]
 800d5b4:	4629      	mov	r1, r5
 800d5b6:	4630      	mov	r0, r6
 800d5b8:	f000 f838 	bl	800d62c <_sbrk_r>
 800d5bc:	1c43      	adds	r3, r0, #1
 800d5be:	d124      	bne.n	800d60a <_malloc_r+0x92>
 800d5c0:	230c      	movs	r3, #12
 800d5c2:	6033      	str	r3, [r6, #0]
 800d5c4:	4630      	mov	r0, r6
 800d5c6:	f000 f842 	bl	800d64e <__malloc_unlock>
 800d5ca:	e7e4      	b.n	800d596 <_malloc_r+0x1e>
 800d5cc:	680b      	ldr	r3, [r1, #0]
 800d5ce:	1b5b      	subs	r3, r3, r5
 800d5d0:	d418      	bmi.n	800d604 <_malloc_r+0x8c>
 800d5d2:	2b0b      	cmp	r3, #11
 800d5d4:	d90f      	bls.n	800d5f6 <_malloc_r+0x7e>
 800d5d6:	600b      	str	r3, [r1, #0]
 800d5d8:	50cd      	str	r5, [r1, r3]
 800d5da:	18cc      	adds	r4, r1, r3
 800d5dc:	4630      	mov	r0, r6
 800d5de:	f000 f836 	bl	800d64e <__malloc_unlock>
 800d5e2:	f104 000b 	add.w	r0, r4, #11
 800d5e6:	1d23      	adds	r3, r4, #4
 800d5e8:	f020 0007 	bic.w	r0, r0, #7
 800d5ec:	1ac3      	subs	r3, r0, r3
 800d5ee:	d0d3      	beq.n	800d598 <_malloc_r+0x20>
 800d5f0:	425a      	negs	r2, r3
 800d5f2:	50e2      	str	r2, [r4, r3]
 800d5f4:	e7d0      	b.n	800d598 <_malloc_r+0x20>
 800d5f6:	428c      	cmp	r4, r1
 800d5f8:	684b      	ldr	r3, [r1, #4]
 800d5fa:	bf16      	itet	ne
 800d5fc:	6063      	strne	r3, [r4, #4]
 800d5fe:	6013      	streq	r3, [r2, #0]
 800d600:	460c      	movne	r4, r1
 800d602:	e7eb      	b.n	800d5dc <_malloc_r+0x64>
 800d604:	460c      	mov	r4, r1
 800d606:	6849      	ldr	r1, [r1, #4]
 800d608:	e7cc      	b.n	800d5a4 <_malloc_r+0x2c>
 800d60a:	1cc4      	adds	r4, r0, #3
 800d60c:	f024 0403 	bic.w	r4, r4, #3
 800d610:	42a0      	cmp	r0, r4
 800d612:	d005      	beq.n	800d620 <_malloc_r+0xa8>
 800d614:	1a21      	subs	r1, r4, r0
 800d616:	4630      	mov	r0, r6
 800d618:	f000 f808 	bl	800d62c <_sbrk_r>
 800d61c:	3001      	adds	r0, #1
 800d61e:	d0cf      	beq.n	800d5c0 <_malloc_r+0x48>
 800d620:	6025      	str	r5, [r4, #0]
 800d622:	e7db      	b.n	800d5dc <_malloc_r+0x64>
 800d624:	200086c4 	.word	0x200086c4
 800d628:	200086c8 	.word	0x200086c8

0800d62c <_sbrk_r>:
 800d62c:	b538      	push	{r3, r4, r5, lr}
 800d62e:	4c06      	ldr	r4, [pc, #24]	; (800d648 <_sbrk_r+0x1c>)
 800d630:	2300      	movs	r3, #0
 800d632:	4605      	mov	r5, r0
 800d634:	4608      	mov	r0, r1
 800d636:	6023      	str	r3, [r4, #0]
 800d638:	f7ff fb8e 	bl	800cd58 <_sbrk>
 800d63c:	1c43      	adds	r3, r0, #1
 800d63e:	d102      	bne.n	800d646 <_sbrk_r+0x1a>
 800d640:	6823      	ldr	r3, [r4, #0]
 800d642:	b103      	cbz	r3, 800d646 <_sbrk_r+0x1a>
 800d644:	602b      	str	r3, [r5, #0]
 800d646:	bd38      	pop	{r3, r4, r5, pc}
 800d648:	20009070 	.word	0x20009070

0800d64c <__malloc_lock>:
 800d64c:	4770      	bx	lr

0800d64e <__malloc_unlock>:
 800d64e:	4770      	bx	lr

0800d650 <_init>:
 800d650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d652:	bf00      	nop
 800d654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d656:	bc08      	pop	{r3}
 800d658:	469e      	mov	lr, r3
 800d65a:	4770      	bx	lr

0800d65c <_fini>:
 800d65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d65e:	bf00      	nop
 800d660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d662:	bc08      	pop	{r3}
 800d664:	469e      	mov	lr, r3
 800d666:	4770      	bx	lr
